{"meta":{"title":"画星星高手","subtitle":"我想要画很多很多星星，用温暖微弱的光，照亮你的每个夜晚。","description":"画星星高手，DealiAxy的个人博客，微信公众号1：画星星高手，公众号2：程序设计实验室","author":"画星星高手","url":"http://blog.deali.cn","root":"/"},"pages":[{"title":"","date":"2020-03-02T03:23:43.980Z","updated":"2020-03-02T03:23:43.980Z","comments":false,"path":"categories/index.html","permalink":"http://blog.deali.cn/categories/","excerpt":"","text":""},{"title":"","date":"2020-03-02T03:23:43.980Z","updated":"2020-03-02T03:23:43.980Z","comments":false,"path":"tags/index.html","permalink":"http://blog.deali.cn/tags/","excerpt":"","text":""}],"posts":[{"title":"“计算机科学概论”系列，集齐三本，召唤神龙！","slug":"96a7cab35effefe5e44c7ed2d87f70e8","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.868Z","comments":true,"path":"posts/1bfa1528e1546de4.html","link":"","permalink":"http://blog.deali.cn/posts/1bfa1528e1546de4.html","excerpt":"","text":"hello world号称是“蹲马桶就能看懂的计算机基础知识”的这个“计算机科学概论”系列图书，都来自于日本，当时我买的第一本是《网络是怎样连接的》，看了几页，就感觉这书和其他日本作者的书风格很相似，语言很活泼生动，讲解得很详细，和西方作者的书味道完全不一样，国内的书就更不用比了。所以最近就入手了这个系列的另外两本，把这个系列集齐了，嘿嘿~记得之前看过鸟哥写的《Linux私房菜》，很喜欢这样的风格，明明是技术书，却和小说一样有趣。 附上图片 溜了溜了，看书去~告辞 image About","categories":[{"name":"书单","slug":"书单","permalink":"http://blog.deali.cn/categories/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"召唤","slug":"召唤","permalink":"http://blog.deali.cn/tags/%E5%8F%AC%E5%94%A4/"},{"name":"集齐","slug":"集齐","permalink":"http://blog.deali.cn/tags/%E9%9B%86%E9%BD%90/"},{"name":"三本","slug":"三本","permalink":"http://blog.deali.cn/tags/%E4%B8%89%E6%9C%AC/"},{"name":"计算机科学","slug":"计算机科学","permalink":"http://blog.deali.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"},{"name":"概论","slug":"概论","permalink":"http://blog.deali.cn/tags/%E6%A6%82%E8%AE%BA/"}]},{"title":"编写爬虫自动下载王者荣耀官网上好看的壁纸","slug":"59aa9a163110ff238077baa2932f4491","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.720Z","comments":true,"path":"posts/5fb938785374b27b.html","link":"","permalink":"http://blog.deali.cn/posts/5fb938785374b27b.html","excerpt":"","text":"前言偶然间发现王者荣耀的官网上发布了这么多好看的壁纸。地址:http://pvp.qq.com/web201605/wallpaper.shtml看了一下，每一张都挺喜欢的，而且还有十多页，一张一张去慢慢下载肯定不是作为一个Geeker的正确姿势。由于最近python用得比较多，所以看到什么好玩的就想爬虫下载下来，所以看到这么多好看图片，我又“熟练”地掏出了python。 分析这个网站长这样。 首先对腾讯这个网站进行分析。 这个每一个小图对应的div &lt;ul&gt;标签里面的列表就是各个尺寸的图片地址。 那么既然是直接有图片地址那就很简单了，把网页的代码下载下来，然后用lxml匹配一下图片的名称和各个尺寸的图片地址，就OK了。 然而没错，事情没有这么简单，腾讯毕竟是大厂，他的网站岂是你想爬就能爬的？？ 在准备写代码的时候又发现了一个问题。我要先把每一页的地址都保存起来，这样才可以一次性爬取所有图片。 那么，只要分析这个每一页的超链接地址就行。然鹅。 excuse me???你可能在逗我，地址呢？？居然是调用了js函数，很气。这样我岂不是还得找一下对应的js代码在哪里。 然后，就开始找js代码，找了半天也没找到这个PageToIndex的js函数到底藏在那个文件里。就在我想要换别的爬虫方式的时候，有个大佬来到实验室，我向大佬请教了一番，大佬果然是大佬，一下子就把问题解决了。 解决经过大佬提醒，我不再纠结于找js代码，而是直接抓包，果然没有什么是抓包解决不了的。果然，在点击第二页之后，抓到了这个： 来看一下里面有什么： 看到List了！还有这些，这不就是我们要的下载的图片地址吗？？？ 大佬出手不凡，这下连爬虫都不用了，我们以及发现了腾讯这个网站获取壁纸的接口了，直接构造请求调用就行了。 调用接口来分析一下这个接口要怎么使用。继续看刚刚抓到的数据： 这里就是接口地址，还有HTTP方法。由于使用了Get方法，所以可以直接把整个URL复制下来然后构造请求参数。不过这个URL太长了，看着头晕，所以看这个参数表吧。 这个参数也是很好懂，要不同的页面就给page传入不同的数字就行，0就是第一页。 测试一下接口把这串长长的URL复制到浏览器里打开，就得到一串长长的Json结果。 1jQuery171004025214512043873_1513834808059(&#123;\"iBltFlag\":\"0\",\"iCache\":\"1\",\"iRet\":\"0\",\"iTotalLines\":\"241\",\"iTotalPages\":\"13\",\"sMsg\":\"Successful\",\"List\":[&#123;\"dtInputDT\":\"2017%2D10%2D23%2014%3A20%3A08\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"636\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739607%5F1644740874%5F13023%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739607%5F1644740874%5F13023%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739607%5F1644740874%5F13023%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739607%5F1644740874%5F13023%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739607%5F1644740874%5F13023%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739607%5F1644740874%5F13023%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739608%5F1644740874%5F13023%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739608%5F1644740874%5F13023%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E7%99%BE%E9%87%8C%E7%8E%84%E7%AD%96%2D%E5%99%A8%E7%8B%82%E4%B9%8B%E9%95%B0\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102314%2F1508739607%5F1644740874%5F13023%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D10%2D20%2011%3A18%3A56\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"634\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469535%5F1644740874%5F9419%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469535%5F1644740874%5F9419%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469535%5F1644740874%5F9419%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469535%5F1644740874%5F9419%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469535%5F1644740874%5F9419%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469536%5F1644740874%5F9419%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469536%5F1644740874%5F9419%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469536%5F1644740874%5F9419%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E9%92%9F%E9%A6%97%2D%E8%99%9A%E7%81%B5%E5%9F%8E%E5%88%A4\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469535%5F1644740874%5F9419%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D10%2D20%2011%3A16%3A40\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"633\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469399%5F1644740874%5F10632%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469399%5F1644740874%5F10632%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469399%5F1644740874%5F10632%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469399%5F1644740874%5F10632%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469400%5F1644740874%5F10632%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469400%5F1644740874%5F10632%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469400%5F1644740874%5F10632%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469400%5F1644740874%5F10632%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E9%98%BF%E8%BD%B2%2D%E8%87%B4%E5%91%BD%E9%A3%8E%E5%8D%8E\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735102011%2F1508469399%5F1644740874%5F10632%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D30%2010%3A53%3A58\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"632\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740036%5F1644740874%5F7530%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740036%5F1644740874%5F7530%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740036%5F1644740874%5F7530%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740036%5F1644740874%5F7530%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740037%5F1644740874%5F7530%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740037%5F1644740874%5F7530%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740037%5F1644740874%5F7530%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740038%5F1644740874%5F7530%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E8%B2%82%E8%9D%89%2D%E4%BB%B2%E5%A4%8F%E5%A4%9C%E4%B9%8B%E6%A2%A6\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735093010%2F1506740036%5F1644740874%5F7530%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A29%3A09\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"631\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508146%5F1644740874%5F24067%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508146%5F1644740874%5F24067%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508146%5F1644740874%5F24067%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508147%5F1644740874%5F24067%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508147%5F1644740874%5F24067%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508148%5F1644740874%5F24067%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508149%5F1644740874%5F24067%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508149%5F1644740874%5F24067%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E8%B5%B5%E4%BA%91%2D%E5%98%BB%E5%93%88%E5%A4%A9%E7%8E%8B\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508146%5F1644740874%5F24067%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A27%3A59\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"630\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508076%5F1644740874%5F6743%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508077%5F1644740874%5F6743%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508077%5F1644740874%5F6743%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508077%5F1644740874%5F6743%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508077%5F1644740874%5F6743%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508078%5F1644740874%5F6743%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508078%5F1644740874%5F6743%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508078%5F1644740874%5F6743%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E8%B5%B5%E4%BA%91%2D%E7%9A%87%E5%AE%B6%E4%B8%8A%E5%B0%86\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508076%5F1644740874%5F6743%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A26%3A59\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"629\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508017%5F1644740874%5F23675%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508017%5F1644740874%5F23675%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508017%5F1644740874%5F23675%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508017%5F1644740874%5F23675%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508018%5F1644740874%5F23675%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508018%5F1644740874%5F23675%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508018%5F1644740874%5F23675%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508018%5F1644740874%5F23675%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E8%B5%B5%E4%BA%91%2D%E7%99%BD%E6%89%A7%E4%BA%8B\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506508017%5F1644740874%5F23675%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A25%3A43\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"628\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507942%5F1644740874%5F2173%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507942%5F1644740874%5F2173%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507942%5F1644740874%5F2173%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507942%5F1644740874%5F2173%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507942%5F1644740874%5F2173%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507942%5F1644740874%5F2173%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507943%5F1644740874%5F2173%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507943%5F1644740874%5F2173%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E8%99%9E%E5%A7%AC%2D%E6%A3%AE%E4%B9%8B%E9%A3%8E%E7%81%B5\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507942%5F1644740874%5F2173%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A21%3A24\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"625\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507681%5F1644740874%5F4556%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507682%5F1644740874%5F4556%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507682%5F1644740874%5F4556%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507682%5F1644740874%5F4556%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507682%5F1644740874%5F4556%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507683%5F1644740874%5F4556%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507683%5F1644740874%5F4556%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507683%5F1644740874%5F4556%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E9%9B%85%E5%85%B8%E5%A8%9C%2D%E6%88%98%E4%BA%89%E5%A5%B3%E7%A5%9E\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507681%5F1644740874%5F4556%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A20%3A16\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"624\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507615%5F1644740874%5F18816%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507615%5F1644740874%5F18816%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507615%5F1644740874%5F18816%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507615%5F1644740874%5F18816%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507615%5F1644740874%5F18816%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507616%5F1644740874%5F18816%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507616%5F1644740874%5F18816%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507616%5F1644740874%5F18816%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E5%B0%8F%E4%B9%94%2D%E7%BC%A4%E7%BA%B7%E7%8B%AC%E8%A7%92%E5%85%BD\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507615%5F1644740874%5F18816%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A16%3A25\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"622\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507382%5F1644740874%5F27300%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507383%5F1644740874%5F27300%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507383%5F1644740874%5F27300%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507383%5F1644740874%5F27300%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507383%5F1644740874%5F27300%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507384%5F1644740874%5F27300%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507384%5F1644740874%5F27300%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507385%5F1644740874%5F27300%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E9%A1%B9%E7%BE%BD%2D%E8%81%8C%E6%A3%92%E7%8E%8B%E7%89%8C\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507382%5F1644740874%5F27300%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A14%3A35\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"621\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507273%5F1644740874%5F14635%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507273%5F1644740874%5F14635%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507274%5F1644740874%5F14635%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507274%5F1644740874%5F14635%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507274%5F1644740874%5F14635%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507274%5F1644740874%5F14635%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507275%5F1644740874%5F14635%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507275%5F1644740874%5F14635%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E6%AD%A6%E5%88%99%E5%A4%A9%2D%E4%B8%9C%E6%96%B9%E4%B8%8D%E8%B4%A5\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507273%5F1644740874%5F14635%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A11%3A30\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"620\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507088%5F1644740874%5F16174%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507088%5F1644740874%5F16174%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507088%5F1644740874%5F16174%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507089%5F1644740874%5F16174%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507089%5F1644740874%5F16174%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507089%5F1644740874%5F16174%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507089%5F1644740874%5F16174%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507090%5F1644740874%5F16174%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E7%89%9B%E9%AD%94%2D%E8%A5%BF%E9%83%A8%E5%A4%A7%E9%95%96%E5%AE%A2\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506507088%5F1644740874%5F16174%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A07%3A57\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"619\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506875%5F1644740874%5F1203%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506876%5F1644740874%5F1203%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506876%5F1644740874%5F1203%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506876%5F1644740874%5F1203%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506876%5F1644740874%5F1203%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506876%5F1644740874%5F1203%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506877%5F1644740874%5F1203%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506877%5F1644740874%5F1203%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E5%90%95%E5%B8%83%2D%E5%A4%A9%E9%AD%94%E7%BC%AD%E4%B9%B1\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506875%5F1644740874%5F1203%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2018%3A06%3A35\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"618\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506793%5F1644740874%5F677%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506793%5F1644740874%5F677%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506794%5F1644740874%5F677%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506794%5F1644740874%5F677%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506794%5F1644740874%5F677%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506794%5F1644740874%5F677%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506795%5F1644740874%5F677%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506795%5F1644740874%5F677%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E5%BB%89%E9%A2%87%2D%E5%9C%B0%E7%8B%B1%E5%B2%A9%E9%AD%82\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092718%2F1506506793%5F1644740874%5F677%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2017%3A59%3A29\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"617\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506367%5F1644740874%5F362%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506367%5F1644740874%5F362%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506367%5F1644740874%5F362%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506367%5F1644740874%5F362%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506367%5F1644740874%5F362%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506368%5F1644740874%5F362%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506368%5F1644740874%5F362%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506368%5F1644740874%5F362%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E5%A4%A7%E4%B9%94%2D%E4%BC%8A%E5%8A%BF%E5%B7%AB%E5%A5%B3\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506506367%5F1644740874%5F362%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D27%2017%3A51%3A04\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"616\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505863%5F1644740874%5F30801%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505863%5F1644740874%5F30801%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505863%5F1644740874%5F30801%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505863%5F1644740874%5F30801%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505863%5F1644740874%5F30801%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505863%5F1644740874%5F30801%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505864%5F1644740874%5F30801%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505864%5F1644740874%5F30801%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E5%A6%B2%E5%B7%B1%2D%E5%B0%91%E5%A5%B3%E9%98%BF%E7%8B%B8\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092717%2F1506505863%5F1644740874%5F30801%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D26%2016%3A02%3A38\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"614\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412955%5F1644740874%5F25340%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412955%5F1644740874%5F25340%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412956%5F1644740874%5F25340%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412956%5F1644740874%5F25340%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412956%5F1644740874%5F25340%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412957%5F1644740874%5F25340%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412957%5F1644740874%5F25340%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412958%5F1644740874%5F25340%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E5%AD%99%E5%B0%9A%E9%A6%99%2D%E6%9D%80%E6%89%8B%E4%B8%8D%E5%A4%AA%E5%86%B7\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092616%2F1506412955%5F1644740874%5F25340%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D25%2012%3A21%3A21\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"613\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313280%5F1644740874%5F29481%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313280%5F1644740874%5F29481%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313280%5F1644740874%5F29481%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313280%5F1644740874%5F29481%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313281%5F1644740874%5F29481%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313281%5F1644740874%5F29481%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313281%5F1644740874%5F29481%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313281%5F1644740874%5F29481%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E7%99%BE%E9%87%8C%E5%AE%88%E7%BA%A6%2D%E7%BB%9D%E5%BD%B1%E7%A5%9E%E6%9E%AA\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313280%5F1644740874%5F29481%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;,&#123;\"dtInputDT\":\"2017%2D09%2D25%2012%3A20%3A12\",\"iBallotNum\":\"0\",\"iClickNum\":\"0\",\"iDownloadNum\":\"0\",\"iNonsupportNum\":\"0\",\"iProdId\":\"612\",\"iStatus\":\"1\",\"sProdDesc_1\":\"\",\"sProdDesc_2\":\"\",\"sProdDesc_3\":\"\",\"sProdDesc_4\":\"\",\"sProdDesc_5\":\"\",\"sProdDesc_6\":\"\",\"sProdDesc_7\":\"\",\"sProdDesc_8\":\"\",\"sProdImgNo_1\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313208%5F1644740874%5F3024%5FsProdImgNo%5F1%2Ejpg%2F200\",\"sProdImgNo_2\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313208%5F1644740874%5F3024%5FsProdImgNo%5F2%2Ejpg%2F200\",\"sProdImgNo_3\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313209%5F1644740874%5F3024%5FsProdImgNo%5F3%2Ejpg%2F200\",\"sProdImgNo_4\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313209%5F1644740874%5F3024%5FsProdImgNo%5F4%2Ejpg%2F200\",\"sProdImgNo_5\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313209%5F1644740874%5F3024%5FsProdImgNo%5F5%2Ejpg%2F200\",\"sProdImgNo_6\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313209%5F1644740874%5F3024%5FsProdImgNo%5F6%2Ejpg%2F200\",\"sProdImgNo_7\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313209%5F1644740874%5F3024%5FsProdImgNo%5F7%2Ejpg%2F200\",\"sProdImgNo_8\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313211%5F1644740874%5F3024%5FsProdImgNo%5F8%2Ejpg%2F200\",\"sProdName\":\"%E7%99%BE%E9%87%8C%E5%AE%88%E7%BA%A6%2D%E9%9D%99%E8%B0%A7%E4%B9%8B%E7%9C%BC\",\"sProdName_1\":\"\",\"sProdName_2\":\"\",\"sProdName_3\":\"\",\"sProdName_4\":\"\",\"sProdName_5\":\"\",\"sProdName_6\":\"\",\"sProdName_7\":\"\",\"sProdName_8\":\"\",\"sThumbURL\":\"http%3A%2F%2Fshp%2Eqpic%2Ecn%2Fishow%2F2735092512%2F1506313208%5F1644740874%5F3024%5FsProdImgNo%5F1%2Ejpg%2F200\"&#125;]&#125;) 代码实现ok了，现在一切准备就绪，开始用代码来实现批量下载图片。 首先是获取一个页面中的所有壁纸列表 123456789101112131415161718192021222324252627282930import requestsimport jsonworkList_url = \"http://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi\"def getlist(page_id): global workList_url worklist_params = &#123; \"activityId\": \"2738\", \"sVerifyCode\": \"ABCD\", \"sDataType\": \"JSON\", \"iListNum\": \"20\", \"totalpage\": \"0\", \"page\": page_id, \"iOrder\": \"0\", \"iSortNumClose\": \"1\", \"jsoncallback\": \"jQuery17101954572044754206_1513821397041\", \"iAMSActivityId\": \"51991\", \"_everyRead\": \"true\", \"iTypeId\": \"2\", \"iFlowId\": \"267733\", \"iActId\": \"2735\", \"iModuleId\": \"2735\", \"_\": \"1513821606943\" &#125; result = requests.get(workList_url, params=worklist_params) worklist_raw = result.text worklist_json = worklist_raw[worklist_raw.find('(') + 1:len(worklist_raw) - 2] worklist = json.loads(parse.unquote(worklist_json)) return worklist 什么？你问怎么获取所有页面。其实我是用for循环从0到11（因为有12个页面）。怎样方便就怎么做了。 然后这是下载图片的方法： 12345678910111213import requestsdef download_img(url, path): try: image_data = requests.get(url, timeout=15) except Exception as e: print(\"下载图片出错,%s,%s\" % (e, url)) return False with open(path, 'wb') as f: f.write(image_data.content) return True 其实主要的难点还是在分析那一块，代码实现真的没有什么技术含量。 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import requestsimport jsonimport osimport sysfrom urllib import parseurl = 'http://pvp.qq.com/web201605/wallpaper.shtml'workList_url = \"http://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi\"json_url = ''' http://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi? activityId=2735&amp; sVerifyCode=ABCD&amp; sDataType=JSON&amp; iListNum=20&amp; totalpage=0&amp; page=1&amp; iOrder=0&amp; iSortNumClose=1&amp; jsoncallback=jQuery17101954572044754206_1513821397041&amp; iAMSActivityId=51991&amp; _everyRead=true&amp; iTypeId=2&amp; iFlowId=267733&amp; iActId=2735&amp; iModuleId=2735&amp; _=1513821606943'''saveFolder = \"image\"imageSizeName = [None, None, '1024x768', '1280x720', '1280x1024', '1440x900', '1920x1080', '1920x1200', '1920x1440']def getlist(page_id): global workList_url worklist_params = &#123; \"activityId\": \"2738\", \"sVerifyCode\": \"ABCD\", \"sDataType\": \"JSON\", \"iListNum\": \"20\", \"totalpage\": \"0\", \"page\": page_id, \"iOrder\": \"0\", \"iSortNumClose\": \"1\", \"jsoncallback\": \"jQuery17101954572044754206_1513821397041\", \"iAMSActivityId\": \"51991\", \"_everyRead\": \"true\", \"iTypeId\": \"2\", \"iFlowId\": \"267733\", \"iActId\": \"2735\", \"iModuleId\": \"2735\", \"_\": \"1513821606943\" &#125; result = requests.get(workList_url, params=worklist_params) worklist_raw = result.text worklist_json = worklist_raw[worklist_raw.find('(') + 1:len(worklist_raw) - 2] worklist = json.loads(parse.unquote(worklist_json)) return worklistdef download_list(list): global imageSizeName makedir(saveFolder) for item in list['List']: makedir(saveFolder, item['sProdName']) print(\"创建文件夹(%s)\" % item['sProdName']) for i in range(2, 9): node_name = 'sProdImgNo_' + str(i) image_rawurl = item[node_name] image_url = image_rawurl[:len(image_rawurl) - 3] + '0' image_savepath = os.path.join(sys.path[0], saveFolder, item['sProdName'], item['sProdName'] + '_' + imageSizeName[i] + '.jpg') if download_img(image_url, image_savepath): print('成功下载图片：%s, 尺寸：%s' % (item['sProdName'], imageSizeName[i]))def download_img(url, path): try: image_data = requests.get(url, timeout=15) except Exception as e: print(\"下载图片出错,%s,%s\" % (e, url)) return False with open(path, 'wb') as f: f.write(image_data.content) return Truedef makedir(*dirname): dirpath = os.path.join(sys.path[0], *dirname) if not os.path.exists(dirpath): os.mkdir(dirpath)if __name__ == '__main__': for i in range(1, 12): list = getlist(i) download_list(list) 运行效果 下载下来的图片： 每个图片都下载了所有尺寸 壁纸下载链接：点击下载总共236套壁纸下载：点击下载链接不能用可以在公众号联系我。 爬虫程序打包成EXE下载链接：点击下载 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"王者","slug":"王者","permalink":"http://blog.deali.cn/tags/%E7%8E%8B%E8%80%85/"},{"name":"壁纸","slug":"壁纸","permalink":"http://blog.deali.cn/tags/%E5%A3%81%E7%BA%B8/"},{"name":"编写","slug":"编写","permalink":"http://blog.deali.cn/tags/%E7%BC%96%E5%86%99/"},{"name":"好看","slug":"好看","permalink":"http://blog.deali.cn/tags/%E5%A5%BD%E7%9C%8B/"},{"name":"下载","slug":"下载","permalink":"http://blog.deali.cn/tags/%E4%B8%8B%E8%BD%BD/"},{"name":"自动","slug":"自动","permalink":"http://blog.deali.cn/tags/%E8%87%AA%E5%8A%A8/"}]},{"title":"ModuleNotFoundError--No-module-named-'apt_pkg'-错误解决","slug":"04be5d44c4f5d8789a501fe300b39cd7","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.616Z","comments":true,"path":"posts/5a6029bfa90471d0.html","link":"","permalink":"http://blog.deali.cn/posts/5a6029bfa90471d0.html","excerpt":"","text":"前言今天在安装docker的时候遇到这个问题了，通过搜索解决方案解决了，所以记录一下。猜测原因应该是今天升级了系统的Python版本，然后python3的软链接也被我改成指向最新版本了。 解决方法1234sudo apt-get remove --purge python-aptsudo apt-get install python-apt -f cd /usr/lib/python3/dist-packages/ sudo cp apt_pkg.cpython-3?m-x86_64-linux-gnu.so apt_pkg.cpython-36m-x86_64-linux-gnu.so 参考资料https://blog.csdn.net/u013427969/article/details/80011355","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"错误","slug":"错误","permalink":"http://blog.deali.cn/tags/%E9%94%99%E8%AF%AF/"},{"name":"解决","slug":"解决","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3/"}]},{"title":"Win10安装Ubuntu子系统教程","slug":"059cf687678685362e47a2611f34d4d2","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.616Z","comments":true,"path":"posts/52305beb8f8bc2cf.html","link":"","permalink":"http://blog.deali.cn/posts/52305beb8f8bc2cf.html","excerpt":"","text":"一、启用“适用于Linux的Windows子系统”通过Win10任务栏中的Cortana搜索框搜索打开“启用或关闭Windows功能”，向下滚动列表，即可看到“适用于Linux的Windows子系统”项。 勾选它，确定，然后按提示重启系统。 二、启用开发人员模式然后进入“设置 - 更新和安全 - 针对开发人员”设置页面，选中“开发人员模式”。如图： 然后就会下载安装开发人员模式程序包，等待安装完成。 三、启用Linux子系统右键点击Win10开始按钮，选择“Windows PowerShell(管理员)”以管理员身份运行Windows PowerShell。 输入并回车运行以下命令： 1&gt; Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 可能需要重启系统。 这个时候已经能进入bash了，但是并没有发行版可以用，运行bash，会有以下界面提示： 四、在Windows商店安装Linux发行版打开Windows Store，然后随便搜索一个Linux发行版的名字，比如我输入Ubuntu。 点获取App。可以看到里面有3个发行版可选。 这里我们还是选Ubuntu吧，我比较熟练。 点击获取开始下载。 安装完成 点击启动，继续下一步的安装操作。输入用户名和密码就可以了。 安装完成，可以愉快地玩耍了。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"子系统","slug":"子系统","permalink":"http://blog.deali.cn/tags/%E5%AD%90%E7%B3%BB%E7%BB%9F/"},{"name":"教程","slug":"教程","permalink":"http://blog.deali.cn/tags/%E6%95%99%E7%A8%8B/"},{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"}]},{"title":"【开源】发布一个Java课程设计BookManageSystem","slug":"062c376c8e06ee8fabbe1db77d9ed97d","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.620Z","comments":true,"path":"posts/94d5c360e265f85f.html","link":"","permalink":"http://blog.deali.cn/posts/94d5c360e265f85f.html","excerpt":"","text":"JavaBookManageSystemGithub主页：https://github.com/Deali-Axy/JavaBookManageSystem 介绍使用Java编写的简易图书管理软件，Java课程的课设之一。 依赖 Mybatis 3.4.6 QFramework4J: About QFramework Sqlite-Jdbc 3.23.1 SwingSets3 数据库设计User field type help_text constraint length id int primary-key name char 20 password char 200 admin boolean Book field type help_text constraint length id int primary-key name char 200 author char 200 publisher char 200 publication_date datetime pages int ISBN char 20 Borrowing field type help_text constraint length id int primary-key book_id int foregin-key to Book user_id int foregin-key to User date date 截图 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Production","slug":"Production","permalink":"http://blog.deali.cn/categories/Production/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"产品","slug":"产品","permalink":"http://blog.deali.cn/tags/%E4%BA%A7%E5%93%81/"},{"name":"课程设计","slug":"课程设计","permalink":"http://blog.deali.cn/tags/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"},{"name":"开源","slug":"开源","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E6%BA%90/"},{"name":"发布","slug":"发布","permalink":"http://blog.deali.cn/tags/%E5%8F%91%E5%B8%83/"}]},{"title":"王者荣耀刷金币小助手发布","slug":"08cad92823e4fe1ec9fc17fcf23f9a79","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.620Z","comments":true,"path":"posts/7b6151eac9b5e54a.html","link":"","permalink":"http://blog.deali.cn/posts/7b6151eac9b5e54a.html","excerpt":"","text":"软件截图 软件原理使用ADB(Android Debug Bridge)连接安卓模拟器/真机，模拟屏幕触摸输入来控制游戏，和人手操作是没有区别的，所以不用担心被发现的问题。（不过闷声发大财是最好的） 使用方法首先要安装一个安卓模拟器。（当然要用手机也可以，不过开发这个软件的初衷就是不想用手机刷）这里我用的是 网易MuMu模拟器 ，它的端口号就是 7555。如果使用其他模拟器的话就需要去查一下模拟器的默认端口号是多少。在模拟器里安装王者，登录之后打开到这个界面： 点击 运行 就开始自动刷金币了。大概3个小时多就能刷满。 软件配置ADB端口号：安卓虚拟机/安卓手机所在的ADB端口号，可以点击 如何查看？ 按钮了解。分辨率：输入正确的ADB端口号之后点 连接 按钮就可以自动获取了，当然也可以手动输入。点击按钮延迟、加载/运行等待时间：刷一局的时间视虚拟机/手机性能差异会有不同吗，可以根据实际情况调整。地图：目前只做了魔女回忆这个地图，这个地图比较稳定，后期有需求的话可以考虑把操控游戏的逻辑做成外部的脚本，可以让用户自己写脚本执行。 软件下载Installation-1.0.2.12.exe About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"游戏","slug":"游戏","permalink":"http://blog.deali.cn/categories/%E6%B8%B8%E6%88%8F/"}],"tags":[{"name":"发布","slug":"发布","permalink":"http://blog.deali.cn/tags/%E5%8F%91%E5%B8%83/"},{"name":"王者","slug":"王者","permalink":"http://blog.deali.cn/tags/%E7%8E%8B%E8%80%85/"},{"name":"金币","slug":"金币","permalink":"http://blog.deali.cn/tags/%E9%87%91%E5%B8%81/"},{"name":"助手","slug":"助手","permalink":"http://blog.deali.cn/tags/%E5%8A%A9%E6%89%8B/"}]},{"title":"Windows10-快捷键大全，整理+排版","slug":"11eeefd36ec82511f2ae3363e8e0d979","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/f6b6e463bb28b0c3.html","link":"","permalink":"http://blog.deali.cn/posts/f6b6e463bb28b0c3.html","excerpt":"","text":"前言偶然在微软官网看到的，整理了一下，非常全面。不只有Windows10能用，大部分快捷键在7/8/8.1里都是通用的。发现这东西对提高效率帮助很大啊，下面是整理之后的。 复制、粘贴及其他常规的键盘快捷方式 按键 操作 Ctrl + X 剪切选定项 Ctrl + C（或 Ctrl + Insert） 复制选定项 Ctrl + V（或 Shift + Insert） 粘贴选定项 Ctrl + Z 撤消操作 Alt + Tab 在打开的应用之间切换 Alt + F4 关闭活动项，或者退出活动应用 Windows 徽标键 + L 锁定你的电脑 Windows 徽标键 + D 显示和隐藏桌面 F2 重命名选定项 F3 在文件资源管理器中搜索文件或文件夹 F4 在文件资源管理器中显示地址栏列表 F5 刷新活动窗口 F6 循环浏览窗口中或桌面上的屏幕元素 F10 激活活动应用中的菜单栏 Alt + F8 在登录屏幕上显示你的密码 Alt + Esc 按项目打开顺序循环浏览 Alt + 带下划线的字母 执行该字母相关的命令 Alt + Enter 显示所选项目的属性 Alt + 空格键 打开活动窗口的快捷方式菜单 Alt + 向左键 返回 Alt + 向右键 前进 Alt + Page Up 向上移动一个屏幕 Alt + Page Down 向下移动一个屏幕 Ctrl + F4 关闭活动文档（在可全屏显示并允许你同时打开多个文档的应用中） Ctrl + A 选择文档或窗口中的所有项目 Ctrl + D（或 Delete） 删除所选的项目，将其移至回收站 Ctrl + R（或 F5） 刷新活动窗口 Ctrl + Y 恢复操作 Ctrl + 向右键 将光标移动到下一个字词的起始处 Ctrl + 向左键 将光标移动到上一个字词的起始处 Ctrl + 向下键 将光标移动到下一段落的起始处 Ctrl + 向上键 将光标移动到上一段落的起始处 Ctrl + Alt + Tab 使用箭头键在所有打开的应用之间进行切换 Alt + Shift + 箭头键 当组或磁贴的焦点放在“开始”菜单上时，可将其朝指定方向移动 Ctrl + Shift + 箭头键 当磁贴的焦点放在“开始”菜单上时，将其移到另一个磁贴即可创建一个文件夹 Ctrl + 箭头键 打开“开始”菜单后调整其大小 Ctrl + 箭头键（移至某个项目）+ 空格键 选择窗口中或桌面上的多个单独项目 Ctrl + Shift（及箭头键） 选择文本块 Ctrl + Esc 打开“开始”屏幕 Ctrl + Shift + Esc 打开任务管理器 Ctrl + Shift 如果多种键盘布局可用，则可切换键盘布局 Ctrl + 空格键 打开或关闭的中文输入法编辑器 (IME) Shift + F10 显示所选项目的快捷方式菜单 按 Shift 与任何箭头键 在窗口中或桌面上选择多个项目，或在文档中选择文本 Shift + Delete 删除选定项，无需先移动到回收站 向右键 打开右侧的下一个菜单，或打开子菜单 向左键 打开左侧的下一个菜单，或关闭子菜单 Esc 停止或离开当前任务 Windows 徽标键键盘快捷方式 按键 操作 Windows 徽标键 打开或关闭“开始”屏幕 Windows 徽标键 + A 打开操作中心 Windows 徽标键 + B 将焦点放在通知区域上 Windows 徽标键 + C 在侦听模式下打开 Cortana 备注 此快捷方式默认情况下处于关闭状态。若要打开它，请选择“开始”菜单 &gt;“设置” &gt;“Cortana”，并打开“当我按 Windows 徽标键 + C 时，让 Cortana 听我的命令”下的切换键 Windows 徽标键 + Shift + C 打开超级按钮菜单 Windows 徽标键 + D 显示和隐藏桌面 Windows 徽标键 + Alt + D 显示和隐藏桌面上的日期和时间 Windows 徽标键 + E 打开文件资源管理器 Windows 徽标键 + F 打开反馈中心并获取屏幕截图 Windows 徽标键 + G 打开游戏栏（当游戏处于打开状态时） Windows 徽标键 + H 开始听写 Windows 徽标键 + I 打开“设置” Windows 徽标键 + J 请将焦点设置到可用的 Windows 提示。当出现 Windows 提示时，请将焦点移到提示上。 再次按下键盘快捷方式，将焦点放在屏幕上 Windows 提示所固定的元素上。 Windows 徽标键 + K 打开“连接”快速操作 Windows 徽标键 + L 锁定你的电脑或切换帐户 Windows 徽标键 + M 最小化所有窗口 Windows 徽标键 + O 锁定设备方向 Windows 徽标键 + P 选择演示显示模式 Windows 徽标键 + R 打开“运行”对话框 Windows 徽标键 + S 打开“搜索” Windows 徽标键 + T 循环浏览任务栏上的应用 Windows 徽标键 + U 打开“轻松使用设置中心” Windows 徽标键 + V 循环浏览通知 Windows 徽标键 + Shift + V 以相反顺序循环浏览通知 Windows 徽标键 + X 打开“快速链接”菜单 Windows 徽标键 + Y 在 Windows Mixed Reality 与桌面之间切换输入 Windows 徽标键 + Z 以全屏模式显示应用中可用的命令 Windows 徽标键 + 句点 (.) 或分号 (;) 打开表情符号面板 Windows 徽标键 + 逗号 (,) 临时速览桌面 Windows 徽标键 + Pause 键 显示“系统属性”对话框 Windows 徽标键 + Ctrl + F 搜索电脑（如果已连接到网络） Windows 徽标键 + Shift + M 还原桌面上的最小化窗口 Windows 徽标键 + 数字 打开桌面，然后启动固定到任务栏的应用（位于数字所指明的位置）。如果应用已处于运行状态，则切换至该应用。 Windows 徽标键 + Shift + 数字 打开桌面，然后启动固定到任务栏的应用新实例（位于数字所指明的位置） Windows 徽标键 + Ctrl + 数字 打开桌面，然后切换至固定到任务栏的应用的最后活动窗口（位于数字所指明的位置） Windows 徽标键 + Alt + 数字 打开桌面，然后打开固定到任务栏的应用的“跳转列表”（位于数字所指明的位置） Windows 徽标键 + Ctrl + Shift + 数字 打开桌面，然后以管理员身份打开位于任务栏上指定位置的应用新实例 Windows 徽标键 + Tab 打开任务视图 Windows 徽标键 向上键 最大化窗口 Windows 徽标键 向下键 删除屏幕上的当前应用并最小化桌面窗口 Windows 徽标键 + 向左键 最大化屏幕左侧的应用或桌面窗口 Windows 徽标键 + 向右键 最大化屏幕右侧的应用或桌面窗口 Windows 徽标键 + Home 最小化活动桌面窗口之外的所有窗口（在第二个笔划时还原所有窗口） Windows 徽标键 + Shift + 向上键 将桌面窗口拉伸至屏幕顶部和底部 Windows 徽标键 + Shift + 向下键 在垂直方向上还原/最小化活动桌面窗口，而宽度保持不变 Windows 徽标键 Shift + 向左键或向右键 将桌面上的应用或窗口从一台显示器移动至另一台显示器 Windows 徽标键 + 空格键 切换输入语言和键盘布局 Windows 徽标键 + Ctrl + 空格键 对之前选择的输入所做的更改 Windows 徽标键 + Ctrl + Enter 打开“讲述人” Windows 徽标键 + 正斜杠 (/) 开始输入法复原流程 Windows 徽标键 + Ctrl + V 打开肩式分接设备 命令提示符键盘快捷方式 按键 操作 Ctrl + C（或 Ctrl + Insert） 复制选定文本 Ctrl + V（或 Shift + Insert） 粘贴选定文本 Ctrl + M 输入标记模式 Alt + 所选择的键 开始在块模式下选择 箭头键 按指定方向移动光标 Page up 将光标向上移动一个页面 Page down 将光标向下移动一个页面 Ctrl + Home（标记模式） 将光标移动到缓冲区起始处 Ctrl + End（标记模式） 将光标移动到缓冲区结尾处 Ctrl + 向上键 在输出历史记录中上移一行 Ctrl + 向下键 在输出历史记录中下移一行 Ctrl + Home（历史记录导航） 如果命令行为空，则将视区移动到缓冲区顶部。否则，请删除命令行中光标左侧的所有字符。 Ctrl + End（历史记录导航） 如果命令行为空，则将视区移动到命令行。否则，请删除命令行中光标右侧的所有字符。 对话框键盘快捷方式 按键 操作 F4 显示活动列表中的项目 Ctrl + Tab 在选项卡中向前移动 Ctrl + Shift + Tab 在选项卡中向后移动 Ctrl + 数字（数字 1–9） 移动到第 n 个选项卡 Tab 在选项中向前移动 Shift + Tab 在选项中向后移动 Alt + 带下划线的字母 执行可与该字母结合使用的命令（或选择该选项） 空格键 如果活动选项为复选框，则选择或清除复选框 Backspace 如果在“另存为”或“打开”对话框中选择文件夹，则打开上一级别的文件夹 箭头键 如果活动选项是一组选项按钮，请选择一个按钮 文件资源管理器键盘快捷方式 按键 操作 Alt + D 选择地址栏 Ctrl + E 选择搜索框 Ctrl + F 选择搜索框 Ctrl + N 打开新窗口 Ctrl + W 关闭活动窗口 Ctrl + 鼠标滚轮 更改文件和文件夹图标的大小和外观 Ctrl + Shift + E 显示选定文件夹上所有级别文件夹 Ctrl + Shift + N 新建文件夹 Num Lock + 星号 (*) 显示选定文件夹下所有子文件夹 Num Lock + 加号 (+) 显示选定文件夹中的内容 Num Lock + 减号 (-) 折叠选定文件夹 Alt + P 显示预览面板 Alt + Enter 打开选定项目的“属性”对话框 Alt + 向右键 查看下一个文件夹 Alt + 向上键 查看该文件夹所在的文件夹 Alt + 向左键 查看上一个文件夹 Backspace 查看上一个文件夹 向右键 显示当前选择内容（如果已折叠），或选择第一个子文件夹 向左键 折叠当前所选内容（如果已展开），或选择该文件夹所在的文件夹 End 显示活动窗口底部 Home 显示活动窗口顶部 F11 最大化或最小化活动窗口 虚拟桌面的键盘快捷方式 按键 操作 Windows 徽标键 + Tab 打开“任务视图” Windows 徽标键 + Ctrl + D 添加虚拟桌面 Windows 徽标键 + Ctrl + 向右键 在你于右侧创建的虚拟桌面之间切换 Windows 徽标键 + Ctrl + 向左键 在你于左侧创建的虚拟桌面之间切换 Windows 徽标键 + Ctrl + F4 关闭你正在使用的虚拟桌面 任务栏键盘快捷方式 按键 操作 Shift + 单击任务栏按钮 打开应用或快速打开另一个应用实例 Ctrl + Shift + 单击任务栏按钮 以管理员身份打开应用 Shift + 右键单击任务栏按钮 显示应用的窗口菜单 Shift + 右键单击分组任务栏按钮 显示组窗口菜单 Ctrl + 单击分组任务栏按钮 循环浏览组窗口 设置键盘快捷方式 按键 操作 Windows 徽标键 + I 打开设置 Backspace 返回至设置主页 使用搜索框在任何页面上键入 搜索设置 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"快捷键","slug":"快捷键","permalink":"http://blog.deali.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"排版","slug":"排版","permalink":"http://blog.deali.cn/tags/%E6%8E%92%E7%89%88/"},{"name":"整理","slug":"整理","permalink":"http://blog.deali.cn/tags/%E6%95%B4%E7%90%86/"}]},{"title":"这是演习：Win10蓝屏，随你召唤","slug":"08e70828bd5925d6b87fbf2d3a28e65d","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.636Z","comments":true,"path":"posts/ecb2ff0e6c1cfcde.html","link":"","permalink":"http://blog.deali.cn/posts/ecb2ff0e6c1cfcde.html","excerpt":"","text":"蓝屏似乎是很多IT之家用户不希望看到的东西，虽然在Win10中你还可以扫描屏幕下方二维码参与微软互动赢取大……那个，蓝屏的好处就是为专业人员提供问题信息，比如当前的内存转储，有助于排查和解决问题。当然，可能光是默认蓝屏给出的信息不够，此时可以开启Win10蓝屏详细信息显示。 ▲这二维码居然“上位”了……VM12虚拟机测试结果 微软在Windows10中安排了手动“调取”蓝屏的方式，那就是*按住右Ctrl键，然后连续按两次Scroll Lock ↓ *。不过该功能默认被锁定，估计是怕普通用户误操作带来麻烦。但对于专业人员和喜欢折腾的用户来说，可以手动解锁该技能。 具体方法如下： 1、进入计算机属性→ 高级系统设置→ 高级→ 启动和故障恢复→ 设置，如下图 —— 2、在“系统失败”中取消**勾选“自动重新启动”，在“写入调试信息”中选择“自动内存转储**”（默认），点击“确定”，如下图 —— 3、在Cortana搜索栏输入regedit，按回车键进入注册表编辑器 4、USB键盘用户定位到（适合大多数用户） HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\kbdhid\\Parameters PS/2键盘用户定位到（现在较少见，多见于十几年前的老机器） HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\i8042prt\\Parameters 5、新建DWORD（32位）值（如下图），命名为CrashOnCtrlScroll。需要注意的是，此处可能有一个Bug导致默认值为0时，一定几率造成键盘暂时失效（几率不算大，但USB键盘用户修改PS/2注册表或反过来等误操作会有较高几率造成键盘临时失效），可以通过复制粘贴等方式把0改为1，通过屏幕键盘的手写功能也可以，反正你得把0改成1，“确定”之后键盘恢复；也可以用鼠标直接删掉该值，键盘也可立即恢复 ▲USB键盘 ▲PS/2键盘 6、把数值数据改为1，“确定”后重启系统应用配置，如下图 —— ▲USB键盘 ▲PS/2键盘 此时按住右Ctrl键，并连续按两次Scroll Lock，激动人心的蓝屏召唤成功。注意，这是真蓝屏，不是出个画面而已，需要重启电脑才能恢复使用。所以这个召唤大法该怎么用比较恰当，各位还须三思而行。另外，如果你想用蓝屏来达到不可告人的目的，最好对方不懂电脑和英文，因为最后的“Stop code：MANUALLY INITIATED CRASH”（停止码：手动启动崩溃）已经出卖了你……","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"召唤","slug":"召唤","permalink":"http://blog.deali.cn/tags/%E5%8F%AC%E5%94%A4/"},{"name":"演习","slug":"演习","permalink":"http://blog.deali.cn/tags/%E6%BC%94%E4%B9%A0/"}]},{"title":"Useful-Gnome-Plugins","slug":"09e9d02dcb284be7d3ef1181da3ca426","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.636Z","comments":true,"path":"posts/886612c0c0501a9a.html","link":"","permalink":"http://blog.deali.cn/posts/886612c0c0501a9a.html","excerpt":"","text":"About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[]},{"title":"关闭CentOS-6-防火墙，关闭Linux系统防火墙","slug":"0e29010fa5466d1633a7b753085adb1a","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.636Z","comments":true,"path":"posts/8d434077f5837b7e.html","link":"","permalink":"http://blog.deali.cn/posts/8d434077f5837b7e.html","excerpt":"","text":"前言最近部署服务的时候需要临时关闭一下防火墙，所以记个笔记，如何关闭CentOS防火墙。 查看系统版本输入：cat /etc/issue 查看版本 通过service关闭service命令开启以及关闭防火墙为即时生效，下次重启机器的时候会自动复原。 查看防火墙状态： 1service iptables status 记得在CentOS6.9中是输入iptables，网上有些教程使用service iptable status命令并不可行。 关闭防火墙：service iptables stop 打开防火墙：service iptables start 通过：/etc/init.d/iptables 进行操作查看防火墙状态：/etc/init.d/iptables/status 关闭防火墙：/etc/init.d/iptables stop（这是临时关闭，关闭的是当前运行的防火墙，重启之后防火墙又会启动，因为它是开机自启动的） 关闭防火墙开机自启，使用chkconfig命令永久开启防火墙：chkconfig iptables on 查看状态：chkconfig --list iptables 永久关闭防火墙： chkconfig iptables off About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"防火墙","slug":"防火墙","permalink":"http://blog.deali.cn/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"关闭","slug":"关闭","permalink":"http://blog.deali.cn/tags/%E5%85%B3%E9%97%AD/"},{"name":"系统","slug":"系统","permalink":"http://blog.deali.cn/tags/%E7%B3%BB%E7%BB%9F/"}]},{"title":"Ubuntu-18-04-修改登录界面背景图","slug":"0fe36571aab60e5c215ab91e7e0fb361","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.636Z","comments":true,"path":"posts/e3133be2cd0478e6.html","link":"","permalink":"http://blog.deali.cn/posts/e3133be2cd0478e6.html","excerpt":"","text":"前言Ubuntu 18.04用了一段时间了，在Gnome桌面的加持下，兔子 18.04 的颜值还不错，加上自己搭配了几套GTK主题，简直美滋滋，唯一美中不足的就是，Ubuntu的登录管理器换成GDM之后，登录界面背景没办法修改了，这怎么行呢，于是经过一番折腾，有了本文。 首先，准备一张图片图片的尺寸呢，根据你的屏幕分辨率确定咯。然后把图片放到/usr/share/backgrounds/目录下面。 修改GDM的CSS文件感觉如果是做前端的人来用Gnome那就真的美滋滋了，主题、插件、各种美化都可以玩的飞起。 文件位置 1/etc/alternatives/gdm3.css 12345678910111213/*找到默认的这个部分*/#lockDialogGroup &#123; background: #2c001e url(resource:///org/gnome/shell/theme/noise-texture.png); background-repeat: repeat; &#125;/*改为*/#lockDialogGroup &#123; background: #2c001e url(file:///usr/share/backgrounds/mypicture.jpg); background-repeat: no-repeat; background-size: cover; background-position: center; &#125; 提示：CSS代码仅供参考，熟悉前端的同学可以根据自己的喜好制作更好的效果，到时候别忘了分享一波哦～ 重启可以重启系统，也可以重启图形界面。为了避免麻烦，建议还是直接重启系统吧，反正都很快的。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"背景图","slug":"背景图","permalink":"http://blog.deali.cn/tags/%E8%83%8C%E6%99%AF%E5%9B%BE/"},{"name":"界面","slug":"界面","permalink":"http://blog.deali.cn/tags/%E7%95%8C%E9%9D%A2/"},{"name":"登录","slug":"登录","permalink":"http://blog.deali.cn/tags/%E7%99%BB%E5%BD%95/"},{"name":"修改","slug":"修改","permalink":"http://blog.deali.cn/tags/%E4%BF%AE%E6%94%B9/"}]},{"title":"Windows的Linux子系统上配置SSH服务器","slug":"10cc2fb1dcef3699dde2733bc24c7931","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/fd2c1dc5ed246196.html","link":"","permalink":"http://blog.deali.cn/posts/fd2c1dc5ed246196.html","excerpt":"","text":"安装openssh这个不用啰嗦太多，首先需要安装openssh-server和openssh-client。 修改sshd-config配置需要关注的就是这三行。 123UsePrivilegeSeparation no #因为wsl没有实现chrootPasswordAuthentication yesListenAddress 0.0.0.0 #这一项在我的发行版里缺省为注释行。 其他的可以根据需求修改。 12ListenAddress 0.0.0.0 # 要让其他计算机能连接上需要加上这一行，或者把经常需要连接的计算机IP加入PermitRootLogin yes # 允许root用户登录。 关闭Windows自带的ssh我原本还不知道的，查了资料才知道新版Windows自带了ssh服务，不过怎么使用还没有了解。可以使用powershell来查看这个服务。 12345PS C:\\Users\\user&gt; Get-Service -Name ssh*Status Name DisplayName------ ---- -----------Stopped SshBroker SSH Server BrokerStopped SshProxy SSH Server Proxy 在服务控制台里找到这两个服务停掉就行了。注意要先停掉sshproxy才可以关掉sshbroker。 以调试方式启动ssh1/usr/sbin/sshd -d -d表明是以调试方式启动的服务，这种情况下，错误会显示在控制台上。 要注意即使以这种方法启动ssh server，它仍然只是在存在bash窗口时的一个子服务。一旦最后一个bash窗口关闭，这个ssh server也就关闭了，显然这不是我们想要的。接下来看看怎么将ssh server以windows服务或者后台进程来运行。 正常开启ssh1service ssh start 自动启动ssh服务当前WSL并不支持ssh server作为服务运行。我们需要借助windows计划任务和脚本，使得在windows启动时自动运行这一服务。 12set ws=wscript.createobject(\"wscript.shell\")ws.run \"C:\\Windows\\System32\\bash.exe -c '/usr/sbin/sshd -D'\",0 将这个文件存为vbs，并在计划任务中添加一个启动任务，触发器设置为系统启动时。不过使用这个方法的前提是你的WSL默认用户是root，对于默认用户不是root的必须使用sudo方式启动。但是！执行sudo时，会提示输入密码，而这时又无法拿到用户的输入。要解决这一问题，需要允许sudo在没有密码的情况下执行命令。 在bash里输入命令： 1sudo visudo 12#includedir /etc/sudoers.dusername ALL=(ALL) NOPASSWD: /usr/sbin/sshd -D 把username改成你自己的用户名即可。 参考资料hbaaron.github.io About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"子系统","slug":"子系统","permalink":"http://blog.deali.cn/tags/%E5%AD%90%E7%B3%BB%E7%BB%9F/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"JavaEE","slug":"JavaEE","permalink":"http://blog.deali.cn/tags/JavaEE/"},{"name":"服务器","slug":"服务器","permalink":"http://blog.deali.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"Ubuntu-18-04-修复-Telegram-中文输入法","slug":"16b08d8ae343c79fd0d5bdf120585a8a","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/309b401772d65bbc.html","link":"","permalink":"http://blog.deali.cn/posts/309b401772d65bbc.html","excerpt":"","text":"前言 Ubuntu 18.04，新的 Gnome 桌面的确好看很多。但同时出现了很多之前在 Unity 没有出现过的 BUG，例如在 Telegram 下无论怎么切换输入法都不能输入中文。 大概是所有 QT 编写的应用程序在 Gnome3 下都会出现这个问题，解决方法是引入 QT_IM_MODULE 变量。大致 步骤如下 编辑~/.local/share/applications/telegramdesktop.desktop文件 修改 Exec 该行，添加环境变量env QT_IM_MODULE=ibus ，使用 fcitx 的用户，把 ibus 替换成 fcitx 重新启动telegram即可 (参考自github issuse和国内博客) About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"输入法","slug":"输入法","permalink":"http://blog.deali.cn/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"修复","slug":"修复","permalink":"http://blog.deali.cn/tags/%E4%BF%AE%E5%A4%8D/"}]},{"title":"操作系统学习三：进程调度与死锁-以及银行家算法避免死锁--NetCore实现","slug":"ea5aa81dbdff99bfa4186accc460ce9f","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.960Z","comments":true,"path":"posts/1e6223ee42e53b10.html","link":"","permalink":"http://blog.deali.cn/posts/1e6223ee42e53b10.html","excerpt":"","text":"前言这是操作系统学习的第三篇啦，关于进程调度有很多内容，操作系统在调度进程的时候最容易遇到的问题就是死锁了，银行家算法是一个典型的避免死锁算法。 死锁的概念先来了解一下死锁的基本概念：一组竞争系统资源或相互通信的进程相互的“永久”阻塞。若无外力作用，这组进程将永远不能继续执行。 看下面两幅图片，左边是可能产生死锁的状态，四辆汽车（进程）要竞争同一个资源（通过路口），如果系统调度不当，就会陷入死锁状态，如右图（每辆车占据一个车道（资源），所需车道（资源）被另一辆车占据。）。 产生死锁的原因产生死锁的原因主要有两点： 资源数 &lt; 要求该种资源的进程数（资源竞争） 进程的推进顺序不恰当 如下图：A、B分别代表某种资源，假设都只有一个，进程P先占用了资源A，接着进程Q占用了资源B，后面进程P再想要资源B就拿不到，进程Q想要资源A也拿不到，系统就陷入死锁状态了。 再看看下面这个图，同样说明了进程推进顺序不恰当导致的结果： (1)、(2) 、(4) 、(5)正常运行 (3) 、(6)发生死锁 修改了进程的推进顺序之后，不会陷入死锁，可以正常运行，如下图： 产生死锁的条件 互斥条件：进程所竞争的资源必须被互斥使用。 互斥是资源的固有属性，不可禁止。 请求保持条件：当前已拥有资源的进程仍能申请新的资源，当被阻塞时，对已获得的资源保持不放。 不剥夺条件：进程已获得的资源只能在使用完时自行释放，而不能被抢占。 环路条件：存在一个至少包含两个进程的循环等待链，链中的每个进程都正在等待下一个进程占有的资源。 前面三个条件是必要条件，环路条件是必要条件。 第一个互斥是资源的固有属性，没办法禁止的。 只要破坏后面3个条件中的任意条件，就可以预防或者避免死锁。 银行家算法这是仿照银行发放贷款时采取的控制方式而设计的一种死锁避免算法。其特点是所有客户的信用额度可以超过银行的全部资本。 银行家算法的目标：*所有客户的信用额度之和可以超过银行的全部资本，这就是杠杆。 * 主要思想银行家算法的主要思想如下： 当一个用户对资金的最大的需求量（即信用额度）不超过银行家现有的资金时就可以接纳该用户。 用户可以分期贷款，但贷款的总数不能超过最大需求量。 当银行家现有的资金不能满足用户的尚需贷款时，对用户的贷款可推迟支付，但总能使用户在有限的时间里得到贷款。 当用户得到所需的全部资金后，一定能在有限的时间里归还所有资金。 （客户信用良好，都能安期还款） 举例 假定某银行的全部流动资金为10000元。客户A申请4000元的信用额度，客户B申请6000元的信用额度，客户C申请10000元的信用额度，由于都没有超过银行的流动资金，予以批准。客户D申请12000元的信用额度，银行拒绝。假定A、B、C来银行提出下列贷款申请： A要求贷款2000元 B要贷款4000元 C要贷款3000元 银行策略如下： 只要银行还有钱就发放贷款 如果采用这种策略，发放贷款后银行剩下1000元，将无法满足任何一个客户的信用额度，从而造成银行呆账。 需要考虑发放贷款后银行面临的风险（如果银行无法满足所有客户的信用额度，将导致无法收回贷款） 如果采用这种策略，先发放A和B的贷款后银行剩下4000元，推迟支付C的贷款，剩下的4000元可以满足A或B客户的信用额度。 进一步理解我们把操作系统看作是银行家，操作系统管理的资源相当于是银行家管理的资金，当进程提出资源请求时，系统检查： 可利用资源数Available：银行流动资金 进程最大资源需求数Max：信用额度 已分配给进程的资源数Allocation：贷款 进程还将需要的资源数Need：信用额度-贷款 银行家算法运行的流程如下： 进行资源预分配 实施安全检测 安全：真正资源分配 不安全：回到预分配前状态 算法实现下面是银行家算法整个实现过程的流程图： 实现相关数据结构的说明： 1． 可利用资源向量Available ，它是一个含有m个元素的数组，其中的每一个元素代表一类可利用的资源的数目，其初始值是系统中所配置的该类全部可用资源数目。其数值随该类资源的分配和回收而动态地改变。如果Available[j]=k，表示系统中现有j类资源k个。 2． 最大需求矩阵Max，这是一个n×m的矩阵，它定义了系统中n个进程中的每一个进程对m类资源的最大需求。如果Max[i][j]=k，表示进程i需要j类资源的最大数目为k。 3． 分配矩阵Allocation，这是一个n×m的矩阵，它定义了系统中的每类资源当前分配到每一个进程的资源数。如果Allocation[i][j]=k，表示进程i当前已经分到j类资源的数目为k个。Allocation[i]表示进程i的分配向量。 4． 需求矩阵Need，这是一个n×m的矩阵，用以表示每个进程还需要的各类资源的数目。如果Need[i][j]=k，表示进程i还需要j类资源k个，才能完成其任务。Need[i]表示进程i的需求向量。 上述三个矩阵间存在关系：Need[i][j]=Max[i][j]-Allocation[i][j]； 算法过程说明 Request是进程i的请求向量。Request[j]=k表示进程i请求分配j类资源k个。当进程i发出资源请求后，系统按下述步骤进行检查： 1． 如果Request ≤Need[i]，则转向步骤2；否则，认为出错，因为它所请求的资源数已超过它当前的最大需求量。 2． 如果Request ≤Available，则转向步骤3；否则，表示系统中尚无足够的资源满足进程i的申请，进程i必须等待。 3． 系统试探性地把资源分配给进程i，并修改下面数据结构中的数值： 12345Available = Available - Request Allocation[i]= Allocation[i]+ RequestNeed[i]= Need[i] - Request 4． 系统执行安全性算法，检查此次资源分配后，系统是否处于安全状态。如果安全才正式将资源分配给进程i，以完成本次分配；否则，将试探分配作废，恢复原来的资源分配状态，让进程i等待。 安全性测试算法1． 设置两个向量。 Work：它表示系统可提供给进程继续运行的各类资源数目，它包含m个元素，开始执行安全性算法时，Work = Available Finish：它表示系统是否有足够的资源分配给进程，使之运行完成，开始Finish[i]=false；当有足够资源分配给进程i时，令Finish[i]=true 2． 从进程集合中找到一个能满足下述条件的进程。 Finish[i]= = false Need[i]≤work 如找到则执行步骤3；否则，执行步骤4； 3． 当进程i获得资源后，可顺利执行直到完成，并释放出分配给它的资源，故应执行 Work = work + Allocation[i] Finish[i]=true 转向步骤2 4． 若所有进程的Finish[i]都为true，则表示系统处于安全状态；否则，系统处于不安全状态。 实现代码好啦，关于概念和原理都讲清楚了，接下来贴上代码。 代码里已经写了详细的注释了，虽然是面向过程的写法，但是结构也很清晰。 首先定义进程类 12345678910111213141516171819202122232425262728293031namespace OperatingSystemExperiment.Exp3 &#123; public class ProcessExp3 &#123; public int Id; /// &lt;summary&gt; /// 进程最大（各类）资源需求数：信用额度 /// &lt;/summary&gt; public int[] Max; /// &lt;summary&gt; /// 已分配给进程的资源：贷款 /// &lt;/summary&gt; public int[] Allocation; /// &lt;summary&gt; /// 进程还需要的资源：信用额度 - 贷款 /// &lt;/summary&gt; public int[] Need; public ProcessExp3(int id) =&gt; this.Id = id; public void EvaluateNeedResource() &#123; Need = new int[Max.Length]; for (var i = 0; i &lt; Max.Length; i++) &#123; Need[i] = Max[i] - Allocation[i]; &#125; &#125; &#125;&#125; 算法实现代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300using System;using System.Collections.Generic;using System.Diagnostics;using System.IO;using System.Linq;namespace OperatingSystemExperiment.Exp3 &#123; public class Main &#123; private int _resourceClassesCount = 0; private int _processCount = 0; private List&lt;ProcessExp3&gt; _processes = new List&lt;ProcessExp3&gt;(); /// &lt;summary&gt; /// 系统全部可分配资源：银行流动资金 /// &lt;/summary&gt; private List&lt;int&gt; _resource = new List&lt;int&gt;(); /// &lt;summary&gt; /// 系统剩余可分配资源 /// &lt;/summary&gt; private List&lt;int&gt; _available = new List&lt;int&gt;(); private Main() &#123; // 获取当前系统资源分配状态 LoadAllAvailableResource(); LoadProcessMaxResource(); var continueFlag = true; while (continueFlag) &#123; mainLoop: // 获取各进程已分配资源 LoadAllocationResource(); // 评估每个进程还需要的资源 EvaluateNeedResource(); // 打印各数据结构当前值 PrintStatus(); Console.Write(\"请输入要操作的进程号：\"); if (!int.TryParse(Console.ReadLine(), out var procId)) &#123; Console.WriteLine(\"\\n请输入数字！\"); if (QueryExit()) Environment.Exit(0); else goto mainLoop; &#125; if (procId &lt; 0 || procId &gt;= _processes.Count) &#123; Console.WriteLine(\"\\n不存在进程号为 &#123;0&#125; 的进程！\", procId); if (QueryExit()) Environment.Exit(0); else goto mainLoop; &#125; Console.Write(\"请输入资源请求向量：\"); var request = Console.ReadLine(); var requestVector = Array.ConvertAll(request?.Split(' '), int.Parse); // 检查资源请求是否合理 var proc = _processes[procId]; Console.WriteLine(\"银行家算法检验中...\"); for (var i = 0; i &lt; requestVector.Length; i++) &#123; if (requestVector[i] &gt; proc.Need[i]) &#123; Console.WriteLine(\"分配失败！资源类型 &#123;0&#125;，请求数量 &#123;1&#125;，超过进程所需数量 &#123;2&#125;\", i, requestVector[i], proc.Need[i]); if (QueryExit()) Environment.Exit(0); else goto mainLoop; &#125; if (requestVector[i] &gt; proc.Max[i]) &#123; Console.WriteLine(\"分配失败！资源类型 &#123;0&#125;，请求数量 &#123;1&#125;，超过进程最大资源数量 &#123;2&#125;\", i, requestVector[i], proc.Need[i]); if (QueryExit()) Environment.Exit(0); else goto mainLoop; &#125; &#125; // 保存当前状态 var tempAvailable = new List&lt;int&gt;(_available); var tempAllocation = (int[]) proc.Allocation.Clone(); var tempNeed = (int[]) proc.Need.Clone(); // 资源预分配 for (var i = 0; i &lt; _resourceClassesCount; i++) &#123; proc.Allocation[i] += requestVector[i]; proc.Need[i] -= requestVector[i]; &#125; if (SecurityEvaluate()) &#123; Console.WriteLine(\"正在为进程 &#123;0&#125; 分配资源\", proc.Id); // 写入资源分配文件 var writer = new StreamWriter(Path.Combine( Environment.CurrentDirectory, \"Exp3\", \"input\", \"Allocation_list.txt\"), false); foreach (var p in _processes) &#123; // 使用LinQ语句，构造输出行 var line = p.Allocation.Aggregate(\"\", (current, allocation) =&gt; current + (allocation + \" \")); writer.WriteLine(line.Trim()); &#125; Console.WriteLine(\"已经保存新的分配状态！\"); writer.Close(); &#125; else &#123; Console.WriteLine(\"恢复试分配前的状态。\"); // 恢复预分配之前的状态 _available = tempAvailable; proc.Allocation = tempAllocation; proc.Need = tempNeed; &#125; continueFlag = !QueryExit(); &#125; &#125; /// &lt;summary&gt; /// 安全性算法 /// &lt;/summary&gt; private bool SecurityEvaluate() &#123; var work = _available; var finish = new bool[_processCount]; var found = false; // 判断标志 var finishCount = 0; // 满足条件的进程数目 var safeQueue = new List&lt;int&gt;(); while (finishCount &lt; _processCount) &#123; for (var procId = 0; procId &lt; _processCount; procId++) &#123; var proc = _processes[procId]; if (!finish[procId]) &#123; for (var resId = 0; resId &lt; work.Count; resId++) &#123; Debug.WriteLine(\"安全性测试，procId=&#123;0&#125; resId=(1)\", procId, resId); if (proc.Need[resId] &gt; work[resId]) &#123; Debug.WriteLine(\"NotFound! procId=&#123;0&#125; resId=&#123;1&#125;\", procId, resId); found = false; &#125; else &#123; Debug.WriteLine(\"Found! procId=&#123;0&#125; resId=&#123;1&#125;\", procId, resId); found = true; &#125; &#125; &#125; if (found) &#123; // 模拟释放资源 for (var t = 0; t &lt; work.Count; t++) &#123; work[t] += proc.Allocation[t]; &#125; // 保存进程号 finish[procId] = true; finishCount++; // 加入安全队列 safeQueue.Add(procId); // 重置状态 found = false; &#125; &#125; &#125; Console.WriteLine(\"安全序列如下：\"); // 打印安全序列 var output = \"\"; foreach (var procId in safeQueue) &#123; output += \"P\" + procId + \",\"; &#125; Console.WriteLine(output.TrimEnd(',')); if (finish.Any(flag =&gt; !flag)) &#123; Console.WriteLine(\"未通过安全性测试！\"); return false; &#125; Console.WriteLine(\"已经通过安全性测试！\"); return true; &#125; private bool QueryExit() &#123; Console.Write(\"是否退出(y/n)？\"); var option = Console.ReadLine()?.ToLower(); return option == \"y\"; &#125; /// &lt;summary&gt; /// 评估进程所需资源 /// &lt;/summary&gt; private void EvaluateNeedResource() &#123; foreach (var p in _processes) &#123; p.EvaluateNeedResource(); // 计算系统还剩下多少资源 for (var i = 0; i &lt; _resourceClassesCount; i++) &#123; _available[i] -= p.Allocation[i]; &#125; &#125; &#125; /// &lt;summary&gt; /// 打印出当前状态 /// &lt;/summary&gt; private void PrintStatus() &#123; Console.WriteLine(\"-------------------------银行家算法-------------------------\"); Console.WriteLine(\"系统进程数量：&#123;0&#125;；资源种类数量：&#123;1&#125;\", _processCount, _resourceClassesCount); Console.WriteLine(\"可用资源向量 Available：\"); foreach (var i in _resource) &#123; Console.Write(\"&#123;0&#125; \", i); &#125; Console.WriteLine(\"\\n最大需求矩阵 Max：\"); foreach (var p in _processes) &#123; foreach (var t in p.Max) &#123; Console.Write(\"&#123;0&#125; \", t); &#125; Console.WriteLine(\"\"); &#125; Console.WriteLine(\"已分配矩阵 Allocation：\"); foreach (var p in _processes) &#123; foreach (var t in p.Allocation) &#123; Console.Write(\"&#123;0&#125; \", t); &#125; Console.WriteLine(\"\"); &#125; Console.WriteLine(\"需求矩阵 Need：\"); foreach (var p in _processes) &#123; foreach (var t in p.Need) &#123; Console.Write(\"&#123;0&#125; \", t); &#125; Console.WriteLine(\"\"); &#125; &#125; /// &lt;summary&gt; /// 加载系统所有可用的资源数量 /// &lt;/summary&gt; private void LoadAllAvailableResource() &#123; var reader = new StreamReader(Path.Combine(Environment.CurrentDirectory, \"Exp3\", \"input\", \"Available_list.txt\")); var line = reader.ReadLine(); // 获取各类型资源数量 _resourceClassesCount = int.Parse(line?.Trim()); line = reader.ReadLine(); _resource.AddRange(Array.ConvertAll(line?.Split(' '), int.Parse)); _available.AddRange(Array.ConvertAll(line?.Split(' '), int.Parse)); reader.Close(); &#125; /// &lt;summary&gt; /// 加载所有进程以及他们需要的最大资源 /// &lt;/summary&gt; private void LoadProcessMaxResource() &#123; var reader = new StreamReader(Path.Combine(Environment.CurrentDirectory, \"Exp3\", \"input\", \"Max_list.txt\")); var line = reader.ReadLine(); var index = 0; _processCount = int.Parse(line?.Trim()); while (!reader.EndOfStream) &#123; line = reader.ReadLine(); var tempProc = new ProcessExp3(index++) &#123; Max = Array.ConvertAll(line?.Split(' '), int.Parse) &#125;; _processes.Add(tempProc); &#125; reader.Close(); &#125; /// &lt;summary&gt; /// 获取所有进程已经分配的资源 /// &lt;/summary&gt; private void LoadAllocationResource() &#123; var reader = new StreamReader(Path.Combine( Environment.CurrentDirectory, \"Exp3\", \"input\", \"Allocation_list.txt\")); var index = 0; do &#123; var line = reader.ReadLine()?.Trim(); _processes[index++].Allocation = Array.ConvertAll(line?.Split(' '), int.Parse); &#125; while (!reader.EndOfStream); reader.Close(); &#125; private void EvaluateProcessNeedResource() &#123; &#125; public static void Run() &#123; new Main(); &#125; &#125;&#125; PS：这个代码里面没有包括Program类，要运行代码的话，需要加上Program类，在Main方法里调用Exp3.Main.Run(); 运行结果12345678910111213141516171819202122232425262728293031## 系统进程数量：5；资源种类数量：3可用资源向量 Available：10 5 7 最大需求矩阵 Max：7 5 3 3 2 2 9 0 2 2 2 2 4 3 3 已分配矩阵 Allocation：2 3 2 2 0 0 3 0 2 2 1 1 0 0 2 需求矩阵 Need：5 2 1 1 2 2 6 0 0 0 1 1 4 3 1 请输入要操作的进程号：0请输入资源请求向量：1 1 1银行家算法检验中...安全序列如下：P0,P1,P2,P3,P4已经通过安全性测试！正在为进程 0 分配资源已经保存新的分配状态！ 重新分配之后的状态： 12345678910111213141516171819202122-------------------------银行家算法-------------------------系统进程数量：5；资源种类数量：3可用资源向量 Available：10 5 7 最大需求矩阵 Max：7 5 3 3 2 2 9 0 2 2 2 2 4 3 3 已分配矩阵 Allocation：3 4 3 2 0 0 3 0 2 2 1 1 0 0 2 需求矩阵 Need：4 1 0 1 2 2 6 0 0 0 1 1 4 3 1 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"编程","slug":"编程","permalink":"http://blog.deali.cn/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"实现","slug":"实现","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E7%8E%B0/"},{"name":"操作系统","slug":"操作系统","permalink":"http://blog.deali.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"死锁","slug":"死锁","permalink":"http://blog.deali.cn/tags/%E6%AD%BB%E9%94%81/"},{"name":"调度","slug":"调度","permalink":"http://blog.deali.cn/tags/%E8%B0%83%E5%BA%A6/"},{"name":"银行家","slug":"银行家","permalink":"http://blog.deali.cn/tags/%E9%93%B6%E8%A1%8C%E5%AE%B6/"},{"name":"进程","slug":"进程","permalink":"http://blog.deali.cn/tags/%E8%BF%9B%E7%A8%8B/"},{"name":"避免","slug":"避免","permalink":"http://blog.deali.cn/tags/%E9%81%BF%E5%85%8D/"}]},{"title":"初读《围城》","slug":"1a05cf319d68d03419c2c55cedf5eca0","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/7748159d9765a229.html","link":"","permalink":"http://blog.deali.cn/posts/7748159d9765a229.html","excerpt":"","text":"每个人都像方鸿渐，跳不出自己的这座围城。——题记 其实我对钱钟书的这部《围城》心仪已久，第一次打开是在去年八月开往广州的高铁上，直到最近才算全部读完。倒不是钱老有多少长篇大论，而是因为我有个习惯——喜欢用琐碎的时间读书，往往一本书没读完，又开始翻开了另一本，所以总是会这样，把读完一本书的时间跨度变得很大。 从去年八月至今这段时间里我的经历还算蛮丰富的，期间也读了其他一些作品，但是对《围城》一直念念不忘，直到最近读完，对《围城》的感受，从一开始的有一点点感兴趣，到故事戛然而止的怅然若失，方鸿渐人生的变化过程，结合自己的生活经历，令人唏嘘。 《围城》的故事情节并不复杂，从主角方鸿渐留洋归来，从他受到众人吹捧到最后无人问津，他对待人生、爱情、婚姻的态度也在发生改变。 我发现很多很棒的作品，往往都是悲剧，或者是带有一定的悲剧色彩，比如金庸的《鹿鼎记》和《天龙八部》、莎士比亚的《哈姆雷特》、沈从文的《边城》等等…….《围城》里的故事无需怀疑是一出悲剧，主角方鸿渐的人生是悲剧，并且围绕着他的各个人物，无不是在无奈中度过了一生，赵辛楣苦恋苏文纨半生无果，苏文纨又千方百计接近方鸿渐但仍以失败告终，方鸿渐的家庭里，妯娌不和，充满各种明争暗斗，方鸿渐自己的事业从来就没有顺利过，在家庭、婚姻、感情各个方面都是失败者，也难怪，一个在国外「游学」多年，不学无术，靠着买回来的假文凭混吃混喝的人，能有什么出息呢？ 在社会环境这方面，《围城》以抗日战争时期的中国大陆作为故事背景，神州大地烽烟四起，到处人心惶惶，人人自危，政府官员腐败不堪，工农商各个行业的人，甚至连学校里的老师，都迂腐顽固，从西方传入的新鲜思想和中国古代的传统思想发生强烈的碰撞，有些人以崇洋媚外为荣，有些人以墨守成规为己见（其实直到今天这两种人还是存在的）。钱老描写的社会下，处处充满压抑的气息，从方鸿渐的求职经历就可以看出来，这是一个处处靠关系的社会，没有各种关系为你开路的话，简直寸步难行，方鸿渐虽然说没有什么真才实学，但是毕竟留过洋，在当时那种落后的社会里足以胜任很多工作了。然而，他仅有的几个工作机会，全部都是靠亲戚、朋友的关系才得到的，在银行的工作，是「岳父」周经理提供的；在国立三闾大学的工作，是朋友赵辛楣推荐的；回到上海在报社的工作，也是赵辛楣提供的…… 让我印象最深刻的是书中关于婚姻的态度，老实讲，这是一本让人读了就不想结婚的书，甚至对「爱情」都会失去信心，钱老和夫人杨绛的感情很好，却能写出这样的书，看来钱老还是有蛮丰富的经历（嘿嘿）。《围城》中对婚姻的态度正如书名这两个字——「围城」，关于婚姻，书中的人物不止一次讨论过，第一次说到「围城」时，是在方鸿渐、赵辛楣、董斜川等人的饭桌上：「慎明道：“关于Bertie结婚离婚的事，我也和他谈过。他引一句英国古话，说结婚仿佛金漆的鸟笼，笼子外面的鸟想住进去，笼内的鸟想飞出来； 所以结而离，离而结，没有了局。”苏小姐道：“法国也有这么一句话。不过，不说是鸟笼，说是被围困的城堡fortresse assiegee，城外的人想冲进去，城里的人想逃出来。鸿渐，是不是？”鸿渐摇头表示不知道。 」书中对结婚的态度是这样的：婚姻是一切感情的终结者，无论和结婚对象的爱情，还是和朋友的友情，又或者是和亲人间的亲情。方鸿渐在和孙柔嘉订婚之前，孙柔嘉是一个性格柔顺得无处挑剔，又十分腼腆的人，但是在他们订婚之后，她的本性变逐渐暴露出来，最终自私的本性显露无遗。在结婚之后，孙柔嘉对方鸿渐的家庭和朋友十分厌恶，常常叫鸿渐疏远他们，而鸿渐也渐渐地疏远了家庭和朋友，我觉得，无论是男人还是女人，生活中不应该只有结婚后的小家庭，原有的家庭和朋友是不能疏远的，而孙柔嘉的目的是要让鸿渐疏离所有关系，最终无依无靠，只能任何她驱策。所以为什么说「婚姻是一切感情的终结者」，这样的结论不是没有由来的。 随着鸿渐的结婚，还有他与家庭、妻子——孙柔嘉之间关系的逐渐僵化，故事也在慢慢走向结局。书末鸿渐在与孙柔嘉的一场争执之后同落地钟一样倒在地上睡着了，睡梦中还在做着和妻子和好，家庭和睦团圆的美梦，故事到这戛然而止，让人有些猝不及防，意犹未尽的同时也让人思考，到底是希望方鸿渐和孙柔嘉夫妻重归于好然后继续无尽的冲突、争执、和好这样的无限循环呢？还是希望主角方鸿渐与孙柔嘉决绝，勇敢地踏上寻找唐晓芙之旅？ 由于篇幅关系，几个片段的笔记等到下次再单独写一篇咯~","categories":[{"name":"评","slug":"评","permalink":"http://blog.deali.cn/categories/%E8%AF%84/"}],"tags":[{"name":"初读","slug":"初读","permalink":"http://blog.deali.cn/tags/%E5%88%9D%E8%AF%BB/"},{"name":"围城","slug":"围城","permalink":"http://blog.deali.cn/tags/%E5%9B%B4%E5%9F%8E/"}]},{"title":"操作系统学习二：进程同步与互斥之生产者-消费者问题--NetCore实现","slug":"d81fbeb09d24a82d15a68ccac07637f9","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.952Z","comments":true,"path":"posts/3f2fe69037158eb8.html","link":"","permalink":"http://blog.deali.cn/posts/3f2fe69037158eb8.html","excerpt":"","text":"目的1． 掌握进程（线程）的同步与互斥。 2． 掌握生产者消费者问题的实现方法。 3． 掌握VC的多线程编程方法。 内容本实验要求设计并实现一个进程，该进程拥有3个生产者线程和1个消费者线程，它们使用10个不同的缓冲区。需要使用如下信号量： l 一个mutex信号量，用以阻止生产者线程和消费者线程同时操作缓冲区队列； l 一个full信号量，当生产者线程生产出一个物品时可以用它向消费者线程发出信号； l 一个empty信号量，消费者线程释放出一个空缓冲区时可以用它向生产者线程发出信号； 生产者线程生产物品（通过等待一个时间模拟生产过程），然后将物品放置在一个空缓冲区中供消费者线程消费（通过将缓冲区数组元素值设为产品编号模拟放入过程）。消费者线程从缓冲区中获得物品，然后释放缓冲区（通过将缓冲区数组元素值设为0模拟取出过程）。当生产者线程生产物品时，如果没有空缓冲区可用，那么生产者线程必须等待消费者线程释放出一个空缓冲区。当消费者线程消费物品时，如果没有满的缓冲区，那么消费者线程将被阻塞，直到新的物品被生产出来。 根据给出的相关函数，实现生产者消费者问题。为了分析结果，要求用文件保存缓冲区变化过程。 伪代码下面给出的是解决这一问题的部分代码和伪代码，后面附上完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;windows.h&gt; //大多数API函数都在这个头文件中定义#include &lt;stdio.h&gt;#include &lt;iostream.h&gt;const unsigned short SIZE_OF_BUFFER = 10; //缓冲区个数 unsigned short ProductID = 0; //生产的产品号unsigned short ConsumeID = 0; //将被消耗的产品号unsigned short in = 0; //产品进缓冲区时的缓冲区下标unsigned short out = 0; //产品出缓冲区时的缓冲区下标//缓冲区是个循环队列int g_buffer[SIZE_OF_BUFFER]; //用整型数组模拟缓冲区bool g_continue = true; //当g_continue = false结束程序HANDLE g_hMutex; // g_hMutex是互斥信号量的句柄 HANDLE g_hEmptySemaphore; //即empty信号量的句柄HANDLE g_hFullSemaphore; //即full信号量的句柄DWORD WINAPI Producer(LPVOID); //生产者线程DWORD WINAPI Consumer(LPVOID); //消费者线程//请完成主函数，主函数中要完成创建各信号量对象和创建各线程的工作main(…)&#123; … //创建生产者和消费者线程CreateThread(…, Producer, …);CreateThread(…, Consumer, …);…&#125;//请完成模拟生产者把新生产的产品放入缓冲区的过程void AddToBuffer()&#123; ...&#125;//请完成模拟消费者从缓冲区中取出一个产品的过程void TakeFromBuffer()&#123;…&#125;//请根据伪代码完成生产者线程函数Producer()&#123; … //获取线程ID while(TRUE) &#123; //模拟生产过程，生产一个物品 sleep(rand); //可以给出时间参数，1000为1秒，休眠时间 P(empty); //请求一个空缓冲区 //操作缓冲区池 P(mutex); … //输出线程ID，这样可以看出是哪一个线程在工作 AddToBuffer(); //将物品放置在一个空缓冲区中 V(mutex); V(full); //用信号通知一个满的缓冲区 &#125; return 0;&#125;//请根据伪代码完成消费者线程函数 Consumer()&#123; … //获取线程ID while(TRUE) &#123; P(full); //请求一个满缓冲区 //操作缓冲区池 P(mutex);… //输出线程ID，这样可以看出是哪一个线程在工作 TakeFromBuffer(); //从一个满缓冲区中取产品 V(mutex); V(empty); //用信号通知一个空的缓冲区 sleep(rand); //休眠时间，模拟消费产品 &#125; return 0;&#125; 实现代码using System;using System.Dynamic;using System.Threading;namespace OperatingSystemExperiment.Exp2 &#123; /// &lt;summary&gt; /// 生产者-消费者问题 /// 使用 P-V 操作解决同步和互斥问题 /// 本实验要求设计并实现一个进程，该进程拥有3个生产者线程和1个消费者线程，它们使用10个不同的缓冲区。 /// &lt;/summary&gt; public static class Main &#123; private static int[] _buffer = new int[10]; /// &lt;summary&gt; /// 是否继续运行 /// &lt;/summary&gt; private static bool _continueRun = true; /// &lt;summary&gt; /// 是否锁定缓冲区 /// &lt;/summary&gt; private static bool _isLock = false; /// &lt;summary&gt; /// 产品号 /// &lt;/summary&gt; private static int _productId = 0; /// &lt;summary&gt; /// 信号枚举 /// &lt;/summary&gt; private enum SemaphoreEnum &#123; /// &lt;summary&gt; /// 互斥信号量，用以阻止生产者线程和消费者线程同时操作缓冲区队列 /// &lt;/summary&gt; Mutex, /// &lt;summary&gt; /// 当生产者线程生产出一个物品时可以用它向消费者线程发出信号 /// &lt;/summary&gt; Full, /// &lt;summary&gt; /// 消费者线程释放出一个空缓冲区时可以用它向生产者线程发出信号 /// &lt;/summary&gt; Empty &#125; public static void Do() &#123; ThreadStart producer = () =&gt; &#123; while (_continueRun) &#123; Thread.Sleep(1200); // 请求空缓冲区 var emptyBufferId = GetEmptyBuffer(); // 没有空缓冲区，继续等 if (emptyBufferId == -1) continue; // 缓冲区锁定，等待 if (_isLock) continue; P(SemaphoreEnum.Empty); P(SemaphoreEnum.Mutex); Console.WriteLine(\"生产线程 &#123;0&#125; 工作中\", Thread.CurrentThread.ManagedThreadId); AddToBuffer(emptyBufferId, ++_productId); Console.WriteLine(\"Produce the &#123;0&#125; product to buffer.\", _productId); // 输出缓冲区内容 var nextIn = GetEmptyBuffer(); var nextOut = GetFullBuffer(); for (var i = 0; i &lt; _buffer.Length; i++) &#123; if (i == nextOut) Console.WriteLine(\"&#123;0&#125;: &#123;1&#125; &lt;- 下一个可取出产品消费的地方\", i, _buffer[i]); else if (i == nextIn) Console.WriteLine(\"&#123;0&#125;: &#123;1&#125; &lt;- 可放下一个产品的位置\", i, _buffer[i]); else Console.WriteLine(\"&#123;0&#125;: &#123;1&#125;\", i, _buffer[i]); &#125; V(SemaphoreEnum.Mutex); // 用信号通知一个消费者线程有一个满的缓冲区 V(SemaphoreEnum.Full); &#125; &#125;; // 1个监视线程 new Thread(() =&gt; &#123; while (_continueRun) &#123; if (_productId &gt; 20) _continueRun = false; &#125; &#125;).Start(); // 3个生产者 new Thread(producer).Start(); new Thread(producer).Start(); new Thread(producer).Start(); // 1个消费者 new Thread(() =&gt; &#123; while (_continueRun) &#123; Thread.Sleep(200); // 请求一个满的缓冲区 var fullBufferId = GetFullBuffer(); if (fullBufferId == -1) continue; // 缓冲区锁定则继续等待 if (_isLock) continue; P(SemaphoreEnum.Full); // 操作缓冲区池 P(SemaphoreEnum.Mutex); Console.WriteLine(\"消费者线程 &#123;0&#125; 工作\", Thread.CurrentThread.ManagedThreadId); var productId = TakeFromBuffer(fullBufferId); Console.WriteLine(\"正在消费产品 &#123;0&#125;\", productId); V(SemaphoreEnum.Mutex); // 用信号通知一个空的缓冲区 V(SemaphoreEnum.Empty); &#125; &#125;).Start(); &#125; /// &lt;summary&gt; /// 生产者把新生产的产品放入缓冲区 /// &lt;/summary&gt; /// &lt;returns&gt;是否成功放入，没有空缓冲区的时候不成功&lt;/returns&gt; private static bool AddToBuffer(int position, int product) &#123; if (_buffer[position] != 0) return false; _buffer[position] = product; return true; &#125; /// &lt;summary&gt; /// 获取一个空的缓冲区，都是满的则返回-1 /// &lt;/summary&gt; /// &lt;returns&gt;空缓冲区的编号&lt;/returns&gt; private static int GetEmptyBuffer() &#123; for (var i = 0; i &lt; _buffer.Length; i++) &#123; if (_buffer[i] == 0) &#123; return i; &#125; &#125; return -1; &#125; /// &lt;summary&gt; /// 获取一个满的缓冲区，都是空的则返回-1 /// &lt;/summary&gt; /// &lt;returns&gt;满缓冲区的编号&lt;/returns&gt; private static int GetFullBuffer() &#123; for (var i = 0; i &lt; _buffer.Length; i++) &#123; if (_buffer[i] != 0) &#123; return i; &#125; &#125; return -1; &#125; /// &lt;summary&gt; /// 消费者从缓冲区中取出一个产品 /// &lt;/summary&gt; /// &lt;returns&gt;产品id&lt;/returns&gt; private static int TakeFromBuffer(int position) &#123; var temp = _buffer[position]; _buffer[position] = 0; return temp; &#125; /// &lt;summary&gt; /// 申请资源操作 /// &lt;/summary&gt; /// &lt;param name=\"s\"&gt;&lt;/param&gt; private static void P(SemaphoreEnum s) &#123; switch (s) &#123; case SemaphoreEnum.Mutex: _isLock = true; break; case SemaphoreEnum.Full: break; case SemaphoreEnum.Empty: break; default: throw new ArgumentOutOfRangeException(nameof(s), s, null); &#125; &#125; /// &lt;summary&gt; /// 释放资源操作 /// &lt;/summary&gt; /// &lt;param name=\"s\"&gt;&lt;/param&gt; private static void V(SemaphoreEnum s) &#123; switch (s) &#123; case SemaphoreEnum.Mutex: _isLock = false; break; case SemaphoreEnum.Full: break; case SemaphoreEnum.Empty: break; default: throw new ArgumentOutOfRangeException(nameof(s), s, null); &#125; &#125; &#125;&#125; 运行结果生产线程 4 工作中Produce the 1 product to buffer.0: 1 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 1生产线程 5 工作中Produce the 2 product to buffer.0: 2 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 2生产线程 4 工作中Produce the 3 product to buffer.0: 3 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 3生产线程 6 工作中Produce the 4 product to buffer.0: 4 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 4生产线程 4 工作中Produce the 5 product to buffer.0: 5 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 5生产线程 5 工作中Produce the 6 product to buffer.0: 6 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0生产线程 4 工作中Produce the 7 product to buffer.0: 6 &lt;- 下一个可取出产品消费的地方1: 72: 0 &lt;- 可放下一个产品的位置3: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 6消费者线程 7 工作正在消费产品 7生产线程 6 工作中Produce the 8 product to buffer.0: 8 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0生产线程 5 工作中Produce the 9 product to buffer.0: 8 &lt;- 下一个可取出产品消费的地方1: 92: 0 &lt;- 可放下一个产品的位置3: 04: 05: 06: 07: 08: 09: 0生产线程 4 工作中Produce the 10 product to buffer.0: 8 &lt;- 下一个可取出产品消费的地方1: 92: 103: 0 &lt;- 可放下一个产品的位置4: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 8消费者线程 7 工作正在消费产品 9消费者线程 7 工作正在消费产品 10生产线程 6 工作中Produce the 11 product to buffer.0: 11 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0生产线程 4 工作中Produce the 12 product to buffer.0: 11 &lt;- 下一个可取出产品消费的地方1: 122: 0 &lt;- 可放下一个产品的位置3: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 11消费者线程 7 工作正在消费产品 12生产线程 5 工作中Produce the 13 product to buffer.0: 13 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0生产线程 6 工作中Produce the 14 product to buffer.0: 13 &lt;- 下一个可取出产品消费的地方1: 142: 0 &lt;- 可放下一个产品的位置3: 04: 05: 06: 07: 08: 09: 0生产线程 4 工作中Produce the 15 product to buffer.0: 13 &lt;- 下一个可取出产品消费的地方1: 142: 153: 0 &lt;- 可放下一个产品的位置4: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 13消费者线程 7 工作正在消费产品 14消费者线程 7 工作正在消费产品 15生产线程 5 工作中Produce the 16 product to buffer.0: 16 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0生产线程 6 工作中Produce the 17 product to buffer.0: 16 &lt;- 下一个可取出产品消费的地方1: 172: 0 &lt;- 可放下一个产品的位置3: 04: 05: 06: 07: 08: 09: 0生产线程 4 工作中Produce the 18 product to buffer.0: 16 &lt;- 下一个可取出产品消费的地方1: 172: 183: 0 &lt;- 可放下一个产品的位置4: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 16消费者线程 7 工作正在消费产品 17消费者线程 7 工作正在消费产品 18生产线程 5 工作中Produce the 19 product to buffer.0: 19 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0生产线程 4 工作中Produce the 20 product to buffer.0: 19 &lt;- 下一个可取出产品消费的地方1: 202: 0 &lt;- 可放下一个产品的位置3: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 19消费者线程 7 工作正在消费产品 20生产线程 5 工作中Produce the 21 product to buffer.0: 21 &lt;- 下一个可取出产品消费的地方1: 0 &lt;- 可放下一个产品的位置2: 03: 04: 05: 06: 07: 08: 09: 0生产线程 4 工作中Produce the 22 product to buffer.0: 21 &lt;- 下一个可取出产品消费的地方1: 222: 0 &lt;- 可放下一个产品的位置3: 04: 05: 06: 07: 08: 09: 0消费者线程 7 工作正在消费产品 21生产线程 6 工作中Produce the 23 product to buffer.0: 23 &lt;- 下一个可取出产品消费的地方1: 222: 0 &lt;- 可放下一个产品的位置3: 04: 05: 06: 07: 08: 09: 0 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"编程","slug":"编程","permalink":"http://blog.deali.cn/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"实现","slug":"实现","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E7%8E%B0/"},{"name":"问题","slug":"问题","permalink":"http://blog.deali.cn/tags/%E9%97%AE%E9%A2%98/"},{"name":"操作系统","slug":"操作系统","permalink":"http://blog.deali.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"进程同步","slug":"进程同步","permalink":"http://blog.deali.cn/tags/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/"},{"name":"互斥","slug":"互斥","permalink":"http://blog.deali.cn/tags/%E4%BA%92%E6%96%A5/"},{"name":"生产者","slug":"生产者","permalink":"http://blog.deali.cn/tags/%E7%94%9F%E4%BA%A7%E8%80%85/"},{"name":"消费者","slug":"消费者","permalink":"http://blog.deali.cn/tags/%E6%B6%88%E8%B4%B9%E8%80%85/"}]},{"title":"New-features-in-Linux-Mint-19-Cinnamon","slug":"bbb1e170a2ac8e37918b53988b3afb17","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.904Z","comments":true,"path":"posts/eb6490ba3f595841.html","link":"","permalink":"http://blog.deali.cn/posts/eb6490ba3f595841.html","excerpt":"","text":"Linux Mint 19 is a long term support release which will be supported until 2023. It comes with updated software and brings refinements and many new features to make your desktop experience more comfortable. TimeshiftIn Linux Mint 19, the star of the show is Timeshift. Although it was introduced in Linux Mint 18.3 and backported to all Linux Mint releases, it is now at the center of Linux Mint’s update strategy and communication. Thanks to Timeshift you can go back in time and restore your computer to the last functional system snapshot. If anything breaks, you can go back to the previous snapshot and it’s as if the problem never happened. This greatly simplifies the maintenance of your computer, since you no longer need to worry about potential regressions. In the eventuality of a critical regression, you can restore a snapshot (thus canceling the effects of the regression) and you still have the ability to apply updates selectively (as you did in previous releases). Security and stability are of paramount importance. By applying all updates you keep your computer secure and with automated snapshots in place its stability is guaranteed. Update ManagerThe Update Manager no longer promotes vigilance and selective updates. It relies on Timeshift to guarantee the stability of your system and suggests to apply all available updates. If it cannot find your Timeshift configuration, it shows a warning: Updates are sorted by type, with security and kernel updates at the top. A new type was introduced for updates originating from 3rd party repositories and/or PPAs. Hovering your mouse cursor over these updates shows their origin in a tooltip. In the past automatic updates were reserved to advanced users. It was assumed that if somebody was experienced enough to set a cron job, they would be experienced enough to parse APT logs and work around regressions. Thanks to Timeshift, which makes it easy for anyone to work around regressions by restoring snapshots, automatic updates can now be enabled easily, in the preferences. The mintupdate-tool command was replaced by mintupdate-cli. This new command doesn’t use dconf, it provides better options and it is easier to use in scripts and in the terminal. Kernel updates rely on meta-packages rather than manually installing kernel packages. This makes it easier to remove older kernels by using “apt autoremove”. Support for “lowlatency” kernels was added. The Update Manager switched to symbolic icons to better support dark themes and provides a keyboard shortcuts window in its help menu. Welcome ScreenLinux Mint 19 ships with a brand new welcome screen. The main page is dedicated to welcoming you to your computer and your new operating system. The new layout makes it easier to add more information and to guide you through your first steps. In addition to the welcome screen, the Linux Mint team worked on improving its documentation. An installation guide, a troubleshooting guide and a translation guide are already available. A security guide and a developer guide are also planned. Software ManagerThe Software Manager which was revamped and gained Flatpak support in Linux Mint 18.3, received many improvements. In the user interface, the layout was refined and transition animations were added. The keyboard navigation was reviewed and improved. The search is faster, asynchronous and you can now search within categories. An internal cache was developed for APT and Flatpak in Linux Mint. This cache provides an abstraction layer, so that applications such as the Software Manager can handle APT and Flatpak the same way, without worrying about their differences. This cache could potentially be used by other applications in the future, such as the menu or the Update Manager. Many efforts were made to increase the performance of the cache. This results in the Software Manager launching even faster than before. Activity and loading indicators were improved. It is now easier to keep track of background activities. Support was added for .flatpakref and .flatpakrepo, so you can click buttons on the Web or share Flatpak installation files to easily install Flatpak applications. When available, the Software Manager shows the size and version of Flatpak applications. Old screenshots are cleaned up. Cinnamon 3.8Linux Mint 19 ships with the latest Cinnamon 3.8. Faster app-launching: Cinnamon 3.8 feels snappier because it is faster and more efficient at launching applications and rendering new windows. The development team investigated Cinnamon’s performance and compared with many others. Here’s how Cinnamon 3.6 compared to Metacity when launching 200 windows: WINDOWS BUILD TIME RECOVERY TIME Metacity 1s 6s Cinnamon 4s 22s Bottlenecks were identified in some applets and in the window manager. After changes were made to tackle these issues, the numbers went down and Cinnamon is now just as fast as Metacity to build the 200 windows and recover. When launching a single application, the difference isn’t as drastic and the original problem isn’t as obvious. This gain in performance is however slightly perceivable and gives an impression of snappiness to the desktop. In addition, the team took the opportunity to improve the window animations. Although they’re not responsible for any delay, they also have an impact on comfort and perception. The new animations look cleaner and along with the performance improvements they make Cinnamon feel snappier than before. Performance improvements: Thanks to improvements in libnemo-extension and the way views are rendered, Nemo is faster at showing directory contents. Nemo no longer lags when moving files over USB devices. Improvements ported from GNOME reduce the occurrence of full stage redraws in Cinnamon. Adjustable maximum sound level: The maximum sound volume was currently set to 150%, with the sound settings allowing to go all the way to 150% while the sound applet and media keys only allowed a range of 0 to 100%. Cinnamon now lets you define what the maximum sound volume is, between 0 and 150%, and all sound controls (whether it’s the sound settings, the sound applet or the media keys) now range between 0 and the maximum value you defined. This allows you to quickly reach 150% without going into the sound settings, but also to quickly reach any arbitrary value, whatever suits your speakers and your environment, whether that value is higher than 100% for small speakers in loud environments or lower than 100% in quiet environments. File search: The Nemo search was simplified and is easier to use. It’s asynchronous and much faster than before. When performing a search you can click the star icon to remember it. Right-clicking the star icon gives you access to your previously saved searches. Notifications: Notifications are smarter. They now have a close button (which unlike the notification itself doesn’t send you towards the source application) and no longer fade-out on mouse-over. To avoid notification spam, they’re also limited in number per source and disappear when the application is focused, except for particular applications (Firefox, Chromium..etc) which use multiple tabs and which can send notifications for various internal sources. Notifications can now also show at the bottom of the screen. Look and feel: Symbolic icons give Cinnamon a more modern look and better support for dark themes. The coordinates and size of some widgets and components were adjusted to fall on exact pixels (which results in removing a slight blurriness and making them look crisp). The quit dialog no longer skips the taskbar. Other improvements: Rubber-banding, which was previously only available in icon view, is now also available in list view. You can now press Super+Alt (or use the right-click option on the Show Desktop applet) to quickly see your desklets, without minimizing your windows. When doing so, desklets move above your windows, until you click anywhere. In the sound applet, the microphone and the speakers can now be muted separately. An option was added to choose whether or not to force the aspect-ratio of the album art. Tracks can be changed by scrolling left/right (that option is configurable). CJS, the Javascript interpreter, was rebased on GJS 1.50.2 and now depends on mozjs52. Support was added for elogind, systemd-timedated1 (which should replace ntp and ntpdate in Linux Mint 19 Cinnamon Edition), and the admin:// protocol. Support was improved for GTK 3.22, CSD windows (in particular for their button layout and titlebar click actions) and LibreOffice (in nemo-preview). With the exception of Nemo extensions, all Python components were ported to Python3. The network settings were backported from GNOME 3.24 and include fixes from GNOME 3.26. The region settings now support the ability to show uncommon/exotic keyboard layouts. In the power settings, “Shutdown immediately” can now be chosen for closed lid and critical battery power events. Cinnamon now activates the touchpad if no other pointing devices are present. The screen is now locked synchronously prior to suspend. Suspend, Hibernate and Screen rotation keys are now supported when the screen is locked. Thumbnails can now be rendered for files as large as 32GB. Scale/Overview can now be activated via dbus. Xlets can now define column options when using lists, settings with dependencies now use a revealer, dependencies can now be inverted and defined on sections (not just widgets). Simple expressions using boolean operators can be used to compare values. The settings example applet was updated to showcase all these new additions. HiDPIHiDPI support gets better with every new release. All the Linux Mint tools use GTK3 and support HiDPI. Mint-Y, the default icon theme, ships with “@2x” icons which look crisp in HiDPI. Gksu, which used GTK+, was removed and all the tools which were using it were migrated to pkexec. Within the default software selection, only a few remaining applications still lack support for it: Hexchat, Gimp and Tomboy Notes. XApps improvementsXed, the text editor, uses a new preferences window. This type of window is provided by libXapp and could be used by more applications in the future. The look and feel was refined and adjusted for GTK 3.22. A keyboard shortcuts window was added in the help menu. A new plugin was added for word auto-completion. This plugin doesn’t use dictionaries but it is able to auto-complete words which are already present in the document. The PDF reader, Xreader, also received a libXapp preferences window and support for optional toolbar buttons. If you enable the option to “Remember recently accessed files” in your “Privacy” settings, Xreader displays and provides quick access to your recently opened PDF and ePub documents. It is now possible to change the size of the thumbnails and that size is remembered for each document. Annotations can now be deleted. ePub support was improved. Thumbnails were fixed and it is now possible to save ePub documents. Support for smooth scrolling was improved. Other improvementsThe USB stick formatting tool now supports exFat. The Software Sources tool is able to show the installed packages from a PPA. A new option was added to the login screen to improve multi-monitor support. You can choose among your monitors which one should show the login form (by default the form jumps from one screen to another as you move your mouse cursor between them). Starting with version 61, Firefox supports window-progress, so download progress will be visible in your window list. GNOME Calendar is installed by default. You can use it as an offline calendar application, or connect it to a Google account to sync with online calendars. This application is also able to show weather forecasts. Gnome-system-logs was replaced by gnome-logs. The multimedia codecs now include the Microsoft fonts. All the Mint tools support HiDPI, GTK3 and Python3. Many also transitioned to AptDaemon and pkexec. Pidgin was removed from the default software selection. It will continue to be available in the repositories but it is no longer installed by default. Ntp and ntpdate were removed. Cinnamon uses systemd to adjust the time. The PIA Manager, the set up tool for PIA VPN connections (available in the repositories), now remembers your username, password and gateway settings. This release ships with linux-firmware 1.173 and the Linux kernel 4.15.0-20. Artwork improvementsLinux Mint 19 features a superb collection of backgrounds from Aaron Thomas, Bruno Fantinatti, Eva Blue, Ezra Comeau-Jeffrey, Jakob Owens, Jan Kaluza, Joanna Kosinska, Johannes Plenio, Jonathan Ferland-Valois, Josh Spires, Luke Stackpoole, Micha Sager, Monika, Oskars Sylwan, Rachael Smith, Sezgin Mendil, Tom Vining, Vladimir Proskurovskiy, Will H McMahan and Willian Justen de Vasconcellos. New Linux Mint backgrounds from Bookwood and Kevin Tee were also added: *New Linux Mint backgrounds* The default theme switched to Mint-Y, but Mint-X is still installed by default as an alternative. Many news icons were added to the Mint-Y icon theme and the places icons are available in multiple colors. To improve look and feel, but also support for HiDPI and dark themes, many of the tools and applications shipped with Linux Mint switched to symbolic icons. Main componentsLinux Mint 19 features Cinnamon 3.8, a Linux kernel 4.15 and an Ubuntu 18.04 package base. LTS strategyLinux Mint 19 will receive security updates until 2023. Until 2020, future versions of Linux Mint will use the same package base as Linux Mint 19, making it trivial for people to upgrade. Until 2020, the development team won’t start working on a new base and will be fully focused on this one.","categories":[{"name":"Linux评测","slug":"Linux评测","permalink":"http://blog.deali.cn/categories/Linux%E8%AF%84%E6%B5%8B/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"}]},{"title":"我最后悔看的电影之一《挪威的森林》","slug":"1bfc7e385e04872b580990cc0a28d26c","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/229c2fc4ae3ac115.html","link":"","permalink":"http://blog.deali.cn/posts/229c2fc4ae3ac115.html","excerpt":"","text":"最近开始金工实习，每天早出晚归超级忙，而且身体还有点不舒服，所以难得有点空闲时间的时候，和我家猪猪看了一下这个电影，全程感觉超级压抑（结果看完就开始发烧），这谁顶得住啊。 可能是电影时长太短的缘故，剧情很紧凑，场景的切换很突兀，没读过原著的人可能很难跟得上。 这电影总的来说，对原著的还原度算挺高的，几个主要角色的代入感都很强，特别是直子，她刚刚出场的时候，还感觉她不如原著描述的漂亮，虽然有几个画面很有日系风的唯美感觉，但是从她眼神可以看出那种深入骨髓无可救药的绝望…… 看下面的照片，直子空洞的眼神， 如果要找一句话来总结的话，我觉得是【一场失败的自我救赎】，因为这部电影中几乎每个人都在尝试徒劳的自我救赎，从一出场就自杀的木月，深陷抑郁最终自杀的直子，到爱而不得嫁人后又自杀的初美，他们最终都在挣扎中走向绝望，就连屏幕之外的观众，都有一种深深的无力感。","categories":[{"name":"评","slug":"评","permalink":"http://blog.deali.cn/categories/%E8%AF%84/"}],"tags":[{"name":"挪威","slug":"挪威","permalink":"http://blog.deali.cn/tags/%E6%8C%AA%E5%A8%81/"},{"name":"后悔","slug":"后悔","permalink":"http://blog.deali.cn/tags/%E5%90%8E%E6%82%94/"},{"name":"电影","slug":"电影","permalink":"http://blog.deali.cn/tags/%E7%94%B5%E5%BD%B1/"},{"name":"森林","slug":"森林","permalink":"http://blog.deali.cn/tags/%E6%A3%AE%E6%9E%97/"}]},{"title":"关于《VB超简单入门》","slug":"1f5a85c7dd574e686de37c9614708018","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.644Z","comments":true,"path":"posts/30d4b07bc778c6f9.html","link":"","permalink":"http://blog.deali.cn/posts/30d4b07bc778c6f9.html","excerpt":"","text":"查看全部内容请移步到我博客里的专题：DealiAxy’s VB-Simple-Guide 有什么问题或者需要交流的同学可以通过微信公众号和我联系。微信公众号：DealiAxy 博客地址：blog.deali.cn","categories":[{"name":"VB入门教程","slug":"VB入门教程","permalink":"http://blog.deali.cn/categories/VB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"B超","slug":"B超","permalink":"http://blog.deali.cn/tags/B%E8%B6%85/"},{"name":"入门","slug":"入门","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E9%97%A8/"}]},{"title":"《PHP-and-MySQL-Web-Development》New-book-bought","slug":"208059c304cbef3c0b54bd79796572d0","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.644Z","comments":true,"path":"posts/5abf89019f0dd03c.html","link":"","permalink":"http://blog.deali.cn/posts/5abf89019f0dd03c.html","excerpt":"","text":"豆瓣简介本书将PHP开发与MySQL应用相结合，分别对PHP和MySQL做了深入浅出的分析，不仅介绍PHP和MySQL的一般概念，而且对PHP和MySQL的Web应用做了较全面的阐述，并包括几个经典且实用的例子。 本书是第4版，经过了全面的更新、重写和扩展，包括PHP 5.3最新改进的特性（例如，更好的错误和异常处理），MySQL的存储过程和存储引擎，Ajax技术与Web 2.0以及Web应用需要注意的安全问题。 Review on AmazonPHP and MySQL are popular open-source technologies that are ideal for quickly developing database-driven Web applications. PHP is a powerful scripting language designed to enable developers to create highly featured Web applications quickly, and MySQL is a fast, reliable database that integrates well with PHP and is suited for dynamic Internet-based applications. PHP and MySQL Web Development shows how to use these tools together to produce effective, interactive Web applications. It clearly describes the basics of the PHP language, explains how to set up and work with a MySQL database, and then shows how to use PHP to interact with the database and the server. This practical, hands-on book consistently focuses on real-world applications, even in the introductory chapters. The authors cover important aspects of security and authentication as they relate to building a real-world website and show you how to implement these aspects in PHP and MySQL. They also introduce you to the integration of front-end and back-end technologies by using JavaScript in your application development. The final part of this book describes how to approach real-world projects and takes the reader through the design, planning, and building of several projects, including: User authentication and personalization Web-based email Social media integration Shopping cart The fifth edition of PHP and MySQL Web Development has been thoroughly updated, revised, and expanded to cover developments in PHP through versions 5.6 and 7, as well as features introduced in recent stable releases of MySQL. 作者简介Laura Thomson是Mozilla公司的高级软件工程师。之前，她是OmniTI公司和Tangled Web Design公司的合伙人。此外，Laura曾经在RMIT大学和波士顿顾问集团工作过。她获得了应用科学（计算机科学）的学士学位和工程学（计算机系统工程）学士学位。在她的空闲时间，她非常喜欢骑马，讨论免费软件和开源软件以及睡觉。 Luke Welling是OmniTI公司的一位Web架构师，他经常在一些国际会议（例如，OSCON， ZendCon， MySQLUC，HPCon，OSDC以及LinuxTag）中就开源和Web开发的话题发表演讲。 About the authorsLaura Thomson is director of engineering at Mozilla Corporation. She was formerly a principal at both OmniTI and Tangled Web Design, and she has worked for RMIT University and the Boston Consulting Group. She holds a Bachelor of Applied Science (Computer Science) degree and a Bachelor of Engineering (Computer Systems Engineering) degree with honors. Luke Welling is a software engineer and regularly speaks on open source and web development topics at conferences such as OSCON, ZendCon, MySQLUC, PHPCon, OSDC, and LinuxTag. He has worked for OmniTI, for the web analytics company Hitwise.com, at the database vendor MySQL AB, and as an independent consultant at Tangled Web Design. He has taught computer science at RMIT University in Melbourne, Australia, and holds a Bachelor of Applied Science (Computer Science) degree. 放个图片 About","categories":[{"name":"书单","slug":"书单","permalink":"http://blog.deali.cn/categories/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://blog.deali.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"PHP","slug":"PHP","permalink":"http://blog.deali.cn/tags/PHP/"},{"name":"Web技术","slug":"Web技术","permalink":"http://blog.deali.cn/tags/Web%E6%8A%80%E6%9C%AF/"}]},{"title":"你可能不知道的Linux死机重启方法","slug":"216cc7218823707f8717a0d8473253ff","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.652Z","comments":true,"path":"posts/4ac21801fe062a8f.html","link":"","permalink":"http://blog.deali.cn/posts/4ac21801fe062a8f.html","excerpt":"","text":"前言不管在工作或者学习中，都可能遇到电脑死机的情况，如果直接强制关机或者切断电源可能会带来硬件的损坏，严重的可能导致数据丢失。 在学习中使用Linux经常遇到死机的情况，而且无法通过Alt+Ctrl+F[1-7]登陆，也无法通过ssh登陆。 更安全、底层的方法按下Alt+Ctrl+SysReq(PrintScr键)一秒钟，保持Alt+Ctrl按下状态，松开PrintScr键；保持按下Alt+Ctrl键的同时，依次按下reisub（也就是busier倒过来），你会发现，当你按下最后一个键的同时，电脑重启了。这样操作，电脑会帮你杀掉所有进程并将挂在的硬盘卸载掉，然后安全重启。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"死机","slug":"死机","permalink":"http://blog.deali.cn/tags/%E6%AD%BB%E6%9C%BA/"},{"name":"重启","slug":"重启","permalink":"http://blog.deali.cn/tags/%E9%87%8D%E5%90%AF/"},{"name":"方法","slug":"方法","permalink":"http://blog.deali.cn/tags/%E6%96%B9%E6%B3%95/"},{"name":"知道","slug":"知道","permalink":"http://blog.deali.cn/tags/%E7%9F%A5%E9%81%93/"},{"name":"可能","slug":"可能","permalink":"http://blog.deali.cn/tags/%E5%8F%AF%E8%83%BD/"}]},{"title":"我用Qt和Python开发了一个视频合并工具","slug":"f55a64a4c621198d8c81fbe973703240","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.964Z","comments":true,"path":"posts/121bbe5c6e9957ed.html","link":"","permalink":"http://blog.deali.cn/posts/121bbe5c6e9957ed.html","excerpt":"","text":"想合并视频，但是却找不到比较好用的工具，很多都要收费，我想着「这破功能还得收费？」，于是决定自己搞一个，一开始用Python做了一个，效果还不错，完美完成了我的视频合并任务，不过没有图形界面，想分享给朋友一起用也没办法，于是昨天用Qt写了个图形界面套上去，中间还是遇到一些问题的，通过这篇文章记录一下。 软件的界面就是这样啦，用Qt Designer随便拖出来的，和VS拖控件也差不了多少。用起来挺方便的，我已经传到网盘了，有需要的同学可以在公众号后台回复「视频合并」直接获取下载链接。 Qt首先是Qt，要开发GUI的话（我当然要求跨平台），现在好像选择也不是很多，electron这种就算了，系统调用太麻烦，不然还是可以考虑，毕竟谁还不会点前端是吧，.Net也不考虑了，没有成熟的跨平台GUI库，Flutter的Desktop还处于Preview阶段，pass掉，数来数去也就Qt上得了台面了。于是就Qt咯。 前段时间准备面试的时候学了一下C++和Qt，正好拿来用用，不过我的视频操作库是Python的，要我C++操作ffmpeg？no，我选择PyQt，不过PyQt5现在几乎没啥中文资料，咋办嘞，之前找到一本书，少有的PyQt5教材，只不过排版很差，我看了差不多一天，给所有章节加上了书签，也熟悉了一下Python的Qt绑定，使用上和C++差不多，只不过不用自己释放对象了，很舒服，但是又由于Python动态类型，有些不熟悉的API用起来又不是那么顺手了，好在我具有多年Python经验，对着pydoc还是可以搞出来。 关于这书的下次再写一篇博客专门说好了，有些地方记录一下也不错。 PythonPython语言设计得还可以，库也是真的多，我想合并视频，立刻就找到一个视频编辑库，moviepy，这个库不单可以合并视频，还可以剪切，加转场效果，调大小等多种操作，很不错，稍加利用就可以开发一个视频编辑工具了。 我来贴一下合并视频的代码： 123456789101112131415161718class ProcThread(QThread): progress = pyqtSignal(int) message = pyqtSignal(str) finished = pyqtSignal() def __init__(self, videos: list, output_path='', parent=None): super(ProcThread, self).__init__(parent) self.videos = [] self.output_path = output_path for video_file in videos: print(video_file) self.videos.append(VideoFileClip(video_file)) def run(self) -&gt; None: final_clip = concatenate_videoclips(self.videos) my_logger = MyBarLogger(self.message, self.progress) final_clip.write_videofile(self.output_path, logger=my_logger) self.finished.emit() 这里用了线程，Qt里面的线程类QThread，这样在处理视频的时候界面不会卡主，同时自己定义了几号信号，利用Qt的信号与槽的机制给GUI主线程反馈进度和完成情况。 这部分很简单啦，顺便贴一下信号和槽连接的代码（省略了一些代码）： 1234567891011121314def start(self): self.thread.message.connect(self.thread_message) self.thread.progress.connect(self.thread_progress) self.thread.finished.connect(self.thread_finished)def thread_message(self, value): self.statusBar.showMessage(value)def thread_progress(self, value): self.progressBar.setValue(value)def thread_finished(self): self.btn_start.setEnabled(True) QMessageBox.information(self, '处理完成', '操作完成', QMessageBox.Yes) 这部分很简单没什么好说的，接下来说一下几个坑。 moviepy进度展示moviepy处理视频本来是输出在控制台的，那么进度也是在控制台输出的，但是我这写了图形界面啊，我得让他的进度输出在进度条上面才行，一开始没有思路，只好谷歌搜一下。 搜到一个github的issue，和我一样的需求，他要写GUI，需要获取处理视频的进度，定制进度条输出，如图： 然后我就看了下面人的回复，这个问题最早是2015年提出的，到17年还有人跟进，看来这个问题还没解决，终于最后有人提出使用proglog替换掉moviepy原本的进度库，问题终于能解决了，如图： 然后2019年有人贴了另一个issue，本issue被开发团队关闭。 新issue是这样： 就是说虽然换了proglog，但是没文档啊，这咋搞？我看了一眼，这个proglog确实文档很少，有点坑。 不过下面还是有人贴了地址，是proglog项目的地址，点进去看看。https://github.com/Edinburgh-Genome-Foundry/Proglog 嗯，找到自定义回调函数的地方了： 看来按这个写就好了，但是坑人啊，我试了一下，这样只会输出message，就是说进行到哪一步了，没输出进度啊，这作者坑人。 但是进度明明是有的，于是只能调试程序的时候打断点跟踪了，过程我就不放了，反正打断点的时候发现，ProgressBarLogger类有个state属性，看介绍是这样： Instance attribute state of proglog.proglog.ProgressLogger 看了一下里面的内容，有个bars字段，拿出来看，是个OrderedDict对象，之前我没接触过这个数据结构，有点懵，其实它就是个排好序的dict，要遍历着实费劲，搞了半天（也有可能是熬夜写代码头脑不灵活）才弄好。 moviepy更新进度的时候，就是在这个state[“bars”]里面传，一个任务一个dict，这个dict里面包含title、index、total等字段，total就是工作量了，index就是现在进行到哪，到这问题就OK啦，我拿index和total一除再乘以100不就是百分比了吗？这不就完事了，然后我再把线程的信号一传，实时显示进度，完美~！ 贴一下代码： 12345678910111213141516class MyBarLogger(ProgressBarLogger): actions_list = [] def __init__(self, message, progress): self.message = message self.progress = progress super(MyBarLogger, self).__init__() def callback(self, **changes): bars = self.state.get('bars') index = len(bars.values()) - 1 if index &gt; -1: bar = list(bars.values())[index] progress = int(bar['index'] / bar['total'] * 100) self.progress.emit(progress) if 'message' in changes: self.message.emit(changes['message']) pyinstaller打包本来没什么好说的，但是打包完也太大了吧，600+m，这谁顶得住，而且打包过程还出错。第一次出错是： RecursionError: maximum recursion depth exceeded 就是超出python的最大递归深度，这没办法，可能包太多了，目录太深入，解决办法是调整递归深度上限。 执行 pyinstaller，会生成 filename.spec文件，在这个 filename.spec 文件开头添加代码，把递归深度调到10w： 12import syssys.setrecursionlimit(100000) 解决了问题，然后第二个问题来了，由于我代码里面用了中文，但是Windows的cmd默认不是utf-8的，报了这个错： UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xce in position 130: invalid continuation b 解决方法是： 换Linux（误） 改变控制台编码（临时）：使用命令 chcp 65001 这样就完成了。 还有一点，单文件打包出来600多m，太大了无法运行，所以还是不要打包单文件的，这样大小虽然有1G多，但是用7z压缩一下就200多m，还可以接受，hhh。 总结PyQt勉强可以开发吧，和C#这些那没得比，但是跨平台还是不错的，就是打包之后太大了。 相关代码已经开源：https://github.com/Deali-Axy/VideoMerge 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"工具","permalink":"http://blog.deali.cn/tags/%E5%B7%A5%E5%85%B7/"},{"name":"视频","slug":"视频","permalink":"http://blog.deali.cn/tags/%E8%A7%86%E9%A2%91/"},{"name":"合并","slug":"合并","permalink":"http://blog.deali.cn/tags/%E5%90%88%E5%B9%B6/"}]},{"title":"【VB超简单入门】二、知识准备","slug":"efba7dc3e19f687d43321b5aeca6f941","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.964Z","comments":true,"path":"posts/b2d6b38519a28cc1.html","link":"","permalink":"http://blog.deali.cn/posts/b2d6b38519a28cc1.html","excerpt":"","text":"在开始编程之前，需要先熟悉一下各种操作和术语，以后学习编程才能得心应手。 首先最重要的操作当然就是…电脑的开机关机啦~（开个玩笑哈哈），必须掌握软件的安装和卸载，还有能编写批处理程序对平时的使用也是很有帮助的。 关于各种操作列个表~~ （由于时间关系，先列出相关点，详细操作以后我会慢慢补充~） l 查看、编辑注册表：使用regedit.exe修改系统注册表，我们写程序有时需要将程序的相关配置保存到注册表中，学会修改注册表才能帮助调试程序 l 各种文件操作：相信这个大家都会了吧~~就是复制、剪切、粘贴文件，创建文件夹之类的 l 使用互联网搜索引擎查找资料！这点很重要，在学习编程过程中常常会遇到各种问题，这时最好先自己上网查找资料，实在无法解决再去请教别人，因为我们一开始还是小白，遇到的问题在大神们看来都是很白痴的。所以先自己查查吧，切勿做伸手党，以免贻笑大方~ l 熟悉各种ActiveX控件的注册，反注册：使用regsvr32.exe来注册ActiveX控件，VB编程需要使用一些外部的控件来实现特定的功能，当我们把程序发给别人使用时，别人的电脑上没有相应的控件，我们得附在压缩包中提供给别人，而且还得注册控件之后才能运行，这时编写一个注册控件的批处理文件就很方便啦~ l 简单的图片处理，VB的IDE中不支持png格式图片，也不支持gif动画，所以要是我们需要添加这些不支持的格式，就得先将这些图片转换成VB支持的jpg格式，这是简单的图片处理知识的作用就体现出来了~ （我一般是用Photoshop和光影魔术手来处理的） l 制作软件图标，这个也是很关键的哦，VB默认的图标很难看的，给软件配上好看的图片看起来bigger更高哦~ l 制作软件安装包，我们辛辛苦苦开发好的软件当然是希望分享给小伙伴们一起用咯，但是我们的软件通常不止一个文件，因此需要会制作安装包，把涉及到的文件打包在一起，一键安装，才能方便小伙伴们使用我们的软件~（我一般是用Inno Setup和Setup Factory，这两个软件使用很方便） l （相关操作暂时就这些吧，以后想到再进行补充~） 接下来是相关术语的介绍，让同学们对编程有一个初步的了解。 （同学们觉得太枯燥可以先跳过，以后遇到不懂再回来查查看也行哈~） 老规矩，相关术语列个表哈~ l “程序”–Program：“《计算机软件保护条例》第三条规定：计算机程序，是指为了得到某种结果而可以由计算机等具有信息处理能力的装置执行的代码化指令序列，或者可以被自动转换成代码化指令序列的符号化指令序列或者符号化语句序列。同一计算机程序的源程序和目标程序为同一作品。” 我用人话翻译一下~ 简单来说，程序就是计算机能理解的机器语言，可以让计算机直接执行然后完成我们制定工作的东西~ l “软件”—Software：（百度百科）“软件（中国大陆及香港用语，台湾称作软体，英文：Software）是一系列按照特定顺序组织的计算机数据和指令的集合。一般来讲软件被划分为系统软件、应用软件和介于这两者之间的中间件。软件并不只是包括可以在计算机（这里的计算机是指广义的计算机）上运行的电脑程序，与这些电脑程序相关的文档一般也被认为是软件的一部分。简单的说软件就是程序加文档的集合体。另也泛指社会结构中的管理系统、思想意识形态、思想政治觉悟、法律法规等等。” 再次翻译~ 软件和程序差不多啦，软件的涵义更广一些，反正也是可以运行的就对了~ 不用太纠结这些 l “编程”—Programming or Coding：编程就是将自己的想法，用计算机能理解的编程语言（包括低级语言和高级语言）写出来，并编译为程序让计算机执行。 l “低级语言”：一般指机器语言和汇编语言，现在也将C语言归入低级语言类别中，因为这些语言是最贴近硬件底层的。 l “机器语言”：就是010101这种，人类根本无法理解的，但是计算机可以直接读取执行，用机器语言编写的程序冗余度最低，理论上可以达到最高的执行效率，不过超级难编写的，写完之后，修改更难~所以基本不用 l “汇编语言”：也叫做符号语言，比机器语言好一点点而已，汇编语言使用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。汇编语言在本质上与机器语言是相同的，只是用简单的符号代替0101而已，它的每一条指令（伪指令除外）都可以对应相应的机器语言，用汇编语言编写的程序效率也是很高，不过编写难度可想而知，一般只用于直接操作硬件底层，我们初学者是不用考虑的啦，知道有这么个东西就好了~ l “C语言”：C语言是40多年前美国贝尔实验室一位叫做D.M.Ritchie的大神设计的，C语言的强大之处在于可移植性，而机器语言和汇编语言是不具备的，可移植性可以简单理解为C语言编写一个程序之后，拿到别的电脑上照样可以运行，而机器语言和汇编语言则不行。但同样，C语言属于比较低级的语言，可以直接操作硬件，一般只有在开发底层软件或者对性能有特殊要求时才会使用C语言。 l “高级语言”：（百度百科）“高级语言（High-level programming language）相对于机器语言（machine language，是一种指令集的体系。这种指令集，称机器码（machine code），是电脑的CPU可直接解读的数据）而言。是高度封装了的编程语言，与低级语言相对。它是以人类的日常语言为基础的一种编程语言，使用一般人易于接受的文字来表示（例如汉字、不规则英文或其他外语），从而使程序编写员编写更容易，亦有较高的可读性，以方便对电脑认知较浅的人亦可以大概明白其内容。由于早期电脑业的发展主要在美国，因此一般的高级语言都是以英语为蓝本。” 高级语言，是相对于低级语言更容易理解、开发效率更好、难度更低的语言，但是相应的代价就是运行速度比较慢，不过随着计算器性能的提升，慢下来的这点速度我们基本不用在乎的， l “编译”：编译就是将程序代码通过编译器翻译成计算机可以理解、可以直接执行的机器语言~ l “编译执行”：由编译器将程序代码一次性编译成程序，再由机器运行程序。如：Delphi、C、C++、VB等语言。效率高于解释执行 l “解释执行”：解释执行的编程语言经过编译器编译后并不生成机器代码，而是生成一种中间代码，然后编译器将这个中间代码包装成软件，运行软件时再由解释器翻译成机器代码执行，这种方式的优点就是不依赖于平台，相同的程序只要编写一次就可以在多个平台运行，比如编写一次HTML5程序就可以同时在PC（电脑）、手机、平板上运行。不过缺点就是运行速度没有编译执行方式的快。如：Python、Java、C#都是这类语言。 l “面向过程”（Procedure Oriented）：面向过程是一种以过程为中心的编程思想，这个概念太抽象了= =… 我觉得以我的能力还不足以解释清楚，所以直接引用百科咯~ “面向过程其实是最为实际的一种思考方式,就算是面向对象的方法也是含有面向过程的思想.可以说面向过程是一种基础的方法.它考虑的是实际地实现.一般的面向过程是从上往下步步求精.所以面向过程最重要的是模块化的思想方法.对比面向过程,面向对象的方法主要是把事物给对象化,对象包括属性与行为.当程序规模不是很大时,面向过程的方法还会体现出一种优势,因为程序的流程很清楚,按着模块与函数的方法可以很好的组织.比如拿学生早上起来的事情来说说这种面向过程吧.粗略的可以将过程拟为: (1)起床 (2)穿衣 (3)洗脸刷牙 (4)去学校 而这4步就是一步一步地完成,它的顺序很重要,你只须一个一个地实现就行了.而如果是用面向对象的方法的话,可能就只抽象出一个学生的类,它包括这四个方法,但是具体的顺序就不能体现出来.” l “面向对象”：（百科）“面向对象(Object Oriented,OO)是软件开发方法。面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。” 简单解释一下，在面向对象思想中，一切都是对象，这使得复杂的算法可以通过各种类结构简化，很高端的就对了~ 我们要学习的编程就是这种，VB、C++、C#都属于面向对象，（VB的面向对象还完整，这也是VB学习难度变得低了很多），C语言则是面向过程的。 l “事件驱动”：（百科，很好理解的）“所谓事件驱动，简单地说就是你点什么按钮（即产生什么事件），电脑执行什么操作（即调用什么函数）.当然事件不仅限于用户的操作. 事件驱动的核心自然是事件。从事件角度说，事件驱动程序的基本结构是由一个事件收集器、一个事件发送器和一个事件处理器组成。事件收集器专门负责收集所有事件，包括来自用户的（如鼠标、键盘事件等）、来自硬件的（如时钟事件等）和来自软件的（如操作系统、应用程序本身等）。事件发送器负责将收集器收集到的事件分发到目标对象中。事件处理器做具体的事件响应工作，它往往要到实现阶段才完全确定，因而需要运用虚函数机制（函数名往往取为类似于HandleMsg的一个名字）。对于框架的使用者来说，他们唯一能够看到的是事件处理器。这也是他们所关心的内容。” l “VB”（Visual Basic）：（百科官方介绍）“Visual Basic是一种由 微软公司开发的结构化的、模块化的、面向对象的、包含协助开发环境的事件驱动为机制的可视化程序设计语言。这是一种可用于微软自家产品开发的语言。它源自于BASIC编程语言。VB拥有图形用户界面（GUI）和快速应用程序开发（RAD）系统，可以轻易的使用DAO、RDO、ADO连接数据库，或者轻松的创建Active X控件。程序员可以轻松的使用VB提供的组件快速建立一个应用程序。” 我们要学习的就是这个VB啦，非常方便好用哈~ 学习不久就可以独立制作实用的小程序啦！","categories":[{"name":"VB入门教程","slug":"VB入门教程","permalink":"http://blog.deali.cn/categories/VB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"B超","slug":"B超","permalink":"http://blog.deali.cn/tags/B%E8%B6%85/"},{"name":"入门","slug":"入门","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E9%97%A8/"},{"name":"知识","slug":"知识","permalink":"http://blog.deali.cn/tags/%E7%9F%A5%E8%AF%86/"},{"name":"准备","slug":"准备","permalink":"http://blog.deali.cn/tags/%E5%87%86%E5%A4%87/"}]},{"title":"机器人与人工智能系列之《与机器人共舞》","slug":"24b76e9d5a5f18d7810d531d4a4d26dd","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.652Z","comments":true,"path":"posts/5a1d1f0995d42d1e.html","link":"","permalink":"http://blog.deali.cn/posts/5a1d1f0995d42d1e.html","excerpt":"","text":"前言最近整理东西，发现我还有好几本书是之前买的，还没开封，这怎么行，赶紧拆封赚一波知识啊。这一本书不知道当初为什么会买，可能是看到“人工智能”的字样，又是国外的翻译读本吧 = =…随手翻了一下，这就是一本介绍机器人和人工智能历史的书，属于吹水类型的，适合放松的时候看啦，书里涉及的技术知识不是很多，看起来会比较轻松，就当看个新鲜～ 书籍简介约翰·马尔科夫在他的重磅新作《与机器人共舞》一书里，从多个维度描绘了人工智能从爆发到遭遇寒冬再到野蛮生长的发展历程，直击了工业机器人、救援机器人、无人驾驶汽车、语音助手Siri等前沿领域，进而深入探讨了人工智能（AI）与智能增强（IA）的终极关系，而马尔科夫也会剖析“人与机器谁将拥有未来”这一机器时代的核心伦理问题。《与机器人共舞》是国内首套最权威、最重磅、最系统、最实用的“机器人与人工智能”书系之一！是迄今为止最完整、最具可读性的人工智能史著作。约翰·马尔科夫重新定位了人与机器的关系，是目前关于机器人与人工智能领域内极具力度的深思之作。 作者简介约翰·马尔科夫，《纽约时报》高级科技记者，普利策奖得主，被誉为“硅谷独家大王”。他对互联网发展有着惊人的洞察力与敏锐度，他是最早对互联网进行报道的记者，将互联网誉为“信息时代的藏宝图”；并最早对首个通过互联网传播的蠕虫病毒进行了报道。有40多年的媒体从业经历， 专注于机器人与人工智能领域的报道。他是报道谷歌无人驾驶汽车第一人，更是乔布斯等业界大咖极为信赖的记者。 封面图 这里是我拍的封面图嘻嘻 豆瓣书评 随手下的一本书，没想到却很贴合专业。讲AI和HCI（这里称作intelligent augmentation) 相爱相杀的故事和很多硅谷AI八卦，在当下AI的各种大潮（无人车，chatbot，ML）下读来非常有趣。 原书可能还不错，翻译得不太好，比较凌乱、生硬。 硅谷总是走在时代技术的最前沿，可以看到硅谷反传统，和各种层出不穷的年轻人，创业公司，推动整个IT时代的向前发展 ai 还是ia —–代替人还是增强人的能力，这是部非常好的人工智能、机器人的发展史科普书；从50年代，人工智能这门新玩意冒出来，跌跌撞撞地发展到现在。 google的无人驾驶技术—-蛮力型靠雷达及时生成周围情况地图，mobileeys 则是视觉算法来感知深度； 70-80年代人工智能的冰冻停滞期；android的鲁宾对 机器人的热情；谷歌的快递机器人pk amazon的 送货无人机； jobs 去世前收购了siri，对苹果是个大的举动。 小感想这本书本身内容是吹水的，并且作为翻译版，语言表达大家都懂的，大概图个乐，茶余饭后看一看仅当消遣咯，还可以了解一下机器人发展的历史。培养一下对AI方向的兴趣，人工智能近年来可是大热的哈。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"书单","slug":"书单","permalink":"http://blog.deali.cn/categories/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"机器人","slug":"机器人","permalink":"http://blog.deali.cn/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"name":"共舞","slug":"共舞","permalink":"http://blog.deali.cn/tags/%E5%85%B1%E8%88%9E/"},{"name":"人工智能","slug":"人工智能","permalink":"http://blog.deali.cn/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"使用国内NPM镜像源提高速度","slug":"26cb1d7f9b51de2f65c413bab16b3243","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.656Z","comments":true,"path":"posts/a888962092f0b575.html","link":"","permalink":"http://blog.deali.cn/posts/a888962092f0b575.html","excerpt":"","text":"NPM npm（全称 Node Package Manager，即“node包管理器”）是Node.js默认的、以JavaScript编写的软件包管理系统。npm可以管理本地项目的所需模块并自动维护依赖情况，也可以管理全局安装的JavaScript工具。 但是由于npm的源在国外，所以国内使用起来动辄10kb/s，甚至根本下载不了，所以使用国内镜像源替代官方源就很有必要了。 国内源淘宝npm镜像 搜索地址：http://npm.taobao.org/ registry地址：http://registry.npm.taobao.org/ cnpmjs镜像 搜索地址：http://cnpmjs.org/ registry地址：http://r.cnpmjs.org/ 配置方法有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例： 临时配置1npm --registry https://registry.npm.taobao.org install express 保存配置推荐用这个，毕竟每次使用npm都配置一次太麻烦了。 1npm config set registry https://registry.npm.taobao.org 配置后可通过下面方式来验证是否成功 1npm config get registry 或 1npm info express 通过cnpm使用1npm install -g cnpm --registry=https://registry.npm.taobao.org 使用 1cnpm install expresstall express 了解更多有趣的操作请关注我的微信公众号：DealiAxy 每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"镜像","slug":"镜像","permalink":"http://blog.deali.cn/tags/%E9%95%9C%E5%83%8F/"},{"name":"速度","slug":"速度","permalink":"http://blog.deali.cn/tags/%E9%80%9F%E5%BA%A6/"},{"name":"提高","slug":"提高","permalink":"http://blog.deali.cn/tags/%E6%8F%90%E9%AB%98/"}]},{"title":"Manjaro配置","slug":"2775b1a992f1f17ccdb1b550de3a4f33","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.660Z","comments":true,"path":"posts/e3d16a0d75fcb6ec.html","link":"","permalink":"http://blog.deali.cn/posts/e3d16a0d75fcb6ec.html","excerpt":"","text":"必备网站Arch wiki！我感觉安装和使用系统过程中的几乎任何问题都可以在上面找到对应的解决方法。https://wiki.archlinux.org/ Archlinuxcn软件源最简单就是把清华镜像添加进去。编辑/etc/pacman.conf文件，在文件的末尾添加以下内容： 12[archlinuxcn]Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 接着执行以下命令： 1234567sudo pacman -Sy archlinuxcn-keyring havegedsudo systemctl enable havegedsudo systemctl start havegedsudo pacman-key --initsudo pacman-key --populate manjarosudo pacman-key --populate archlinuxsudo pacman-key --populate archlinuxcn 然后就可以愉快地安装archlinuxcn源内的各种好用的软件啦～ 附社区镜像列表：https://github.com/archlinuxcn/mirrorlist-repo 输入法目前archlinux官方源已经删除了fcitx-qt4这个包，而搜狗依赖它，所以之前网上的方法都失效了。 不过archlinuxcn里面还有这个包，所以很简单，安装方法如下： 1sudo pacman -S fcitx-im fcitx-configtool fcitx-gtk2 fcitx-gtk3 fcitx-qt4 fcitx-qt5 libidn fcitx-sogoupinyin fcitx-googlepinyin 然后添加一下环境变量： 1234567891011mkdir ~/.config/autostart# 如果你安装过fcitx则会提示文件夹已经存在，不用管继续下一步cp /etc/xdg/autostart/fcitx-autostart.desktop ~/.config/autostart/echo \"GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitx\" &gt; .pam_environmentecho \"export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitx\" &gt; .xprofile 注销之后重新登录即可使用 PS：如果实在安装不了搜狗，可以试试sunpinyin+cloudpinyin的组合，参考：https://forum.manjaro.org/t/sunpinyin-cloudpinyin/114282 参考：https://zhuanlan.zhihu.com/p/80867772 安装zshzsh这个没的说了，必须装的。安装 1sudo pacman -S zsh 修改默认shell 1chsh -s /bin/zsh 重启即可 折腾网络学习工具太难了最好用的Qt写的图形界面：https://github.com/Qv2ray/Qv2ray 配置SwitchyOmega：https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList 配置：https://www.teaper.dev/2019/06/02/v2ray/ 还有一个用pyqt写的一般般：https://github.com/jiangxufeng/v2rayL git代理设置12git config --global http.proxy \"http://127.0.0.1:12333\"git config --global https.proxy \"http://127.0.0.1:12333\" npm代理设置（有没有等于号好像都可以） 12npm config set proxy=http://127.0.0.1:12333npm config set https-proxy http://127.0.0.1:12333 取消代理 12npm config delete proxynpm config delete https-proxy 设置硬盘自动挂载参考： https://blog.csdn.net/weixin_43840399/article/details/93475915 https://www.jianshu.com/p/0098ee403e77","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"}]},{"title":"Ubuntu-18-04-安装最新版VLC播放器","slug":"2b745b8b64bd6952142daebba8687045","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.660Z","comments":true,"path":"posts/71c9bca9358a58c9.html","link":"","permalink":"http://blog.deali.cn/posts/71c9bca9358a58c9.html","excerpt":"","text":"添加软件源12sudo add-apt-repository ppa:videolan/master-dailysudo apt update Install1sudo apt install vlc qtwayland5 运行VLC播放器 安装额外解码器 vlc-plugin-access-extra - multimedia player and streamer (extra access plugins) vlc-plugin-fluidsynth - FluidSynth plugin for VLC vlc-plugin-jack - JACK audio plugins for VLC vlc-plugin-notify - LibNotify plugin for VLC vlc-plugin-samba - Samba plugin for VLC vlc-plugin-skins2 - multimedia player and streamer (Skins2 plugin) vlc-plugin-svg - SVG plugin for VLC vlc-plugin-video-splitter - multimedia player and streamer (video splitter plugins) vlc-plugin-visualization - multimedia player and streamer (visualization plugins) 1sudo apt install libavcodec-extra About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"播放器","slug":"播放器","permalink":"http://blog.deali.cn/tags/%E6%92%AD%E6%94%BE%E5%99%A8/"}]},{"title":"《围城》片段笔记","slug":"2e70b33739b6fa03cc9561151c70f12b","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.660Z","comments":true,"path":"posts/c3e0f0cee7ce0f01.html","link":"","permalink":"http://blog.deali.cn/posts/c3e0f0cee7ce0f01.html","excerpt":"","text":"前言几个星期前写了《围城》的简评，为了尽量精简语言，就没有把摘选的笔记放进去。这次把之前摘选的片段做一个小结。也许以后会添加新的片段。 片段 他想现在想到重逢唐晓芙的可能性，木然无动于中，真见了面，准也如此。缘故是一年前爱她的自己早死了，爱好，怕苏文纨，给鲍小姐诱惑这许多自己，一个个全死了。有几个死掉的自己埋葬在记里，立碑志墓，偶一凭吊，像对唐晓芙的一番情感，有几个自己，仿佛是路毙的，不去收拾，让它们烂掉化掉，给鸟兽吃掉——不过始终消灭不了，譬如向爱尔兰人买文凭的自己。 这个是方鸿渐在一次和孙柔嘉的争吵后的心理活动。唉，我们的人生呐，何尝不是这样，一路走来，有那么多个自己，早都已经不见了，「不忘初心」只不过是隐约记得某个「自己」的模糊轮廓而已。我们能做的事情，无非就是变成不同的自己，在这条路上，不断的消失和出现。 片段 她平时有个嗜好，爱看话剧，尤其是悲剧。这儿的地方戏院不演话剧，她就把现代本国剧作家的名剧尽量买来细读。对话里的句子像：“咱们要勇敢！勇敢！勇敢！”“活要活得痛快，死要死得干脆！”“黑夜已经这么深了，光明还会遥远么？”她全在旁边打了红铅笔的重杠，默诵或朗诵着，好像人生之迹有了解答。只在不快活的时候，譬如好月亮引起了身世之感，或者执行“女生指导”的职责，而女生不受指导，反叽咕：“大不了也是个大家毕业生，赁什么资格来指指导我们？只好管老妈子，发厕所里的手纸！”——在这种时候，她才发现这些富于哲理的警句没有什么邦助。活诚然不痛快，死可也不容易；黑夜似乎够深了，光明依然看不见。 这是孙柔嘉的室友——范小姐。她对其他女性仿佛有一种莫名的优越感，无厘头的鄙视其他人，曾经把孙柔嘉当做情敌，可最终不是，因为敌不过。 「黑夜似乎够深了，光明依然看不见。」绝望中，或是即将绝望的人们，都会有这种感受，真实的世界就是这样的，「阳光总在风雨后」，但是你不知道风雨会持续多久。「月有阴晴圆缺，人有悲欢离合」，然而，一个月三十天，月圆只有两夜。人呢，聚少离多。现实世界是一个不完美的综合体，社会财富的结构以及固然不公平的社会环境造成了我们的不完美的一切，所以很真实。正如这句话「身在黑暗，心向光明」，再糟糕的一切也无法阻止人对美好的渴望。 片段 鸿渐闷闷回房，难得一团高兴，找朋友扫尽了兴。天生人是教他们孤独的，一个个该各归各，老死不相往来。身体里容不下的东西，或消化，或排泄，是个人的事，为什么心里容不下的情感，要找同伴来分摊？聚在一起，动不动自己冒犯人，或者人开罪自己，好像一只只刺猬，只好保持著彼此间的距离，要亲密团结，不是你刺痛我的肉，就是我擦破你的皮。鸿渐真想把这些感慨跟一个能了解自己的人谈谈，孙小姐好像比赵辛楣能了解自己，至少她听自己的话很有兴味——不过，刚才说人跟人该免接触，怎么又找女人呢？也许男人跟男人在一起像一群刺猬，男人跟女人在一起像——鸿渐想不出像什么，翻开笔记来准备明天的功课。 这一段是方鸿渐在国立三闾大学的时候，有天工作受挫处处碰壁，找好友赵辛楣倾诉，对方也是意兴阑珊，所以突然心里很受伤，有了这段活动。 这一句话「为什么心里容不下的情感，要找同伴来分摊？」让人很收触动，是呀，我总觉得，把朋友当做情感垃圾桶是一种很自私的行为，但是倾听同伴的心事，又是朋友的一种义务，那么， 便互相分摊这些吧。 片段 人事太忙了，不许我们全神贯注，无间断地怀念一个人。我们一生对于最亲爱的人的想念，加起来恐怕不到一点钟，此外不过是念头在他身上瞥过，想到而已。 对的，我们作为每一个独立的个体，只能抽空想一想亲朋好友，然后明天还要上班。生活本是如此。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"评","slug":"评","permalink":"http://blog.deali.cn/categories/%E8%AF%84/"}],"tags":[{"name":"围城","slug":"围城","permalink":"http://blog.deali.cn/tags/%E5%9B%B4%E5%9F%8E/"},{"name":"笔记","slug":"笔记","permalink":"http://blog.deali.cn/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"关于Python的异常处理","slug":"dd5074f92c4a05226171c7243b442aee","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/d5871a3622711983.html","link":"","permalink":"http://blog.deali.cn/posts/d5871a3622711983.html","excerpt":"","text":"前言异常处理在任何一门编程语言里都是值得关注的一个话题，良好的异常处理可以让你的程序更加健壮，清晰的错误信息更能帮助你快速修复问题。在Python中，和部分高级语言一样，使用了try/except/finally语句块来处理异常，如果你有其他编程语言的经验，实践起来并不难。Python 中（至少）有两种错误：语法错误和异常（ syntax errors 和 exceptions ）。下面稍微介绍一下， 语法错误和异常语法错误语法错误是最明显的错误，遇到这种错误程序根本无法运行。例如 1print(\"hello\" 上面这个代码就会引发错误，因为少了一个右括号。 还有下面这个： 12if a &gt; b print(a) 这个也不行，因为if后面没有加冒号。一般来说，熟悉了语法之后很少会出现这类错误。 异常即使一条语句或表达式在语法上是正确的，当试图执行它时也可能会引发错误。运行期检测到的错误称为异常，大多数异常都不会被程序处理，需要我们自己去捕捉和处理。错误信息的最后一行指出发生了什么错误。异常也有不同的类型，异常类型做为错误信息的一部分显示出来：示例中的异常分别为 零除错误（ ZeroDivisionError ） ，命名错误（ NameError） 和 类型错误（ TypeError ）。打印错误信息时，异常的类型作为异常的内置名显示。对于所有的内置异常都是如此，不过用户自定义异常就不一定了（尽管这是一个很有用的约定）。标准异常名是内置的标识（没有保留关键字）。 python标准异常 异常名称 描述 BaseException 所有异常的基类 SystemExit 解释器请求退出 KeyboardInterrupt 用户中断执行(通常是输入^C) Exception 常规错误的基类 StopIteration 迭代器没有更多的值 GeneratorExit 生成器(generator)发生异常来通知退出 StandardError 所有的内建标准异常的基类 ArithmeticError 所有数值计算错误的基类 FloatingPointError 浮点计算错误 OverflowError 数值运算超出最大限制 ZeroDivisionError 除(或取模)零 (所有数据类型) AssertionError 断言语句失败 AttributeError 对象没有这个属性 EOFError 没有内建输入,到达EOF 标记 EnvironmentError 操作系统错误的基类 IOError 输入/输出操作失败 OSError 操作系统错误 WindowsError 系统调用失败 ImportError 导入模块/对象失败 LookupError 无效数据查询的基类 IndexError 序列中没有此索引(index) KeyError 映射中没有这个键 MemoryError 内存溢出错误(对于Python 解释器不是致命的) NameError 未声明/初始化对象 (没有属性) UnboundLocalError 访问未初始化的本地变量 ReferenceError 弱引用(Weak reference)试图访问已经垃圾回收了的对象 RuntimeError 一般的运行时错误 NotImplementedError 尚未实现的方法 SyntaxError Python 语法错误 IndentationError 缩进错误 TabError Tab 和空格混用 SystemError 一般的解释器系统错误 TypeError 对类型无效的操作 ValueError 传入无效的参数 UnicodeError Unicode 相关的错误 UnicodeDecodeError Unicode 解码时的错误 UnicodeEncodeError Unicode 编码时错误 UnicodeTranslateError Unicode 转换时错误 Warning 警告的基类 DeprecationWarning 关于被弃用的特征的警告 FutureWarning 关于构造将来语义会有改变的警告 OverflowWarning 旧的关于自动提升为长整型(long)的警告 PendingDeprecationWarning 关于特性将会被废弃的警告 RuntimeWarning 可疑的运行时行为(runtime behavior)的警告 SyntaxWarning 可疑的语法的警告 UserWarning 用户代码生成的警告 异常处理语句 try…excpet…finally示例代码 12345678910111213141516171819202122232425262728293031323334353637383940def div(a, b): try: print(a / b) except ZeroDivisionError: print(\"Error: b should not be 0 !!\") except Exception as e: print(\"Unexpected Error: &#123;&#125;\".format(e)) else: print('Run into else only when everything goes well') finally: print('Always run into finally block.')# testsdiv(2, 0)div(2, 'bad type')div(1, 2)# Mutiple exception in one linetry: print(a / b)except (ZeroDivisionError, TypeError) as e: print(e)# Except block is optional when there is finallytry: open(database)finally: close(database)# catch all errors and log ittry: do_work()except: # get detail from logging module logging.exception('Exception caught!') # get detail from sys.exc_info() method error_type, error_value, trace_back = sys.exc_info() print(error_value) raise 总结如下 except语句不是必须的，finally语句也不是必须的，但是二者必须要有一个，否则就没有try的意义了。 except语句可以有多个，Python会按except语句的顺序依次匹配你指定的异常，如果异常已经处理就不会再进入后面的except语句。 except语句可以以元组形式同时指定多个异常，参见实例代码。 except语句后面如果不指定异常类型，则默认捕获所有异常，你可以通过logging或者sys模块获取当前异常。 如果要捕获异常后要重复抛出，请使用raise，后面不要带任何参数或信息。 不建议捕获并抛出同一个异常，请考虑重构你的代码。 不建议在不清楚逻辑的情况下捕获所有异常，有可能你隐藏了很严重的问题。 尽量使用内置的异常处理语句来替换try/except语句，比如with语句，getattr()方法。 抛出异常 raise如果你需要自主抛出异常一个异常，可以使用raise关键字，等同于C#和Java中的throw，其语法规则如下。 1raise NameError(\"bad name!\") raise关键字后面可以指定你要抛出的异常实例，一般来说抛出的异常越详细越好，Python在exceptions模块内建了很多的异常类型，通过使用dir()函数来查看exceptions中的异常类型，如下： 1234import exceptionsprint dir(exceptions)# ['ArithmeticError', 'AssertionError'...] 自定义异常类型Python中自定义自己的异常类型非常简单，只需要要从Exception类继承即可(直接或间接)： 12345class SomeCustomException(Exception): passclass AnotherException(SomeCustomException): pass 一般你在自定义异常类型时，需要考虑的问题应该是这个异常所应用的场景。如果内置异常已经包括了你需要的异常，建议考虑使用内置的异常类型。比如你希望在函数参数错误时抛出一个异常，你可能并不需要定义一个InvalidArgumentError，使用内置的ValueError即可。 经验案例传递异常 re-raise Exception捕捉到了异常，但是又想重新抛出它（传递异常），使用不带参数的raise语句即可： 12345678910def f1(): print(1/0)def f2(): try: f1() except Exception as e: raise # don't raise e !!!f2() 在Python2中，为了保持异常的完整信息，那么你捕获后再次抛出时千万不能在raise后面加上异常对象，否则你的trace信息就会从此处截断。以上是最简单的重新抛出异常的做法，也是推荐的做法。 还有一些技巧可以考虑，比如抛出异常前你希望对异常的信息进行更新。 123456def f2(): try: f1() except Exception as e: e.args += ('more info',) raise Python3对重复传递异常有所改进，你可以自己尝试一下，不过建议还是遵循以上规则。 Exception 和 BaseException当我们要捕获一个通用异常时，应该用Exception还是BaseException？我建议你还是看一下 官方文档说明，这两个异常到底有啥区别呢？ 请看它们之间的继承关系。 12345678BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration... +-- StandardError... +-- Warning... 从Exception的层级结构来看，BaseException是最基础的异常类，Exception继承了它。BaseException除了包含所有的Exception外还包含了SystemExit，KeyboardInterrupt和GeneratorExit三个异常。 由此看来你的程序在捕获所有异常时更应该使用Exception而不是BaseException，因为被排除的三个异常属于更高级别的异常，合理的做法应该是交给Python的解释器处理。 except Exception as e和 except Exception, e代码示例如下： 123456try: do_something()except NameError as e: # should passexcept KeyError, e: # should not pass 在Python2的时代，你可以使用以上两种写法中的任意一种。在Python3中你只能使用第一种写法，第二种写法已经不再支持。第一个种写法可读性更好，而且为了程序的兼容性和后期移植的成本，请你果断抛弃第二种写法。 raise “Exception string”把字符串当成异常抛出看上去是一个非常简洁的办法，但其实是一个非常不好的习惯。 1234if is_work_done(): passelse: raise \"Work is not done!\" # not cool 上面的语句如果抛出异常，那么会是这样的： 1234Traceback (most recent call last): File \"/demo/exception_hanlding.py\", line 48, in &lt;module&gt; raise \"Work is not done!\"TypeError: exceptions must be old-style classes or derived from BaseException, not str 这在 Python2.4 以前是可以接受的做法，但是没有指定异常类型有可能会让下游没办法正确捕获并处理这个异常，从而导致你的程序难以维护。简单说，这种写法是是封建时代的陋习，应该扔了。 使用内置的语法范式代替try/exceptPython 本身提供了很多的语法范式简化了异常的处理，比如for语句就处理了的StopIteration异常，让你很流畅地写出一个循环。 with语句在打开文件后会自动调用finally并关闭文件。我们在写 Python 代码时应该尽量避免在遇到这种情况时还使用try/except/finally的思维来处理。 12345678910# should nottry: f = open(a_file) do_something(f)finally: f.close()# should with open(a_file) as f: do_something(f) 再比如，当我们需要访问一个不确定的属性时，有可能你会写出这样的代码： 12345try: test = Test() name = test.name # not sure if we can get its nameexcept AttributeError: name = 'default' 其实你可以使用更简单的getattr()来达到你的目的。 1name = getattr(test, 'name', 'default') 最佳实践最佳实践不限于编程语言，只是一些规则和填坑后的收获。 只处理你知道的异常，避免捕获所有异常然后吞掉它们。 抛出的异常应该说明原因，有时候你知道异常类型也猜不出所以然。 避免在catch语句块中干一些没意义的事情，捕获异常也是需要成本的。 不要使用异常来控制流程，那样你的程序会无比难懂和难维护。 如果有需要，切记使用finally来释放资源。 如果有需要，请不要忘记在处理异常后做清理工作或者回滚操作。 本文参考资料 官方文档：https://docs.python.org/2.7/library/exceptions.html#bltin-exceptions https://segmentfault.com/a/1190000007736783 http://www.pythondoc.com/pythontutorial3/errors.html http://www.runoob.com/python/python-exceptions.html https://betacat.online/ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"处理","slug":"处理","permalink":"http://blog.deali.cn/tags/%E5%A4%84%E7%90%86/"}]},{"title":"Ubuntu-16-04-安装配置Docker","slug":"3596eb88d75c1fc5aa40135f05cf2d54","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.660Z","comments":true,"path":"posts/f40d46ce9b2cce98.html","link":"","permalink":"http://blog.deali.cn/posts/f40d46ce9b2cce98.html","excerpt":"","text":"安装相关包1234567$ sudo apt-get update # 先更新一下软件源库信息$ sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common 添加软件仓库官方仓库12345678# 添加 Docker 官方的 GPG 密钥（为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥）$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -# 设置稳定版本的apt仓库地址$ sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" 阿里云仓库123456$ curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -$ sudo add-apt-repository \\ \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" 安装docker12$ sudo apt-get update$ sudo apt-get install docker-ce # 安装最新版的docker 如果需要安装指定版本的，使用以下命令： 12345$ apt-cache policy docker-ce # 查看可供安装的所有docker版本$ sudo apt-get install docker-ce=18.03.0~ce-0~ubuntu # 安装指定版本的docker``# 检查docker是否安装成功$ docker --version # 查看安装的docker版本 添加访问权限这个时候运行docker的话，如果不是root用户会报错： 1Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/json: dial unix /var/run/docker.sock: connect: permission denied 看一下权限 123456$ cd /var/run$ ll | grep docker# 输出如下drwx------ 8 root root 180 11月 21 16:36 docker-rw-r--r-- 1 root root 5 11月 21 16:35 docker.pidsrw-rw---- 1 root docker 0 11月 21 16:35 docker.sock 可以看到 docker.sock 的所有者是 docker 这个组。所以我们要把当前用户添加到这个组里。 1$ sudo gpasswd -a $&#123;USER&#125; docker 重启docker 1sudo service docker restart 切换当前会话到新 group 或者重启 X 会话 1newgrp - docker 注意:最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效，所以 docker images 执行时同样有错。 运行docker测试这个时候就可以运行helloworld测试啦～ 12345678910111213141516171819202122$ docker run hello-worldHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 到这里就安装完成了～ 参考资料https://docs.docker.com/get-started/#test-docker-versionhttps://www.jianshu.com/p/a12558da034ehttps://www.jianshu.com/p/95e397570896 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"云计算","slug":"云计算","permalink":"http://blog.deali.cn/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}]},{"title":"编译原理学习一，去除代码中的注释","slug":"c52a59ed361dc1fbee9a290df1dca1ff","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.920Z","comments":true,"path":"posts/13f2702ec6a193cd.html","link":"","permalink":"http://blog.deali.cn/posts/13f2702ec6a193cd.html","excerpt":"","text":"前言开始学习编译原理了耶～关于编译原理的所有练习，按照老规矩，还是用我最喜欢的C#语言来实现，运行在.NetCore平台上～关于这个系列的所有代码已经上传到github了，项目主页： https://github.com/Deali-Axy/CompilerConstructionLearning 本次题目 对C或C++等高级程序设计语言编写的源程序中的//注释和/…/注释进行删除，保留删除后的源程序。要求以文件形式进行保存。 思路分析 程序主要功能就是消除已经编写好的源程序中的注释。在源程序中注释有两种形式，一种是单行注释，用“//”表示，另一种是多行注释，用“/…/”表示。针对这两种形式，程序中用了if..else..语句加以判断，并做出相应的处理。在这里还有可能出现另一种情况，上述两种注释符号可能出现在引号中，出现在引号中的注释符号并没有注释功能，因此在引号中出现的注释符号不应该被消除。所以，这次编写的程序将要分三种情况分析。 第一种情况，单行注释：123456if (ch != temp)&#123; // 这里就是单行注释 ofile.put(ch); ch = ifile.get();&#125; 或者 123456if (ch != temp)&#123; /* 这里就是单行注释 */ ofile.put(ch); ch = ifile.get();&#125; 第二种情况，块注释：1234567if (ifile.fail() || ofile.fail())&#123; cerr &lt;&lt; \"open file fail\\n\"; return EXIT_FAILURE; /*返回值EXIT_FAILURE（在cstdlib库中定义）,用于向操作系统报* 告打开文件失败*/&#125; 第三种情况，行后注释：12345ifile.close(); // 关闭文件ofile.close();cout &lt;&lt; \"/////*////ret/rtr////\";system(\"pause\");return 0; 还有一个关键的注意点可以看到这一行 1cout &lt;&lt; \"/////*////ret/rtr////\"; 这个字符串用双引号包起来的代码中有很多斜杠，所以要避免将这些斜杠识别为注释。这里我用的方法是在处理注释前先把包含注释符号的字符串替换掉，等注释删除之后，再添加回去。 实现代码注释写得很详细啦，配合上面的思路分析，我就不再继续分析代码了～ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465var sReader = new StreamReader(filePath);var newSource = \"\";var inBlock = false;var replaceFlag = false;var tempLine = \"\"; // 用于保存被替换的特殊行代码while (!sReader.EndOfStream)&#123; var line = sReader.ReadLine(); if (line.Length == 0) continue; // 去除空行 var quotationPattern = \"^(.*?)\\\".*//.*\\\"\"; var quotationResult = Regex.Match(line, quotationPattern); if (quotationResult.Success) &#123; System.Console.WriteLine(\"替换特殊代码，双引号中包裹注释斜杠\"); tempLine = quotationResult.Groups[0].Value; replaceFlag = true; line = Regex.Replace(line, quotationPattern, REPLACEMENT); &#125; // 单行注释 if (line.Trim().StartsWith(@\"//\")) continue; if (line.Trim().StartsWith(@\"/*\") &amp;&amp; line.EndsWith(@\"*/\")) continue; // 注释块 if (Regex.Match(line.Trim(), @\"^/\\*\").Success) inBlock = true; if (Regex.Match(line.Trim(), @\"\\*/$\").Success) &#123; inBlock = false; continue; &#125; // 行后注释 // 使用非贪婪模式(.+?)匹配第一个// var pattern = @\"^(.*?)//(.*)\"; // var pattern = @\"[^(.*?)//(.*)]|[^(.*?)/\\*(.*)\\*/]\"; var result = Regex.Match(line, pattern); if (result.Success) &#123; System.Console.WriteLine(\"发现行后注释：&#123;0&#125;\", result.Groups[2]); line = result.Groups[1].Value; &#125; // 还原被替换的代码 if (replaceFlag) &#123; System.Console.WriteLine(\"还原特殊代码\"); line = line.Replace(REPLACEMENT, tempLine); replaceFlag = false; &#125; if (inBlock) continue; newSource += line + Environment.NewLine;&#125;var outputPath = \"output/exp1.src\";System.Console.WriteLine(\"去除注释完成，创建新文件。\");using (var sWriter = new StreamWriter(outputPath))&#123; sWriter.Write(newSource);&#125;System.Console.WriteLine(\"操作完成！文件路径：&#123;0&#125;\", outputPath); 结果测试源文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;iomanip&gt;#include &lt;cstdlib&gt;using namespace std;int main()&#123; cout &lt;&lt; '/'; ifstream ifile; //建立文件流对象 ofstream ofile; ifile.open(\"f:\\\\上机实验题\\\\C++\\\\ConsoleApplication2\\\\ConsoleApplication2\\\\源.cpp\"); //打开F盘根目录下的fileIn.txt文件 ofile.open(\"f:\\\\上机实验题\\\\C++\\\\ConsoleApplication2\\\\ConsoleApplication2\\\\源.obj\"); if (ifile.fail() || ofile.fail()) &#123; //测试打开操作是否成功 cerr &lt;&lt; \"open file fail\\n\"; return EXIT_FAILURE; /*返回值EXIT_FAILURE（在cstdlib库中定义）,用于向操作系统报* 告打开文件失败*/ &#125; char ch; ch = ifile.get(); //进行读写操作 while (!ifile.eof()) &#123; if (ch == 34) &#123; //双引号中若出现“//”，双引号中的字符不消除 char temp = ch; //第一个双引号 ofile.put(ch); ch = ifile.get(); while (!ifile.eof()) &#123; if (ch != temp) &#123; //寻找下一个双引号 ofile.put(ch); ch = ifile.get(); &#125; else &#123; ofile.put(ch); break; &#125; &#125; ch = ifile.get(); continue; //双引号情况结束，重新新一轮判断 &#125; if (ch == 47) &#123; //出现第一个斜杠 char temp2 = ch; ch = ifile.get(); if (ch == 47) &#123; //单行注释情况 ch = ifile.get(); while (!(ch == '\\n')) ch = ifile.get(); &#125; else if (ch == '*') &#123; //多行注释情况 while (1) &#123; ch = ifile.get(); while (!(ch == '*')) ch = ifile.get(); ch = ifile.get(); if (ch == 47) break; &#125; ch = ifile.get(); &#125; else &#123; ofile.put(temp2); //temp2保存第一个斜杠，当上述两种情况都没有时，将此斜杠输出 &#125; //ch = ifile.get(); &#125; //cout &lt;&lt; ch &lt;&lt; endl; ofile.put(ch); //将字符写入文件流对象中 ch = ifile.get(); //从输入文件对象流中读取一个字符 &#125; ifile.close(); //关闭文件 ofile.close(); cout &lt;&lt; \"/////*////ret/rtr////\"; system(\"pause\"); return 0;&#125; 处理后的结果12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;iomanip&gt;#include &lt;cstdlib&gt;using namespace std;int main()&#123; cout &lt;&lt; '/'; ifstream ifile; ofstream ofile; ifile.open(\"f:\\\\上机实验题\\\\C++\\\\ConsoleApplication2\\\\ConsoleApplication2\\\\源.cpp\"); ofile.open(\"f:\\\\上机实验题\\\\C++\\\\ConsoleApplication2\\\\ConsoleApplication2\\\\源.obj\"); if (ifile.fail() || ofile.fail()) &#123; cerr &lt;&lt; \"open file fail\\n\"; return EXIT_FAILURE; &#125; char ch; ch = ifile.get(); while (!ifile.eof()) &#123; if (ch == 34) &#123; char temp = ch; ofile.put(ch); ch = ifile.get(); while (!ifile.eof()) &#123; if (ch != temp) &#123; ofile.put(ch); ch = ifile.get(); &#125; else &#123; ofile.put(ch); break; &#125; &#125; ch = ifile.get(); continue; &#125; if (ch == 47) &#123; char temp2 = ch; ch = ifile.get(); if (ch == 47) &#123; ch = ifile.get(); while (!(ch == '\\n')) ch = ifile.get(); &#125; else if (ch == '*') &#123; while (1) &#123; ch = ifile.get(); while (!(ch == '*')) ch = ifile.get(); ch = ifile.get(); if (ch == 47) break; &#125; ch = ifile.get(); &#125; else &#123; ofile.put(temp2); &#125; &#125; ofile.put(ch); ch = ifile.get(); &#125; ifile.close(); ofile.close(); cout &lt;&lt; \"/////*////ret/rtr////\"; system(\"pause\"); return 0;&#125; 完整代码https://github.com/Deali-Axy/CompilerConstructionLearning/blob/master/code/exp/exp1/Exp1.cs 参考资料： 正则表达式元字符：https://www.runoob.com/regexp/regexp-metachar.html JavaScript去除注释：https://segmentfault.com/a/1190000015611632 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"编程","slug":"编程","permalink":"http://blog.deali.cn/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"编译","slug":"编译","permalink":"http://blog.deali.cn/tags/%E7%BC%96%E8%AF%91/"},{"name":"代码","slug":"代码","permalink":"http://blog.deali.cn/tags/%E4%BB%A3%E7%A0%81/"},{"name":"原理","slug":"原理","permalink":"http://blog.deali.cn/tags/%E5%8E%9F%E7%90%86/"},{"name":"编译原理","slug":"编译原理","permalink":"http://blog.deali.cn/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"name":"去除","slug":"去除","permalink":"http://blog.deali.cn/tags/%E5%8E%BB%E9%99%A4/"},{"name":"注释","slug":"注释","permalink":"http://blog.deali.cn/tags/%E6%B3%A8%E9%87%8A/"}]},{"title":"全文检索引擎原理以及Lucene简单介绍","slug":"c385d29eeb869ded8be4c2a7b4cbdb71","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.920Z","comments":true,"path":"posts/c5a8b36d2c1c67bc.html","link":"","permalink":"http://blog.deali.cn/posts/c5a8b36d2c1c67bc.html","excerpt":"","text":"前言继上次的博客介绍whoosh搜索引擎的，我打算写一个“从零开始编写自己的搜索引擎”系列文章，不过转念一想，我应该先写一篇介绍原理的，然后再开始比较好，于是就有了本文。 我们生活中的数据总体分为两种：结构化数据和非结构化数据。 结构化数据：指具有固定格式或有限长度的数据，如数据库，元数据等。 非结构化数据：指不定长或无固定格式的数据，如邮件，word文档等。 非结构化数据又一种叫法叫全文数据。 按照数据的分类，搜索也分为两种： 对结构化数据的搜索：如对数据库的搜索，用SQL语句。再如对元数据的搜索，如利用windows搜索对文件名，类型，修改时间进行搜索等。 对非结构化数据的搜索：如利用windows的搜索也可以搜索文件内容，Linux下的grep命令，再如用Google和百度可以搜索大量内容数据。 对非结构化数据也即对全文数据的搜索主要有两种方法： 一种是顺序扫描法(Serial Scanning)：所谓顺序扫描，比如要找内容包含某一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。如利用windows的搜索也可以搜索文件内容，只是相当的慢。假如有一个80G硬盘，如果想在上面找到一个内容包含某字符串的文件，可能需要几个小时的时间。Linux下的grep命令也是这一种方式。这是一种比较原始的方法，但对于小数据量的文件，这种方法还是最直接，最方便的。但是对于大量的文件，这种方法的速度就很慢。 另一种是全文检索(Full-text Search)：即先建立索引，再对索引进行搜索。索引是从非结构化数据中提取出之后重新组织的信息。 全文检索引擎的基本实现原理下面这幅图来自《Lucene in action》，但却不仅仅描述了Lucene以及全文检索引擎的一般过程。 全文检索大体分两个过程，索引创建(Indexing)和搜索索引(Search)。 索引创建：将现实世界中所有的结构化和非结构化数据提取信息，创建索引的过程。 搜索索引：就是得到用户的查询请求，搜索创建的索引，然后返回结果的过程。 索引创建全文检索的索引创建过程一般有以下几步： 第一步：一些要索引的原文档(Document)。为了方便说明索引创建过程，这里特意用两个文件为例： 文件一：Students should be allowed to go out with their friends, but not allowed to drink beer. 文件二：My friend Jerry went to school to see his students but found them drunk which is not allowed. 第二步：将原文档传给分次组件(Tokenizer)。分词组件(Tokenizer)会做以下几件事情(此过程称为Tokenize)： 将文档分成一个一个单独的单词。 去除标点符号。 去除停词(Stop word)。 所谓停词(Stop word)就是一种语言中最普通的一些单词，由于没有特别的意义，因而大多数情况下不能成为搜索的关键词，因而创建索引时，这种词会被去掉而减少索引的大小。 英语中挺词(Stop word)如：“the”,“a”，“this”等。 对于每一种语言的分词组件(Tokenizer)，都有一个停词(stop word)集合。 经过分词(Tokenizer)后得到的结果称为词元(Token)。 在我们的例子中，便得到以下词元(Token)： “Students”，“allowed”，“go”，“their”，“friends”，“allowed”，“drink”，“beer”，“My”，“friend”，“Jerry”，“went”，“school”，“see”，“his”，“students”，“found”，“them”，“drunk”，“allowed”。 第三步：将得到的词元(Token)传给语言处理组件(Linguistic Processor)。语言处理组件(linguistic processor)主要是对得到的词元(Token)做一些同语言相关的处理。 对于英语，语言处理组件(Linguistic Processor)一般做以下几点： 变为小写(Lowercase)。 将单词缩减为词根形式，如”cars”到”car”等。这种操作称为：stemming。 将单词转变为词根形式，如”drove”到”drive”等。这种操作称为：lemmatization。 Stemming 和 lemmatization的异同： 相同之处：Stemming和lemmatization都要使词汇成为词根形式。 两者的方式不同： Stemming采用的是“缩减”的方式：“cars”到“car”，“driving”到“drive”。 Lemmatization采用的是“转变”的方式：“drove”到“drove”，“driving”到“drive”。 两者的算法不同： Stemming主要是采取某种固定的算法来做这种缩减，如去除“s”，去除“ing”加“e”，将“ational”变为“ate”，将“tional”变为“tion”。 Lemmatization主要是采用保存某种字典的方式做这种转变。比如字典中有“driving”到“drive”，“drove”到“drive”，“am, is, are”到“be”的映射，做转变时，只要查字典就可以了。 Stemming和lemmatization不是互斥关系，是有交集的，有的词利用这两种方式都能达到相同的转换。 语言处理组件(linguistic processor)的结果称为词(Term)。 在我们的例子中，经过语言处理，得到的词(Term)如下： “student”，“allow”，“go”，“their”，“friend”，“allow”，“drink”，“beer”，“my”，“friend”，“jerry”，“go”，“school”，“see”，“his”，“student”，“find”，“them”，“drink”，“allow”。 也正是因为有语言处理的步骤，才能使搜索drove，而drive也能被搜索出来。 查询索引当用户输入关键词进行查找的时候，搜索引擎在索引中寻找匹配的索引，并通过索引找到原文档，这就是查询索引的过程，但是这还没完，你以为找到原文档就完事了吗？nope，如果仅仅只有一个或十个文档包含我们查询的字符串，我们的确找到了。然而如果结果有一千个，甚至成千上万个呢？那个才你最想要的文件呢？ 这时候就需要根据评分算法计算出每个结果的权重，排序后再给用户展示了~ 查询索引一般会经过一下四个步骤： 用户输入查询语句 对查询语句进行词法分析（识别单词和关键字），语法分析（根据查询语句的语法规则来形成一棵语法树），及语言处理（原始语言的进一步加工） 搜索索引，得到符合语法树的文档 根据得到的文档和查询语句的相关性，对结果进行排序 判断词(Term)之间的关系从而得到文档相关性的过程应用一种叫做向量空间模型的算法(Vector Space Model)** 下面仔细分析一下这两个过程： 1. 计算权重(Term weight)的过程。影响一个词(Term)在一篇文档中的重要性主要有两个因素： Term Frequency (tf)：即此Term在此文档中出现了多少次。tf 越大说明越重要。 Document Frequency (df)：即有多少文档包含此Term。df 越大说明越不重要。 容易理解吗？词(Term)在文档中出现的次数越多，说明此词(Term)对该文档越重要，如“搜索”这个词，在本文档中出现的次数很多，说明本文档主要就是讲这方面的事的。然而在一篇英语文档中，this出现的次数更多，就说明越重要吗？不是的，这是由第二个因素进行调整，第二个因素说明，有越多的文档包含此词(Term), 说明此词(Term)太普通，不足以区分这些文档，因而重要性越低。 这也如我们程序员所学的技术，对于程序员本身来说，这项技术掌握越深越好（掌握越深说明花时间看的越多，tf越大），找工作时越有竞争力。然而对于所有程序员来说，这项技术懂得的人越少越好（懂得的人少df小），找工作越有竞争力。人的价值在于不可替代性就是这个道理。 道理明白了，我们来看看公式： 这仅仅只term weight计算公式的简单典型实现，不同的全文检索系统的会有不同的实现，Lucene就与此稍有不同。 2. 判断Term之间的关系从而得到文档相关性的过程，也即向量空间模型的算法(VSM)。我们把文档看作一系列词(Term)，每一个词(Term)都有一个权重(Term weight)，不同的词(Term)根据自己在文档中的权重来影响文档相关性的打分计算。 于是我们把所有此文档中词(term)的权重(term weight) 看作一个向量。 Document = {term1, term2, …… ,term N} Document Vector = {weight1, weight2, …… ,weight N} 同样我们把查询语句看作一个简单的文档，也用向量来表示。 Query = {term1, term 2, …… , term N} Query Vector = {weight1, weight2, …… , weight N} 我们把所有搜索出的文档向量及查询向量放到一个N维空间中，每个词(term)是一维。如图： 我们认为两个向量之间的夹角越小，相关性越大。 所以我们计算夹角的余弦值作为相关性的打分，夹角越小，余弦值越大，打分越高，相关性越大。 有人可能会问，查询语句一般是很短的，包含的词(Term)是很少的，因而查询向量的维数很小，而文档很长，包含词(Term)很多，文档向量维数很大。你的图中两者维数怎么都是N呢？ 在这里，既然要放到相同的向量空间，自然维数是相同的，不同时，取二者的并集，如果不含某个词(Term)时，则权重(Term Weight)为0。 相关性打分公式如下： 举个例子，查询语句有11个Term，共有三篇文档搜索出来。其中各自的权重(Term weight)，如下表格。 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 D1 0 0 .477 0 .477 .176 0 0 0 .176 0 D2 0 .176 0 .477 0 0 0 0 .954 0 .176 D3 0 .176 0 0 0 .176 0 0 0 .176 .176 Q 0 0 0 0 0 .176 0 0 .477 0 .176 于是计算，三篇文档同查询语句的相关性打分分别为： 于是文档二相关性最高，先返回，其次是文档一，最后是文档三。 到此为止，我们可以找到我们最想要的文档了。 Lucene简单介绍索引创建和搜索过程 索引过程：1) 有一系列被索引文件2) 被索引文件经过语法分析和语言处理形成一系列词(Term)。3) 经过索引创建形成词典和反向索引表。4) 通过索引存储将索引写入硬盘。 搜索过程：a) 用户输入查询语句。b) 对查询语句经过语法分析和语言分析得到一系列词(Term)。c) 通过语法分析得到一个查询树。d) 通过索引存储将索引读入到内存。e) 利用查询树搜索索引，从而得到每个词(Term)的文档链表，对文档链表进行交，差，并得到结果文档。f) 将搜索到的结果文档对查询的相关性进行排序。g) 返回查询结果给用户。 建立索引为了对文档进行索引，Lucene 提供了五个基础的类，他们分别是 Document, Field, IndexWriter, Analyzer, Directory。下面我们分别介绍一下这五个类的用途： Document Document 是用来描述文档的，这里的文档可以指一个 HTML 页面，一封电子邮件，或者是一个文本文件。一个 Document 对象由多个 Field 对象组成的。可以把一个 Document 对象想象成数据库中的一个记录，而每个 Field 对象就是记录的一个字段。 Field Field 对象是用来描述一个文档的某个属性的，比如一封电子邮件的标题和内容可以用两个 Field 对象分别描述。 Analyzer 在一个文档被索引之前，首先需要对文档内容进行分词处理，这部分工作就是由 Analyzer 来做的。Analyzer 类是一个抽象类，它有多个实现。针对不同的语言和应用需要选择适合的 Analyzer。Analyzer 把分词后的内容交给 IndexWriter 来建立索引。 IndexWriter IndexWriter 是 Lucene 用来创建索引的一个核心的类，他的作用是把一个个的 Document 对象加到索引中来。 Directory 这个类代表了 Lucene 的索引的存储的位置，这是一个抽象类，它目前有两个实现，第一个是 FSDirectory，它表示一个存储在文件系统中的索引的位置。第二个是 RAMDirectory，它表示一个存储在内存当中的索引的位置。 搜索文档利用 Lucene 进行搜索就像建立索引一样也是非常方便的。在上面一部分中，我们已经为一个目录下的文本文档建立好了索引，现在我们就要在这个索引上进行搜索以找到包含某个关键词或短语的文档。Lucene 提供了几个基础的类来完成这个过程，它们分别是呢 IndexSearcher, Term, Query, TermQuery, Hits. 下面我们分别介绍这几个类的功能。 Query 这是一个抽象类，他有多个实现，比如 TermQuery, BooleanQuery, PrefixQuery. 这个类的目的是把用户输入的查询字符串封装成 Lucene 能够识别的 Query。 Term Term 是搜索的基本单位，一个 Term 对象有两个 String 类型的域组成。生成一个 Term 对象可以有如下一条语句来完成：Term term = new Term(“fieldName”,”queryWord”); 其中第一个参数代表了要在文档的哪一个 Field 上进行查找，第二个参数代表了要查询的关键词。 TermQuery TermQuery 是抽象类 Query 的一个子类，它同时也是 Lucene 支持的最为基本的一个查询类。生成一个 TermQuery 对象由如下语句完成： TermQuery termQuery = new TermQuery(new Term(“fieldName”,”queryWord”)); 它的构造函数只接受一个参数，那就是一个 Term 对象。 IndexSearcher IndexSearcher 是用来在建立好的索引上进行搜索的。它只能以只读的方式打开一个索引，所以可以有多个 IndexSearcher 的实例在一个索引上进行操作。 Hits Hits 是用来保存搜索的结果的。 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://blog.deali.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}],"tags":[{"name":"介绍","slug":"介绍","permalink":"http://blog.deali.cn/tags/%E4%BB%8B%E7%BB%8D/"},{"name":"全文检索","slug":"全文检索","permalink":"http://blog.deali.cn/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"},{"name":"引擎","slug":"引擎","permalink":"http://blog.deali.cn/tags/%E5%BC%95%E6%93%8E/"},{"name":"原理","slug":"原理","permalink":"http://blog.deali.cn/tags/%E5%8E%9F%E7%90%86/"}]},{"title":"《Go-Web编程》入手","slug":"3ba99b7e0159ae9fd2e81044be767099","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.664Z","comments":true,"path":"posts/f3daabc45e71cd7a.html","link":"","permalink":"http://blog.deali.cn/posts/f3daabc45e71cd7a.html","excerpt":"","text":"前言最近一直发Linux相关的推文，想必大家都有些审美疲劳了，所以今天推不一样的呐。这本书也是五一假期当当网打折的时候买的啦，当时买了好多书，没办法一次一次写介绍，所以慢慢发啦，因为我不可能一次性看这么多的书（其实很多逗还没拆封呢。 内容简介本书全面介绍使用Go语言开发Web应用所需的全部基本概念，并详细讲解如何运用现代设计原则使用Go语言构建Web应用。本书通过大量的实例介绍核心概念（如处理请求和发送响应、模板引擎和数据持久化），并深入讨论更多高级主题（如并发、Web应用程序测试以及部署到标准系统服务器和PaaS提供商）。本书以一个网络论坛为例，讲解如何使用请求处理器、多路复用器、模板引擎、存储系统等核心组件构建一个Go Web应用，然后在这一应用的基础上，构建出相应的Web服务。值得一提的是，本书在介绍Go Web开发方法时，基本上只用到Go语言自带的标准库，而不会用到任何特定的Web框架，读者学到的知识将不会局限于特定的框架，即使将来需要用到现成的框架或者自行构建框架，仍然会从本书中获益。本书除了讲解具体的Web开发方法，还介绍如何对Go Web应用进行测试，如何使用Go的并发特性提高Web应用的性能，以及如何在Heroku、Google App Engine、Digital Ocean等云平台上部署Go Web应用；此外，书中还传授一些Go Web开发方面的经验和提示。这些重要的实践知识将帮助读者快速成为真正具有生产力的Go Web开发者。阅读本书需要读者具备基本的Go语言编程技能并掌握Go语言的语法。本书适合所有想用Go语言进行Web开发的读者阅读，无论是Web开发的初学者还是入行已久的开发者都会在阅读本书的过程中有所收获。 作者简介Sau Sheong Chang 既是新加坡能源有限公司的数字技术总裁，也是Ruby 社区以及Go社区的活跃贡献者，著有《Go Web编程》《R和Ruby数据分析之旅》等4 部著作。 译者简介黄健宏（huangz），一位1990年出生的计算机技术图书作译者，《Redis设计与实现》一书的作者，《Redis实战》一书的译者。除了已出版的两本作品之外，他还创作和翻译了《Go标准库中文文档》《Redis命令参考》《SICP解题集》等一系列开源文档。要了解关于黄健宏的更多信息，请访问他的个人主页http://huangz.me。 图片 我自己拍的照片 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"书单","slug":"书单","permalink":"http://blog.deali.cn/categories/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"Web技术","slug":"Web技术","permalink":"http://blog.deali.cn/tags/Web%E6%8A%80%E6%9C%AF/"},{"name":"Go","slug":"Go","permalink":"http://blog.deali.cn/tags/Go/"},{"name":"编程","slug":"编程","permalink":"http://blog.deali.cn/tags/%E7%BC%96%E7%A8%8B/"},{"name":"入手","slug":"入手","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E6%89%8B/"}]},{"title":"我也入坑折腾黑苹果，还成功了～","slug":"7fe08200a14b2210db4955500eedd9d6","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.816Z","comments":true,"path":"posts/ed236f82807f536e.html","link":"","permalink":"http://blog.deali.cn/posts/ed236f82807f536e.html","excerpt":"","text":"前言Windows真的太难做开发了啊。。。Linux本来是最好的选择，然而又缺少太多软件，像微信、QQ这些就是想都不要想腾讯会给你开发的，用wine版本的又卡，用网页版又不能发表情包= = 所以很难受，也没有多少选择了，只剩下一个mac可以选，但是苹果电脑又贵性价比又低，怎么可能买mac呢，于是只能黑苹果啦～～ 先放一张桌面的截图吧，免得后面字太多没人想看。 其实在以前我就了解到有黑苹果这种东西了，以我这种喜欢尝鲜和折腾的性格，应该早就开始了，但是我看了一下论坛里别人的各类教程，总觉得太复杂了，加之我现在有挺多事要做的，所以就觉得单纯折腾黑苹果也太浪费时间了吧，时间宝贵啊 = = 于是一直没有安排黑苹果 直到最近，我的华硕游戏本主板坏掉，拿去修好了，现在有三台电脑，于是寻思着给它装个黑苹果试试水，最开始想到的是找淘宝商家给我安一个，但是不去试还行，试了一下，淘宝水真的太深了，首先我不能说淘宝没有靠谱的黑苹果商家，但是就我两次淘宝黑苹果的经验，销量排得很前的那几个天猫商家，都是超级坑的，好评全是刷出来的（人工成本低就是好），说说这些商家坑的地方： 首先，他们安装黑苹果的办法是让你下载一个做好的恢复镜像，\b然后用Paragon Disk这个软件把他之前打包好的系统恢复到你的硬盘上，让我服气的是这个镜像为了怕被你偷了还加了密码。。这种方式和十年前电脑城装盗版Windows的ghost差不多，感觉对硬盘会有损害，而且不是纯净版系统你也不知道里面捆绑了什么东西 然后，我们先不要说这些商家所谓的“技术员”是不是会技术的，但是他们真的很不负责任，直接把这个万能的镜像给你刷到硬盘上之后就你能开机进入系统就行了，也不管你的其他硬件能不能驱动，像我这台，商家给我刷了镜像之后能开机，然后不能Wi-Fi，也没声音，商家就直接说让我插网线，还说声音无解。。。态度还挺差的，我想退款还不让，我说要给差评之后连续打了几个电话来骚扰我，我是真的服气的。。 反正就是这样吧，白苹果又不想买（太贵），淘宝服务又坑，就只好自己折腾了，抱着计算机相关的事没有我搞不定的信念，开始～ 基础知识准备苹果好像是没限制mac系统装在什么硬件上的，但是mac产品线很单一，所以mac系统支持的硬件也就很有限，所以黑苹果才会比较挑硬件～ 现在主流的方案都是使用Clover来模拟mac主板，从而引导mac系统，也就是说你把clover装到EFI分区，然后再把mac系统装到一个足够空间到分区，就可以引导了，不过单纯这样还是不够到，因为还需要驱动其他硬件啊。。 黑苹果的驱动都放在clover的kexts文件夹里面，所以我们装黑苹果最重要的步骤就是选择适合你电脑硬件的kext文件组合，选对了就能使用mac了。 一般套路都是，禁用独显，（你问我那你买了1060ti显卡不是亏了，没错，血亏），然后适配核显、\bWi-Fi、蓝牙、声卡这些硬件，问题都不大的，直接Google搜索对应的硬件型号+kext/mac/hack，这些关键词就能找到对应的kext文件。（如果确实找不到就认栽吧，能换的就换，不能换的就放弃黑苹果咯） 黑苹果的话我就默认你已经有Windows系统了，（废话，有mac还黑什么），首先要有系统镜像，然后有一个U盘，要制作引导盘～ 然后就慢慢调kext 话不多说，开始步骤 制作启动盘首先准备一个8G以上的U盘～ 去下载原版系统镜像，我装的是10.14.6的，\b可以去这里下载：https://blog.daliansky.net/macOS-Mojave-10.14.6-18G84-Release-version-with-Clover-5027-original-image.html#more 对了，用etcher这个工具制作安装盘～ 这样就可以开始了 进入系统安装制作好了启动盘之后，重启进入mac系统安装，如果这都进不去就先找一下你这个机型的clover文件，先在Windows下挂载U盘的EFI分区，（推荐用系统自带的diskpart命令），也可以用磁盘精灵这类的。 diskpart挂载EFI分区其实很简单，大致如下： 123456diskpartlist disk # 显示出所有磁盘sel disk 2 # 选择你的U盘，具体几号自己看list part # 显示所有分区sel part 1 # 一般EFI分区都是第一个assign letter=k # 分配一个盘符，具体多少自己定 然后Windows可能还有很坑的地方，就是分配盘符之后，却打不开这个盘，说什么没有权限。。我服这个时候可以使用管理员权限打开powershell，输入notepad，点打开，里面不是有个文件浏览对话框吗，在这里面操作就行了，反正差不多吧，是麻烦了一点，没办法，Windows真垃圾。 然后准备一个空的分区，进入mac安装界面之后，选择磁盘工具 把那个空的分区抹掉，选择mac扩展或者APFS格式，都ok吧。 然后就安装到这个分区上面。 然后经历各种磨难，安装好了Mac系统了，这个时候重启，不要拔出来U盘，因为你还没有把Clover安装到电脑到EFI分区，拔了U盘就重启不了。 重启继续进入mac系统，进一步的安装和设置系统。 进入系统的配置如果能重启进入系统，证明之前的配置什么的都ok，所以可以把U盘上的clover复制到本机的EFI分区上了，方法在上面有大概介绍过，同样在Windows下操作即可。 mac上需要两个工具，kext utility和clover configurator，请自行下载。 在mac上挂载EFI分区用到这个 clover configurator ，如图 然后kext utility的作用是修复/S/L/E (/System/Library/Extensions)里面的kext文件的权限，而且也可以方便你往这个文件夹里面添加kext文件。一打开就会自动设置/S/L/E里面的权限，我就不截图了。 成果放几张截图吧，好像也没什么= =，界面比较死板，终端不如Linux，文件管理不如Windows，但是好歹是unix系的，好处是做开发比Windows好，软件比Linux多，取个折中吧～ 未完善的地方： 触摸板不能用 蓝牙信号好像比较弱 = = 有相同型号机器的小伙伴可以和我交流啊～ 后记总之就是按照自己电脑的各类硬件型号来配置吧，确实是挺浪费时间的，但是为了用上夹在Windows和Linux中间的并且适合做开发的Mac，花点时间还是值得的吧。 由于我刚刚开始接触黑苹果，也没那么多时间去了解各类原理，文中内容难免有错误的地方，我也就不求甚解了，反正现在基本完美使用，能用就行，不过多在这上面浪费时间。 我的电脑配置： 没有百度网盘啥的，现在要分享文件也不知道怎么弄，所以就懒得折腾了，需要Clover配置的可以在公众号留言索取～ 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"折腾","slug":"折腾","permalink":"http://blog.deali.cn/tags/%E6%8A%98%E8%85%BE/"},{"name":"苹果","slug":"苹果","permalink":"http://blog.deali.cn/tags/%E8%8B%B9%E6%9E%9C/"}]},{"title":"抓住九月小尾巴的小总结，祖国生日快乐~","slug":"7d7daa7cb293c12cda830aafc1401822","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.808Z","comments":true,"path":"posts/c1f49877b864bdb7.html","link":"","permalink":"http://blog.deali.cn/posts/c1f49877b864bdb7.html","excerpt":"","text":"为期一个月的实训到27号就结束了，我估摸着这夏天也快结束了，到处是秋天的味道。 这个月在广州还是以学习为主，在培训班能学到的很有限，不过我自己倒是折腾了不少东西出来，感觉还蛮好的。 技术学习方面培训班也不能说没用吧，至少是前端扫盲了，在此基础上我自己又看了一下书，学了布局、动画和一点点js啊，js其实真的挺好用的，收回我之前的成见~（少见多怪） 还用js做了几个好玩的东西，比如说斗鱼、B站刷弹幕啦，网易云下载破解什么的，我贴一下斗鱼刷弹幕的js代码，仅供学习（我已经被封号了~） 1234setInterval(() =&gt; &#123; document.querySelector('.ChatSend-txt').value = document.querySelector('#js-barrage-list').lastChild.getElementsByClassName('Barrage-content')[0].innerText; document.querySelector('.ChatSend-button').click();&#125;, 500); 然后js的话，我还学了一下下node.js和electron，nodejs不错，electron可以跨平台写软件，本来正中我怀，但是感觉调试挺麻烦的，而且我js技术太菜，后面有别的事做就没有继续深入了。 然后Linux运维课我请假了没学到，后面Java课就是SpringBoot入门了，用来快速开发网站后台还是很方便的，不过Spring本身的硬伤还是在，ORM不好用、语言比较死板、开发耗时这类问题还是在，在国内这种大环境下说Java的不好真的很容易被喷，不过我还是想说C#牛逼、Python万岁、Go默秒全（逃 除开语言和框架本身的限制，最后两周的Java老师还是讲得不错的，从JavaEE开发、基本的设计模式、前端用vue.js实现数据双向绑定，都有涉及，还讲了一点使用Docker部署的。就上课教的内容而言，已经比学校JSP课一个学期都有用了= =，不是我有意贬低学校的教学，其实是学校在应用技术方面真的落后于实际需求太多了，这是不可抗力的因素，也不能怪老师，不过学校在基础知识方面还是杠杠的。 下图为后两周的学习内容。 嗯看起来还可以吧 哈哈~ 除开培训班学的这些，我自己鼓捣了好多新的东西，比如Go语言，不得不说这部署也太方便了，解决了后台开发的痛点啊，只不过语言功能上还比较弱，不是很懂他的设计理念，不过好用就行了。（BeeGo框架很不错，越来越多的国产框架出现在IT界，nice） 然后就是.Net Core，这平台发展势头很猛啊，GitHub上一堆项目，从桌面开发、web开发、移动开发、游戏开发到机器学习、区块链、云计算什么鬼的，全包了，现在登上各类社区，还是一堆javer在唱衰，不过我总感觉这平台的发展势头不可遏，总有一天会干掉很多现在热门的技术的~ 之前我用过了.Net Core的桌面开发，最近折腾了一下Web开发和游戏开发，一个字：爽。不过unity的话，感觉最近网络好差，那些包要导入经常失败，看来我这个matebook不适合开发游戏，只能写写前端了唉。 在GitHub上找了一个.Net Core写的博客系统，惊艳到了，感觉这设计的和WordPress有得一拼啊，截个图，甚至有点想我博客就用这个系统就好了，之前设计的页面做成一个Angular主题就好了~ 博客主页： 控制台： 其实Django的博客系统我也找了一个，也很不错，不过就是感觉python性能总比不上C#？所以还是这个好，而且还能换主题，哈哈哈。 技术方面的，最后贴一下我重新设计的博客主页~ 用了Metro设计，没有加载出磁贴来的时候是这样子的，每个磁贴都是会翻转的，翻转的时间各不相同，翻转后的内容也会实时更新： 加载了磁贴图片的截图我没法放出来，因为现在网络很差，我真加载不出来，等博客上线的时候再水一篇好了~ 学习感想临近毕业，每天看着周围同学抓紧时间在看面试题，讨论各种面试经验和心得的时候，发觉我现在可以把编程纯粹地当成一种兴趣是多么幸福~ 再好玩的东西当其成为工作的任务，变成生存的压力的时候，都会索然无味……但是面对现实，我们别无选择。 每天晚上我一般会在教室写代码或者看书到十一点多回宿舍，教室也会有很多同学在做各种事，有一瞬间有点读高三晚自习的感觉哈哈…虽然这晚自习也太轻松了… 我上面只说了学到的东西，没有提到培训班具体的体验，可能会误导有些同学去报，不过同宿舍有一位学校的师兄，就是实打实交了钱来上培训班的，他几乎每天都在吐槽这几万块打了水漂了，反正多少吐槽的话总结起来就是不要报培训班，更不要来我们现在这个，虽然有些个人情绪在里面，但是大部分根据我的实际体验，是中肯的，从对学生的态度到具体的服务，培训班真的是不值得花费金钱和时间。 说得详细一点吧，俗话说“十年树木，百年树人”，虽然到了这个年纪，来培训班学习，学生和老师之间更多的是交易关系，不是传统的师生关系了，但是作为培训班的老师（上课的也好，跟班的“班主任”也好，被人叫一声老师就算是老师，其实我们的上课老师还好啦），至少的师德还是得有吧，这点我们学校的老师和这些培训班所谓的“班主任”比起来，不夸张的说，可以甩他们几十条街了。 反正是对学生的态度挺差的，（也可能是我们没交钱，不是正式的培训班吧~太真实了），反正发微信一般是不想搭理的，生病请假是不会关心的……反正人情肯定也是不通的了，身体不舒服晚点到直接算旷课，中秋放假前说好了四点下课（后来通知还是要六点才能走），有事五点多先走了也算旷课……朋友千里迢迢过来广州看我，请假半小时去接人，曰：“让他等着”…… 这些事情对想要来培训班学习技术的人来说不是什么大事，但是却着实令人心寒，一个没有人文关怀的地方讲什么培养出好学生？ 生活感谢~ 首先表白我最最可爱的女朋友，时不时给我的爱心外卖小惊喜，还有中秋节偷偷买票来广州看我的大大大惊喜！真的好感动~ 感冒过后，俺爸妈就给我寄来茶叶和泡茶壶，潮汕人到哪这喝茶的传统不能丢hh…关键这茶壶上还印着我最爱的春江花月夜，偶然发现的时候开心了一下午+一晚上~ 在我生病时到宿舍来看我的整天撒狗粮的sbwc~ 从深圳来找我玩并且坑我吃了一顿点都德的涵老板~ 感谢所有可爱的人儿~ 前几天晚上吃了一个小小小瓜，团队的小瓜，不得不感叹现在的某些女生，实在太随便了……可能我老了，跟不上年轻人的节奏了……只能说，在很多人私生活混乱的今天，没有一个举着西方那套高喊x自由的人是无辜的……（仅个人观点，不喜勿喷，人以类聚，物以群分，权力和义务是一致的，自我放纵的人凭啥找个守身如玉的接盘？反对我的观点只能说明没有缘分…） 28号凌晨iPadOS就更新了，屁颠屁颠等到一点多更新，一大早起来体验新系统的“生产力”，结果发现……依然爱奇艺……不过很多细节的地方优化的还可以，就是感觉bug有点多？有些app经常卡住，然后就是最近一段时间用iPad的频率提高了很多，也导入了很多本新书，进行…收藏？ 说到看书的，由于之前从同学那里赚了太多PDF了（大概300G+），这么多书手动整理真的顶不住，于是写了一个python脚本自动整理，直接匹配文件名，去掉重复和没下载完的文件，简单粗暴，整理完剩下一百多G，看了一下，书的质量还不错，都是一些新书~ 这些是之前收藏的，还没有用工具整理~ 最近也新关注了几个DotNet相关的公众号，发现了好多骚操作，感觉以后完全可以用C#代替python来写一些简单的脚本，比如爬虫啊，文件整理，简单数据分析什么的，性能还甩python十条街…… 娱乐在这里最多的娱乐方式就是吃饭的时候看看视频吧，从一开始看油管和B站讲电影，到后来吃饭的时候看看剧，（主要是有了腾讯视频的VIP），哈哈… 后面两周比较闲，很多同学课余时间都玩了起来，我也不例外看了一下电影和剧，电影的话看了星爷的逃学威龙，超级搞笑，张敏女神好好看，星爷的电影还是一贯的幽默搞笑~ 接着看了甄子丹刘德华主演的追龙，其实去年舍友在看的时候就挺想看了，一直没时间~里面大量的潮汕话对白，讲了香港一代毒枭，不对，应该是用了两个小时的时间，讲了一个时代的故事~ 有一天在知乎看到一个问题，说关于天价礼金的，然后有个回答贴了一个电视剧的片段，为了50w礼金，男主带着和女二溜了，然后就被这50w骗着看完了这部剧……剧情什么的凑合看着还行吧，结婚这段有点真实了，不过结局真的有点太玛丽苏了，所有人都洗白了，真正的是“风光大嫁”了~没错，剧名就是风光大嫁。 然后我已经不打算看剧了，现在这些电视剧的套路千篇一律，偶尔看一两部就当自己傻逼了，但是吃饭的时候看什么好呢……偶然发现腾讯上很多国产动漫，抱着试一试的心态看了一下，选了一部我比较喜欢的科幻题材看起来，emmm，有点香… 看来国漫要崛起了… 现在看到第二部了，第一部是《末世觉醒之入侵》，讲末日打丧尸的，同时还要游离部落、政府、AI控制区几大势力，第二部是企鹅官方出的《绝命响应》，讲AI失控的，挺好玩的，建模挺良心，还没看完，有时间就看一点，慢慢看。 还有……发现了一款腾讯和人民日报合作推出的休闲游戏：家国梦，然后就入坑了，然后顺便把周围的同学都拉入坑了，结果现在同学玩得比我好……不过在国庆这个时间点推出，还是挺有意义的，不只是简单的一款游戏吧，应该说是学习新中国现代化发展史、了解祖国风光的好途径了，哈哈哈…… 贴一篇知乎上的简单评测吧： 家国梦游戏体验——老少咸宜的策略碎碎念 - 喵喵一世的文章 - 知乎https://zhuanlan.zhihu.com/p/84595410 不吐不快到这里必须diss一下一些人一些事，不吐不快…… 首先diss一下我们院的某新辅导员（原来的辅导员人超好，可惜这学期调走了），这新换的辅导员，咋说，人没得说，没事的时候和学生谈笑风生，还经常给学生朋友圈点赞评论，就是你有事找他的时候永远不回微信，电话永远不接，开学初我连着一星期给他发了n条信息，就没有一条有回的，一开始我以为他不会用微信，去问了其他老师，得知此人就是这德行，说实话，我是服气的（摊手）…… 还有就是diss学校行政某处的某科长，上班时间永远不在岗，打电话找他还被质问是从何得知他的电话的（我？？？），上班时间服务学生不是你的义务？再说学生去找这些领导的时候哪个学生不是唯唯诺诺，任由他们摆足官架子？惹不起惹不起……然而为了转专业的相关事项，还是不得不和这些官大佬打交道……心累。 关于咱学校的极个别辅导员和领导的劣迹，我和培训班宿舍的一个师兄意见是比较一致的（虽然我觉得他有点儿反社会倾向…） 好了……也没什么了，总是diss别人搞得我好像很多负能量似的，其实熟悉我的人都会觉得我是一个一身正气的三好爱国青年（笑），只不过有些人的嘴脸实在看不惯，忍不住吐槽一下而已~ 前段时间发生在汕头的“扔绿化带逼停”事件还历历在目，当时看了微博热搜之后觉得作为一个汕头人真的很气愤很丢脸…好在后来警方还是及时承认了错误，并且处罚了肇事交警。 再多的话张也不敢说，只能讲，做人做事，细心谨慎一些~ 这个月好多人急着买房，我家也在说这件事，然而我在各个地方看到关于房地产泡沫破裂的各种分析啦，觉得现在还是持币观望比较实在……也不知道有没有错过时代的风口，反正房价高昂，有房住的人不想买，没房住的人自然也买不起只能租房，炒房的人就炒去吧……（说实在的，没房的话真的很难在一个城市立足） Last碎碎念了好多…… 总的来说，挺好的一个月，上课时周围同学交流技术开玩笑的气氛都挺舒服的，培训班的结束意味着离毕业又近了一步，离我期待的生活也近了一步…… 最后的课设，时间比较赶，而且大家都忙着面试，看得出来都做得比较随意，没有以前读书时做课设各展身手的感觉了。 每个人都在努力。 我也要朝着自己的方向加油了~ 要暂时告别代码一段时间~ 最后向祖国母亲表白，我爱你中国，七十岁生日快乐 九月，再见。","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"祖国","slug":"祖国","permalink":"http://blog.deali.cn/tags/%E7%A5%96%E5%9B%BD/"},{"name":"总结","slug":"总结","permalink":"http://blog.deali.cn/tags/%E6%80%BB%E7%BB%93/"},{"name":"抓住","slug":"抓住","permalink":"http://blog.deali.cn/tags/%E6%8A%93%E4%BD%8F/"}]},{"title":"python实现解析markdown文档中的图片，并且保存到本地~","slug":"43972b432ba91c87e4b65c73b88dd37b","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.672Z","comments":true,"path":"posts/866c0e7e26e2eacf.html","link":"","permalink":"http://blog.deali.cn/posts/866c0e7e26e2eacf.html","excerpt":"","text":"背景前阵子简书好像说是凉了，搞得我有点小慌，毕竟我的大部分博客都是放在简书上面的，虽然简书提供了打包导出功能，但是只能导出文字，图片的话还是存在简书服务器上面，再加上我一直想要重新做一个个人博客，于是就有了这篇文章。 思路首先是要解析markdown文档，然后获取到其中的所有图片，再把图片按md文件分好目录保存。 解析markdown文档这里我用了misaka模块，据说是python的markdown解析器里性能最好的，不过这个的文档着实是精简，太少内容了，写得不清不楚的，基本功能看来就是把markdown文档解析为html文档，但是好像没有直接操作markdown元素的方法。 没事，我可以像平时写爬虫那样解析html呀，不就曲线救国拿到图片了吗~这里就用BeautifulSoup啦 下载图片很简单，就是requests，没啥好说的。 实现遍历文件首先要遍历文件夹里面的所有md文档： 123456789101112def get_files_list(dir): \"\"\" 获取一个目录下所有文件列表，包括子目录 :param dir: :return: \"\"\" files_list = [] for root, dirs, files in os.walk(dir, topdown=False): for file in files: files_list.append(os.path.join(root, file)) return files_list 解析md文档 获取所有图片先用misaka把markdown转换成html，然后再拿出所有img。 1234567891011121314def get_pics_list(md_content): \"\"\" 获取一个markdown文档里的所有图片链接 :param md_content: :return: \"\"\" md_render = misaka.Markdown(misaka.HtmlRenderer()) html = md_render(md_content) soup = BeautifulSoup(html, features='html.parser') pics_list = [] for img in soup.find_all('img'): pics_list.append(img.get('src')) return pics_list 下载图片12345678910def download_pics(url, file): img_data = requests.get(url).content filename = os.path.basename(file) dirname = os.path.dirname(file) targer_dir = os.path.join(dirname, f'&#123;filename&#125;.assets') if not os.path.exists(targer_dir): os.mkdir(targer_dir) with open(os.path.join(targer_dir, f'&#123;uuid.uuid4().hex&#125;.jpg'), 'w+') as f: f.buffer.write(img_data) 完整代码本项目的完整代码已经上传到GitHub了，地址如下：https://github.com/Deali-Axy/Markdown-Image-Parser 运行12pip install -r requirements.txtpython spider.py 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"},{"name":"文档","slug":"文档","permalink":"http://blog.deali.cn/tags/%E6%96%87%E6%A1%A3/"},{"name":"解析","slug":"解析","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E6%9E%90/"},{"name":"保存","slug":"保存","permalink":"http://blog.deali.cn/tags/%E4%BF%9D%E5%AD%98/"},{"name":"图片","slug":"图片","permalink":"http://blog.deali.cn/tags/%E5%9B%BE%E7%89%87/"},{"name":"实现","slug":"实现","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E7%8E%B0/"}]},{"title":"linux配置sendmail发邮件服务","slug":"4575e5d83058faf08b0700ba304d8bd4","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.672Z","comments":true,"path":"posts/8132bf8fb9653f79.html","link":"","permalink":"http://blog.deali.cn/posts/8132bf8fb9653f79.html","excerpt":"","text":"前言因为开发需要，搞了个wiki系统，并且用到了邮件订阅，所以研究了一番发送邮件的方法。 安装没什么好说的，先安装必要组件。 123apt install sendmail-binapt install sendmailapt install sendmail-cf #配置工具 配置sendmailsendmail默认是本机用户发送给本机，所以需要修改可以发送到整个Internet：修改sendmail配置宏文件，路径为/etc/mail/sendmail.mc 找到 1DAEMON_OPTIONS('Family=inet, Name=MTA-v4, Port=smtp, Addr=127.0.0.1')dnl 将Addr=127.0.0.1修改为Addr=0.0.0.0，意思是可以连接到任何服务器。 保存修改的文件，下面备份配置文件： 12cd /etc/mailmv sendmail.cf sendmail.cf~ 然后生成新的配置文件： 1m4 sendmail.mc &gt; sendmail.cf 重启sendmail生效 配置域名配置sendmail使用合法的域名分两步，修改sendmail的配置文件和添加域名MX记录。 sendmail可以直接使用 -r account@domain.com 参数来以任意源地址发送邮件，但目前主流的邮箱都会将源地址和反向解析IP进行比较，如果解析不到或是解析的IP不匹配，轻则将邮件直接归为SPAM，严重的就直接拒绝接收。 MX记录（Mail Exchanger Record）主要是接收邮件时使用，即当投递一封新邮件时，会查询收件人域名的MX记录，然后通过MX记录得到的IP地址进行投递。同时邮件厂商在接收邮件的时候也会将源地址和MX记录进行比较，作为垃圾邮件的判断标准之一。 第一步：添加域名(1) 将域名加入到local-host-names文件打开：/etc/mail/local-host-names添加： 1deali.cn (2) 修改submit.cf文件打开：vi /etc/mail/submit.cf，找到行 #Dj$w.Foo.COM，修改为 1Djdeali.cn 注意！一定是Dj+Domain形式！ 至此，sendmail邮件命名配置完毕，重启sendmail使配置生效。 第二步：添加域名MX记录找到修改域名信息的页面（不同的域名注册商页面不相同），修改结果因域名商的不同最迟会在24小时内生效。 (1) 添加域名A记录mail，直接指向你的邮件服务器的静态IP地址： 域名 类型 记录 mail A 127.0.0.1 (2) 添加（或是修改）域名的MX记录，形如： 域名 类型 记录 @ MX deali.cn (3) 使用nslookup检测MX记录是否能正确解析到邮件服务器12345678910nslookup&gt; set q=mx&gt; deali.cnServer: 8.8.8.8Address: 8.8.8.8#53Non-authoritative answer:deali.cn mail exchanger = 5 deali.cn.Authoritative answers can be found from: 发邮件测试输入如下命令：sendmail -t &lt;&lt;EOF 会出现&gt;符号，输入下面格式的内容（每行后面回车）： 12345From:Mail test &lt;test@yourdomain.com&gt;To:xxxx@qq.comSubject:TesttestEOF 参见问题Relaying denied（拒绝投递）出现 550 5.7.1 &lt;xxx@163.com&gt;... Relaying denied. IP name lookup failed [192.168.1.133] 异常时，原因是把sendmail当做邮件中转站，需要将客户端的IP地址加入到access配置文件中。 打开：/etc/mail/access，添加： 1Connect:客户端IP RELAY 重新生成访问权限的数据库： 12cd /etc/mail/makemap hash access.db &lt; access 发出的邮件被其他MTA识别为垃圾设置域名指向（上节链接），添加spf记录 操作教程同时注意控制发信频率 在哪查看sendmail日志?日志位置： /var/log/maillog调整日志级别（详细程度）： 修改配置文件define(confLOG_LEVEL&#39;,16’)dnl默认为9或者调用命令时指定sendmail -O LogLevel=14 日志级别说明 sendmail日志都是什么意思?注意sendmail并不保证发出的邮件一定会被发到收件人接收，所以日志中的信息只是接收端MTA反馈的连接信息。具体格式，慢慢读吧—–sendmail日志格式 sendmail性能参数http://www.5dmail.net/html/2008-4-27/200842733006.htm 一些相关的网站，文章http://www.5dmail.net/sendmail官网邮件发送那点事看邮件头 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"发邮件","slug":"发邮件","permalink":"http://blog.deali.cn/tags/%E5%8F%91%E9%82%AE%E4%BB%B6/"},{"name":"服务","slug":"服务","permalink":"http://blog.deali.cn/tags/%E6%9C%8D%E5%8A%A1/"}]},{"title":"设计模式之代理模式浅析","slug":"48f890c02b1a7b693708c1c32f33372f","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.672Z","comments":true,"path":"posts/e7d55af60328794b.html","link":"","permalink":"http://blog.deali.cn/posts/e7d55af60328794b.html","excerpt":"","text":"代理模式 在客户端与实体之间建立一个代理对象（proxy），客户端对实体进行操作全部委派给代理对象，隐藏实体的具体实现细节。 Proxy还可以与业务代码分离，部署到另外的服务器。业务代码中通过RPC来委派任务。 代理模式与父类和接口的异同 相同点:代理模式的作用和父类以及接口和组合的作用类似,都是为了聚合共用部分,减少公共部分的代码 不同点: 相比起父类,他们的语境不同,父类要表达的含义是 is-a, 而代理要表达的含义更接近于接口, 是 has-a,而且使用代理的话应了一句话”少用继承,多用组合”,要表达的意思其实也就是降低耦合度了 相比起接口,他们实现的功能又不太一样,语境都是has-a,不过接口是has-a-function,而代理对象时是has-a-object,这个object是has-a-function的object,此外,接口是为了说明这个类拥有什么功能,却没有具体实现,实现了多态,而代理对象不但拥有这个功能,还拥有这个功能的具体实现 对于组合来说，他比组合更具灵活性，比如我们将代理对象设为private，那么我可以选择只提供一部分的代理功能，例如Printer的某一个或两个方法，又或者在提供Printer的功能的时候加入一些其他的操作，这些都是可以的 实现代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Printer &#123; //代理对象,一台打印机 public function printSth() &#123; echo 'I can print &lt;br&gt;'; &#125; // some more function below // ...&#125; class TextShop &#123; //这是一个文印处理店,只文印,卖纸,不照相 private $printer; public function __construct(Printer $printer) &#123; $this-&gt;printer = $printer; &#125; public function sellPaper() &#123; //卖纸 echo 'give you some paper &lt;br&gt;'; &#125; public function __call($method, $args) &#123; //将代理对象有的功能交给代理对象处理 if(method_exists($this-&gt;printer, $method)) &#123; $this-&gt;printer-&gt;$method($args); &#125; &#125;&#125; class PhotoShop &#123; //这是一个照相店,只文印,拍照,不卖纸 private $printer; public function __construct(Printer $printer) &#123; $this-&gt;printer = $printer; &#125; public function takePhotos() &#123; //照相 echo 'take photos for you &lt;br&gt;'; &#125; public function __call($method, $args) &#123; //将代理对象有的功能交给代理对象处理 if(method_exists($this-&gt;printer, $method)) &#123; $this-&gt;printer-&gt;$method($args); &#125; &#125;&#125;$printer = new Printer();$textShop = new TextShop($printer);$photoShop = new PhotoShop($printer);$textShop-&gt;printSth();$photoShop-&gt;printSth(); 文印处理店和照相店都具有文印的功能,所以我们可以将文印的功能代理给一台打印机,这里打印机只有一个功能,假如打印机还有n个功能,我们使用__call()方法就能够省去很多重复的代码了 假如是使用继承,这样语境上就不合理,一个店显然不应该继承一台打印机 而使用接口,因为我们的功能实现都是一样,也没有必要去重新实现接口的功能 所以此处使用代理是最佳选择 Java的代理模式Java中的代理模式实现其实类似,只不过Java没有__call()方法,需要手动声明printSth()方法,然后在方法体里去调用$printer的printSth()方法或者可以用InvocationHandler代理接口来实现代理， 12345678910111213141516171819202122232425262728293031323334353637383940public interface InvocationHandler &#123; public Object invoke(Object proxy, Method method, Object[] args) throw Throwable; &#125;//日志代理实现 public class LogHandler implement InvocationHandler&#123; private Object target; public LogHandler(Object target)&#123; this.target = target; &#125; public Object invoke(Object proxy, Method method, Object[] args ) throw Throwable&#123; //记录函数的初始状况参数等信息 log4j.info(“开始:方法”+ method.getName() + “参数”+Arrays.toString(args) ); Object result = method.invoke(target, args); //记录函数的执行状况与返回值 log4j.info(“结束:方法”+ method.getName() + “返回值”+ result ); &#125;&#125;//主函数 public class Main&#123; public static void main(String[ ] args)&#123; //例子中生成报告的功能，生成报告需要记录日志。 ReportGenerator reportGeneratorImpl = new SMSReportGenerator (); //通过系统提供的Proxy.newProxyInstance创建动态代理实例 ReportGenerator reportGenerator = (ReportGenerator ) Proxy.newProxyInstance( reportGeneratorImpl.getClass().getClassLoader(), reportGeneratorImpl.getClass().getInterfaces(), new LogHandler(reportGeneratorImpl) ) ; ... &#125;&#125; 但是 Java Reflection API 实现的动态代理结构十分复杂，不易理解。有接触过Spring框架的朋友应该对Spring的AOP（面向切片编程）有所了解，Spring使用注解的方式来实现代理模式比Java Reflection API方式直观得多了。本文就不再赘述了。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"编程","slug":"编程","permalink":"http://blog.deali.cn/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"产品","slug":"产品","permalink":"http://blog.deali.cn/tags/%E4%BA%A7%E5%93%81/"},{"name":"浅析","slug":"浅析","permalink":"http://blog.deali.cn/tags/%E6%B5%85%E6%9E%90/"},{"name":"设计模式","slug":"设计模式","permalink":"http://blog.deali.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"代理","slug":"代理","permalink":"http://blog.deali.cn/tags/%E4%BB%A3%E7%90%86/"},{"name":"模式","slug":"模式","permalink":"http://blog.deali.cn/tags/%E6%A8%A1%E5%BC%8F/"}]},{"title":"某些软件中无法切换fcitx输入法的问题","slug":"4ba6d149eef40d00d3865d0590112567","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.672Z","comments":true,"path":"posts/ebe0b6aa042ef938.html","link":"","permalink":"http://blog.deali.cn/posts/ebe0b6aa042ef938.html","excerpt":"","text":"gsettings set org.gnome.settings-daemon.plugins.xsettings overrides “{‘Gtk/IMModule’:&lt;’fcitx’&gt;}”","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"输入法","slug":"输入法","permalink":"http://blog.deali.cn/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"切换","slug":"切换","permalink":"http://blog.deali.cn/tags/%E5%88%87%E6%8D%A2/"},{"name":"软件","slug":"软件","permalink":"http://blog.deali.cn/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"无法","slug":"无法","permalink":"http://blog.deali.cn/tags/%E6%97%A0%E6%B3%95/"},{"name":"问题","slug":"问题","permalink":"http://blog.deali.cn/tags/%E9%97%AE%E9%A2%98/"}]},{"title":"最好的Linux发行版：Ubuntu-18-04-深度使用体验","slug":"4d2f814c5beab34e01f7e275a92f1d6c","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.672Z","comments":true,"path":"posts/ea08d4da8d8948e0.html","link":"","permalink":"http://blog.deali.cn/posts/ea08d4da8d8948e0.html","excerpt":"","text":"前言经常看我博客和公众号的同学应该知道，我是狂热的Linuxer，对Linux系统有一种偏执的喜好，所以当你看到这篇文章的时候应该不会觉得奇怪，不过，真正应该疑惑的是，为什么说Ubuntu才是最好的Linux发行版呢？按照我的习惯和风格，不应该是大蜥蜴（OpenSUSE）或是Arch（Manjaro）么？接下来本文将解答这些问题。 Why Ubuntu是大蜥蜴不好看？还是Arch不好用？玩什么兔子（Ubuntu）？先贴出我的桌面： 1. 大蜥蜴很好看，但不是最好 大蜥蜴的开发团队同时也几乎相当于KDE桌面环境的开发团队，而且又有着德国人对于细节的严苛，所以绝对可以算作是最好看的Linux发行版之一。 然而，OpenSUSE稳定版的软件源似乎是旧了点，可直接安装的软件包也不够丰富，而分滚草（滚动更新分支）版本虽然软件包都很新，但是又不够稳定，随时有着滚挂的风险。 2. Arch大法好 早年在百度Linux贴吧，有一股“Arch邪教”势力，他们力图安利每个使用Linux的人加入Arch阵营。不得不说，体验过Arch的人都会被其高度的可定制性，还有宇宙第一丰富的软件包（AUR万岁！）所折服，然后深深爱上Arch这个系统无法自拔。 但是，Arch这种滚动更新的系统，缺点也是显而易见的，详情见上面的大蜥蜴风滚草。不过Arch真的是每个想要学习Linux的人必须体验的系统！ 3. 还是熟悉的兔子——Ubuntu Ubuntu作为（据说）装机量最大的桌面Linux发行版，绝非浪得虚名，这只兔子的背后是商业公司，虽然不像微软苹果这种体量的大公司，但是Ubuntu的细节在各个Linux发行版中做得也是数一数二的了，在18.04版本之前，Ubuntu独创性的Unity桌面环境很和我的口味，可惜由于种种原因，没能把16.04作为长期使用的系统，所以对Unity桌面环境的认识也仅仅停留在短短的几次安装体验中。 作为我长期使用的系统，我可以为Ubuntu总结以下几个优点： 作为Debian系的第一大系统，软件包丰富 作为用户量最大的Linux发行版，有完整和庞大的社区，遇到任何问题都能轻易在社区中得到解答 对国产软件（例如搜狗输入法、WPS套件、网易云音乐）的兼容很完美，Linux上的国产软件在官网发布的版本几乎全都是适用于Ubuntu的，所以兼容性杠杠的 18.04 换成Gnome桌面环境之后性能提升很大，美观度和可定制性提升巨大 其他的，更多的是我对Debian系生态的喜好吧～ 系统截图经过一些简单的配置和美化之后，桌面效果是这样的，我觉得挺ok的～ 全部应用界面，图标用上了Moka，覆盖很全面。 Gnome自带的日历，可以同步谷歌日历和微软日历，非常方便！ Gnome自带的好东西不少，这个TODO List挺不错的，可惜不能和Google Keep同步 软件生态在上面的系统截图里面，就有一些Gnome自带的好用小工具，日常使用Linux的话，软件除了腾讯系的微信和QQ之外，其他一概不缺，其实有了用于开发的Jetbrains全家桶对程序员来说就够了，而且有着Unix完善的工具链，Linux下的开发环境异常舒服。 关于腾讯毒瘤的微信和QQ，我是使用VirtualBox虚拟机运行Windows7解决的，现在的系统性能都足够，开一个Windows7虚拟机对性能的损耗几乎可以忽略不计，截图就不贴了，省的给聊天记录打码麻烦。 Ubuntu是基于Debian开发的发行版，通过apt包管理器你可以安装海量的软件，如果官方源找不到需要的软件包，别忘了还有PPA这个神器，感觉PPA就像是Arch的AUR一样的存在，大量的第三方包都在PPA上发布，可以说几乎没有找不到的软件。 开发体验开发体验的话，各个Linux发行版都是大同小异，Jetbrains全家桶一装，VSCode一配置上去，写代码爽到飞起，更多的体验还是依赖于系统流畅度。经过这段时间的使用体验，Gnome桌面环境的流畅度很好，在我的台式机（i5 8500+8G内存）上完全没有卡顿的问题。 之前还有人担心Ubuntu换成了Gnome之后易用性是否会下降的问题，其实我觉得根本没啥区别，Ubuntu的Gnome开箱即用，根本不需要做什么配置就挺好看的了（嗯，除了壁纸的颜色比较丑）。 Gnome插件我也就安装了一个User Shell theme用来支持Shell Theme而已，其他的一概不安装，插件这东西毕竟是第三方的个人开发者制作的，稳定性和安全性没有保障，默认情况下的Gnome就已经够好看了，没必要再去折腾这些，把系统搞崩溃了就得不偿失了。 Ubuntu or Windows？这个问题被人问了无数遍了，我认为没有纠结的必要，想用Windows的就用Windows，喜欢Linux的人自然会去用Linux，没必要有这种选择题。 小孩子才做选择题。 所以最佳答案就是双系统咯～（还有的人换了Mac系统） Windows作为第一大桌面操作系统，其软件生态无论Linux还是Mac都无法比拟，所以手头上必须有一个Windows系统，然后！最近更新的几个Windows10版本的bug实在是多到我难以忍受的程度了（别跟我扯你没有，你有没有遇到不重要，重要的是我这样强迫症的人绝对受不了Windows10各种奇妙的小bug），想把Windows作为日常开发的系统真的没办法，对Unix工具链的支持极差，安装配置各种开发环境极其麻烦，真的是非常恶心！ 不过偶尔做一下视频啥的，还是得打开Windows。至于游戏方面，我不玩PC游戏（买不起），不存在这个困扰。 总结I love Linux!并且享受Linux带给我的高效生产力。 PS：看到很多人都在评论区要桌面壁纸，这里贴个链接：https://storage.deali.cn/wallpapers_2018-11-21.tar.gz 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Linux评测","slug":"Linux评测","permalink":"http://blog.deali.cn/categories/Linux%E8%AF%84%E6%B5%8B/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"发行版","slug":"发行版","permalink":"http://blog.deali.cn/tags/%E5%8F%91%E8%A1%8C%E7%89%88/"},{"name":"体验","slug":"体验","permalink":"http://blog.deali.cn/tags/%E4%BD%93%E9%AA%8C/"},{"name":"深度","slug":"深度","permalink":"http://blog.deali.cn/tags/%E6%B7%B1%E5%BA%A6/"}]},{"title":"青春的样子，是旧时光里最好的我们。致《你好，旧时光》","slug":"4eb1df623bc971fa1145122a708f98f7","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.696Z","comments":true,"path":"posts/baf856f80ff3e9b5.html","link":"","permalink":"http://blog.deali.cn/posts/baf856f80ff3e9b5.html","excerpt":"","text":"看了《你好，旧时光》，看着别人的18岁，才骤然发现，我好像也不是那么年轻了。前一阵子在朋友圈里很流行晒18岁的照片，其实也都是大家对青春的一种缅怀吧。没经历过的、或是正当18岁的年轻人，估计没有这种体会：有很想要抓住的东西，一转眼却已经停留在昨天。 以往的青春剧，大都讲的是主角们在青春里轰轰烈烈的经历，干了一件又一件的大事，因而觉得这样的青春很遥远，因为富有文学性的剧情，太不真实。这部剧真的挺特别，你或许以为林扬和余周周是主角，最后才发现，没有一个人是主角，每个人都是自己青春的主角。 陈桉教给余周周的“主角游戏”，帮助周周走过最艰难的时光，其实也没有让余周周成为主角，后来她觉得：“其实不当主角也没什么不好，至少不会让自己那么累”。 努力成长给生活起了很大的正反馈作用，无论是林扬还是余周周、蒋川还是凌翔茜，奔奔还是米乔，没有彼此的促进鼓励，他们都不会成为后来的样子。林扬之所以是林扬小太阳，也许源自于5岁初见余周周时的“四皇妃”，凌翔茜之于楚天阔，是小公主，她对蒋川来说，却是全世界最好的独一无二的有点野蛮的女生，无拘无束的凌翔茜也才是真实的她，奔奔之于米乔，是她得病这么多年来，第一次对人世产生留恋的理由。每个人的成长都有自己的无奈与精彩，每个人在青春里都是最好的样子。 剧中，存在所有几乎完美的感情：亲情、友情、师生情、爱情。单亲家庭的周周与妈妈，周周与大舅、大舅妈，还有周周与不能见面的亲生父亲之间的感情。米乔与爸爸，陈桉与爸爸。还有好多好多…….亲情是最无私最无价的情感，庇护着所有脆弱的心灵。友情大概是除了亲情外最珍贵却又很难描述的，友情大概是……大概是林扬犯错，守在他家楼下的蒋川；又或者是为了出走的凌翔茜而放弃保送考试的林扬、蒋川、余周周；是帮助辛锐、徐志强补课的周周和米乔……林扬像一个小太阳，照亮了周周的整个年少时光，也温暖了许多人。蒋川尽其所有为凌翔茜遮风挡雨。奔奔为米乔留下了所有美好的记忆。徐志强对辛锐，是从“欺凌”到“救赎”。……. 其实青春剧出现的目的是什么，是为了让人们回忆起往事，又或者是让没有经历过的人好好珍惜。这部剧很贴近现实，校服、教导主任、班主任、同学间的打闹、与家长的矛盾、懵懂的感情等等。但是又处处太完美了，让人羡慕的同时感到有小小的遗憾。里面随随便的一个同学、朋友，现实中都是很难找到的，余周周是真的大侠，即使世界对她有种种恶意，她却始终报之一笑，还能对始终伤害她的人温柔帮助。最终，整个世界都对她笑了，再怎么恶意，又怎么舍得再伤害这么温柔的人。我们青春的遗憾，大概是发现自己成不了主角，而且也不在别人的未来里，又或者不懂奋斗的意义，后来懵懂的18岁就这样过去了，曾经不可一世的少年也终将慢慢老去，回首过去，遥不可及的都归于平凡，青春的主角甚至不是自己，努力很久的未来还是没有到达……每个人的青春有不同的遗憾，正如彩虹有不同的颜色，米乔说彩虹有它的尽头，奔奔不信，直到他看到米乔撕下来那张图片，青春也有尽头，可能是18岁，也有可能是80岁，什么时候觉得自己突然老了，突然放弃了追逐很久的东西，突然松开了抓的很紧的手，可能就是青春的尽头吧。 也许带着遗憾就是人生的意义吧，总有一些事很想做可是又没有做成，总有一些人很喜欢可是偏偏错过了，当年在日落时分的操场上带着篮球飞扬的少年，上学路上的一抹嫣红，无关成绩与季节，旧时光里的我们，可能就是青春最好的样子吧。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"评","slug":"评","permalink":"http://blog.deali.cn/categories/%E8%AF%84/"}],"tags":[{"name":"时光","slug":"时光","permalink":"http://blog.deali.cn/tags/%E6%97%B6%E5%85%89/"},{"name":"青春","slug":"青春","permalink":"http://blog.deali.cn/tags/%E9%9D%92%E6%98%A5/"},{"name":"样子","slug":"样子","permalink":"http://blog.deali.cn/tags/%E6%A0%B7%E5%AD%90/"}]},{"title":"【VB超简单入门】八、四种运算","slug":"510444606e7b8c3c946b6195b9cceebf","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.700Z","comments":true,"path":"posts/aeeba848597509a5.html","link":"","permalink":"http://blog.deali.cn/posts/aeeba848597509a5.html","excerpt":"","text":"前言这几天好像看这个VB系列教程的同学很多啊，有个小同学说写得不错嘿嘿，所以我又有动力继续更新下去。说一下哈，在公众号和博客里同步更新的哟，并且博客因为可以用Markdown写，所以排版会更舒服一点，建议大家方便的话来博客看，博客地址：blog.deali.cn 算术运算算术运算包括加（+） 、 减（-） 、乘 （*）、除（/）、整除（\\）（如7\\2等于 3）、取余（Mod）（用来取余数，如7Mod2等于1，因为7=3 x 2 + 1，所以余数是1，好像是中学的数学知识吧= =..）、指数（^）和一元减（数值取反，负负得正，如- (-6)等于6）。 连接运算连接运算是将两个字符表达式连接起来，生成 一个新字符串。连接运算符有两个。即+和&amp;。 使用&amp;运算符时，参与连接的两个表达式可以不全是字符串，即&amp;运算符可强制性地将两个表达式做字符串连接。如： 1234Dim intNum As IntergerDim strTemp As StringintNum = 22strTemp = \"学号是\" &amp; intNum 使用+运算符时，操作数必须是字符串，否则，则产 生错误。下面的代码就是错误的！1234Dim intNum As IntergerDim strTemp As StringintNum = 22 strTemp = \"学号是\" + intNum 可能大家看完这个还没什么感觉，但是在后面的开发中，&amp;运算符的作用非常大，并且非常的好用噢。 关系运算关系运算用来比较两个表达式的大小， 包括大于（＞）、大于等于（＞＝）、小于（＜＝）、小于等于（＜＝）、等于 （＝） 和 不等于（＜＞）。关系运算的结果是逻辑值True或False。举几个小例子，见下表： 表达式 运算类型 值 说明 1=2 等于 False 1 等于 2，明显就不对，所以结果是false 1=1 等于 True 1 等于 1，对，结果为真 1&gt;2 大于 False 1 大于 2，错的咯 1&lt;2 小于 True 1 小于 2，对 1&lt;1 小于 False 1 小于 1，不对，1 和 1 是相等的 1&lt;=1 小于等于 True 1 小于等于 1 ，对 逻辑运算逻辑运算也称为布尔运算，专门用于逻辑值之 间的运算。见下面的表格：运算符 | 含义 | 举例 | 结果 | 说明— | — | — | — | —Not | 逻辑非 | Not（8＞2）| False | 8大于2为真，取反后为假。And | 逻辑与 | （8＞2）And（9＞3） | True | 两个表达式都为真时才为真。Or | 逻辑或 | （8＞3）Or（9＜5） | True | 两个表达式有一个为真即为真。Xor | 异或 | （9＞5）Xor（21＞6） | False | 两个表达式有一个且只有一个 为真时才为真。Eqv | 逻辑等于 | （6―3）Eqv（8―5） | True | 仅当两个表达式相同时才为真。Imp | 逻辑蕴含 | （9＜6＝Imp（9＞8） | False | 仅当第一个表达式为真时才为 真。 有什么问题或者需要交流的同学可以通过微信公众号和我联系。微信公众号：DealiAxy 博客地址：blog.deali.cn","categories":[{"name":"VB入门教程","slug":"VB入门教程","permalink":"http://blog.deali.cn/categories/VB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"B超","slug":"B超","permalink":"http://blog.deali.cn/tags/B%E8%B6%85/"},{"name":"入门","slug":"入门","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E9%97%A8/"},{"name":"运算","slug":"运算","permalink":"http://blog.deali.cn/tags/%E8%BF%90%E7%AE%97/"}]},{"title":"轻松解决百度云限速问题","slug":"5199682a47a19d57d2933674bee6066c","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.700Z","comments":true,"path":"posts/8775e3df620f1eb6.html","link":"","permalink":"http://blog.deali.cn/posts/8775e3df620f1eb6.html","excerpt":"","text":"前言360网盘关闭后，百度网盘似乎要成为国内网盘的唯一选择，但百度的“吃相”难看，无论你用多大的带宽，只要没有会员，下载速度永远都是是100k/s，稍微大一点的文件就需要安装客户端才能下载，烦人得很。今天介绍一种非常简单的方法解决百度云的限速问题。需要用到Tampermonkey浏览器插件和百度云下载脚本。 Tampermonkey介绍 Tampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 Chrome, Microsoft Edge, Safari, Opera Next, 和 Firefox。虽然有些受支持的浏览器拥有原生的用户脚本支持，但 Tampermonkey 将在您的用户脚本管理方面提供更多的便利。 它提供了诸如便捷脚本安装、自动更新检查、标签中的脚本运行状况速览、内置的编辑器等众多功能， 同时Tampermonkey还有可能正常运行原本并不兼容的脚本。 使用方法1、浏览器安装拓展 Tampermonkey2、安装下载脚本：https://greasyfork.org/zh-CN/scripts/375153、用迅雷或IDM下载时，需要点击“显示直链”，然后将链接复制到迅雷或IDM中去下载，支持在网盘管理页面和文件分享页面生效。4、如果需要快速调用下载可以安装Firefox下的拓展“xthunder”来调用下载软件。 另附：迅雷极速版下载：http://www.pc6.com/softview/softview_108931.htmlIDM绿色版下载：https://pan.baidu.com/share/init?shareid=3457730696&amp;uk=1767948507#3edk 密码 3edk 注意：1、IDM绿色版需要点击运行文件 “!绿化卸载.bat” 才会自动关联下载。2、如果你不太会怎么操作，你可以尝试一下已经集成好脚本的Firefox浏览器：http://www.runningcheese.com/firefox-v8（下载后需要在右上角的那个“火箭”图标里选择“系统工具”，然后再选择“设置IDM”，这样就会自动调用IDM下载了。）3、如果下载速度被限制在100KB左右，说明你的帐号被百度网盘拉黑了，需要退出登录才能恢复正常下载。4、如果下载速度在200-700KB左右，可以在“设置–&gt;连接”中，将最达连接数设置为16或者32.5、在文件分享页面，直接选择文件夹会无法下载，可以同时勾选下载任意一个文件，让文件夹与文件同时下载，这时即可下载。 安装完就知道怎么使用了。激活插件之后，打开百度云的分享页面就会多出来一个按钮。如图。可以选择直接下载，也可以显示链接，然后复制到迅雷或者IDM这类下载工具里下载。 PS：还有一个软件叫做度盘下载器，是基于Arai2的，经过测试也能下载，但是好像会修改浏览器主页，所以这里就不推荐了，有兴趣的同学可以自行搜索下载尝试。 其实我觉得百度云作为云存储提供商想赚点钱无可厚非，但是这样对非付费用户处处刁难，这种做法实在令人不齿，百度云完全可以像国外的网盘，OneDrive、GoogleDrive、Dropbox那样，免费存储空间不要给太多，要更多空间就需要付费，下载速度方面免费和付费用户都一视同仁，这样不就良心多了吗？毕竟大多数用户都不需要那么大的空间，百度宣称的5T空间其实没有什么意义，速度又限制得那么慢，再大的空间也没什么意义，而且数据安全问题也是不可忽视的，反正重要的数据不要存储在网盘上就对了。 了解更多有趣的操作请关注我的微信公众号：DealiAxy 每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"解决","slug":"解决","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3/"},{"name":"云计算","slug":"云计算","permalink":"http://blog.deali.cn/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"问题","slug":"问题","permalink":"http://blog.deali.cn/tags/%E9%97%AE%E9%A2%98/"},{"name":"限速","slug":"限速","permalink":"http://blog.deali.cn/tags/%E9%99%90%E9%80%9F/"},{"name":"百度","slug":"百度","permalink":"http://blog.deali.cn/tags/%E7%99%BE%E5%BA%A6/"}]},{"title":"喆大师写给前端的一些建议","slug":"53aeec022194807667924f266a0e3888","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.708Z","comments":true,"path":"posts/886585fa49b2d4e7.html","link":"","permalink":"http://blog.deali.cn/posts/886585fa49b2d4e7.html","excerpt":"","text":"书籍推荐《 jvascript高级程序设计（第三版） 》 偏字典书籍，江湖人称望远镜，红宝石书，红皮书，更多叫法等你去发现 《 javascript权威指南（第五版）》 就是字典，江湖人称 犀牛书，特点：厚，全 《 javascript语言精粹 》 一位在 js 界很有权威的人写的书，作者是json的发明者 江湖人称 蝴蝶书，特点：薄 完全就是在讲 js 语法，不涉及前端，顺便屌了一些开发人员 ps：以上书籍均不包含 es6 《 你不知道的javascript 》系列 本系列可以说是 js 书籍中最有深度的书籍 一共6本（纸质版是三卷），在github的有名开源书籍 https://github.com/getify/You-Dont-Know-JS 中文纸质版目前只有前两卷 正如书名，讲的是一些你平时不会去深究的问题 以及一些骚操作，如用～～来取整，代替 Math.floor 《 深入理解es6 》 冲着作者是红皮书的作者买的 最近在看这个，里面没有涉及到es7的知识 暂不评价 《 css揭密 》 前几天看的，各种css的骚操作，叹为观止 ps：上面的书我基本都有吧，还有一些书觉得没什么意思，就是不介绍了吧 三大主流框架对比Angular 一个功能强大的重量级框架，由Google操刀 因为在2.0出现全面更新（说是2个框架也不为过），所以社区被分裂开 顺带一提，1.0和2.0语法相差很大，有些教程还是1.0的 在2.0之后的版本语法兼容，统称新版，现在好像出5.0了吧 1.0不用npm构建，2.0开始需要 2.0开始使用typescript作为亲儿子，需要再学习TS 总结：功能强大，但学习成本也很大 React 一个十分灵活的轻量级框架，由FaceBook操刀 JSX，虚拟DOM，组件化思想的开拓者 有句话这么说，在react中一切皆JS，使用JSX代替HTML，CSS也写在js中 由于什么都是js控制，所以也导致了它的灵活 但实际上，它的写法和经典web写法区别很大，让人一开始难以适应 有孪生兄弟 react native 作为2015年最火的前端框架，开创了很多先进的思想 目前在github上star数在前端框架中仍居第一 但我觉得它的文档不是很友好，https://reactjs.org，而且需要科学上网 推荐bootstrap的翻译，只比官文旧一点，而且不用科学上网，https://react.bootcss.com Vue 同为轻量级框架，但它的写法比react更传统 作者是个国人，目前在 Google Creative Lab 就职 作为2016最火的框架，出生较晚，吸收了许多框架的优点 像react的组件化思想，angular的指令 在最新的版本中支持typescript，jsx，可以选则性使用 开创.vue文件（需要npm构建），更友好的书写组件 十分友好的文档，渐近式的教程 然后依旧推荐bootstrap的镜像，比官网快很多 https://vuejs.bootcss.com/ ps: 由于angular的重型级适合开发大型应用，不太适合开发h5应用，所以推荐在react和vue中选则一个框架学习。（当然这不代表angular差，几乎什么功能在angular都集成了，只是在一些小应用可能用不到这么多东西，而轻量级框架会给我们更多的选则余地）在三个框架中，angualr的学习成本是最大的，功能也是最多的，像包括自带了ajax插件，这些是其它两个框架所是没有的。然后是vue，再是react。react实际上是一个非常小的框架，但它拥有非常庞大的生态社区，像路由react官方不提供，全交给了社区维护，这也是他文档感觉不全的一个原因（翻遍文档找不到的功能，原来根本就不是在这里找，掀桌子），而vue的路由都是由官方维护。虽然我很想公平的评价，但我使用vue的时间是最长的，不得不说vue是很好的，在国际的影响力也是有的（在guithb上js框架的start数仅次于react）。好了，我也不干涉，相信选则哪个心里也有点B数了（提前恭喜又一个被我带进vue坑，趁你们学习vue，我顺便偷偷学习另外两个框架，#[滑稽] ）最后，不要一持坚持某个框架，多多尝试新鲜事物，毕竟，生命在于折腾 :) 关于 node &amp; npmQ： node是什么？ A： 关于node是什么其实没有一个很好的定义，他不是一个新的语言（使用js，但又有自己独立的api），也不是一个web容器（可以不用来写web），简单来说，它只是将原本只能在浏览器上跑的js剥离出来，它设计的初衷是创建一个支持异步的后台。 Q： npm是什么？ A： npm全称 node package manager ，就是node的包管理工具，用来下载和发布node的第三方包，安装node的时候一般会自带安装npm Q： 所以node作为一个后台技术，那么前端要学吗？ A： 相信前面介绍了那么多，大家也都注意到三个框架都推荐使用npm来构建，那么大家可能会很好奇，前端为什么也要用到node。其实这个问题很好理解，node并不是只能写后台，这个就是好比java不是只能写web，当然，node也不是用来写前端的，node在前端的运用相当一个工具，仅此而已。像在node出现之前，像很多js压缩工具是用别的语言写的，随着node的出现，大家也乐意用js来处理前端的东西，随后也出现了很多前端工具，像webpack，然后node就是渐渐变成一个前端的开发平台，很多插件也可以用npm下载，不必去官网下，通过node这个平台，让前端的开发更加多样化，像自动压缩，es6转es5, less自动编译css等，去除了很多繁琐的操作，更加面向现代化的开发模式。再回到问题，前端是否要学习node，其实说了这么多，前端node的使用其实只是用了别人发布的包，除非你是那些包的开发者，否则会用npm下载，安装东西就是够用了。因为node部分别人帮你写好了。 关于 ES6 Q： ES6是什么？ A： 在前面的介绍中，相信我多次提到es6，大家心中也会有些疑惑，前端不是用js吗，es6是什么鬼？ES全称EcmaScript，你可以简单理解成这个js的一个版本号，比如ie6支持的js版本是es3。在很多框架文档中，你可能会看到什么let const 关键字，这又是什么鬼，js不是用var吗，别紧张，我第一次看到这些东西的时候，我还以为他用了别的语言做示范，其实这些都是es6的语法。 Q： 既然只是个版本号，为什么我没听过什么es5？es6为什么那么屌？ A： 因为es6在js的版本变化中是最大的，你想想，连定义的关键字都不用万年var了，简直就是一个新的语言。因为es6的变化巨大，成为标志性的版本，所以es6之后的版本也统称es6, 之前的旧版语法统称es5 Q： es6是否值得到学习？ A： 很明确告诉你，es6 作为先进的js版本，非常值，用平常的话来讲，就是「你赚了」！ Q： 那我学习es6，之前学的js怎么办？ A： es6是js的一个版本，向下兼容，你无需担心之前的东西白学了，所以你可以在其中混用es5和es6，像var和let混用，不过我推荐除了兼容低版本ie，使用let来定义，因为var就是有一些缺陷才出现了let和const。当然也可以用babel(npm包)来将es6编译成es5。 ps：还有其它问题就是不一一列举，可以来问我或义大师（推荐使用义大师 #[滑稽]） 关于TS Q： 什么是TS A： TS全称typescript，是微软出品，JS的强类型变量版，由C#的设计师设计，所以会有一股浓浓的C#风，推荐喜欢C#或讨厌弱类型JS的人试一试（这里手动@定林）。 Q： TS和JS什么关系 A： 前面也说了，TS是强类型变量版JS，依赖于NODE，如果要用到前端，那需要将TS编译成JS ps: 更多TS请自行baidu，google，顺带一提，还有一门js的预编译语言叫CS (CoffeeScript)，由github出品，ruby/python风格的js，不过没有TS火，可能是因为CS还是弱变量的关系，解决的类语法糖在es6出来后也不需要了 其它建议 我建议学好es6，不然你可能连文档都看不懂了，这个给一本es6开源的书籍 http://es6.ruanyifeng.com/ 然后不要害怕用npm去构建项目，试着跟着框架的文档，用npm安装，你会发现很简单（毕竟只是安装，又不是让你写） 有空多多研究一些开源项目，逛逛github，node社区，（不好意思，我不喜欢看CSDN）下面贴出一些我珍藏的资源 一些资源 B站 https://www.bilibili.com/ （你当你什么也没看到）重量级藏品 阿里图标库 http://www.iconfont.cn/ （在没有ui的时候，大显身手）ps：上次冯同学问我图做那么快，用的什么刀，其实我根本就没用什么工具，就是在这里面偷的图标（然而我并没有告诉她，哈哈哈）重量级藏品 svg转字体文字 https://icomoon.io/app/#/select 一些图片素材 http://588ku.com/banner/?h=bd （其实相似的网站很多） 一个神奇的网站 http://www.html5tricks.com/ (虽然是一个无名小站，但我能在里面找到很多另人惊叹的作品，也是我平时看源代码的主要网站) 重量级藏品 后序码字好累，滚回去打代码 了解更多有趣的操作请关注我的微信公众号：DealiAxy 每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://blog.deali.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"写给","slug":"写给","permalink":"http://blog.deali.cn/tags/%E5%86%99%E7%BB%99/"},{"name":"大师","slug":"大师","permalink":"http://blog.deali.cn/tags/%E5%A4%A7%E5%B8%88/"},{"name":"建议","slug":"建议","permalink":"http://blog.deali.cn/tags/%E5%BB%BA%E8%AE%AE/"}]},{"title":"9-Most-Beautiful-Linux-Distros-You-Need-To-Use-(2018-Edition)","slug":"48ef17cfbffd5a4d7b46efd213c67b96","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.672Z","comments":true,"path":"posts/cbe6c14118eb67f7.html","link":"","permalink":"http://blog.deali.cn/posts/cbe6c14118eb67f7.html","excerpt":"","text":"BeforeLinux users have the liberty to enjoy an unparalleled freedom while choosing the Linux distributions as per their needs. Using different open source technologies, the developers keep creating something new and surprising the enthusiasts. Here, in this article, I’ll be listing the most beautiful Linux distros that have impressed me and other Linux users. This list is a mixture of newcomers and popular distros. Before going ahead and discussing the features and highlights of good-looking operating systems, don’t forget to check out our other most-visited list of Linux distro recommendations: Best Linux Distros for kids Linux Distro For Beginners Best Linux Distro For Gamers Best Lightweight Linux Distros Overall Best Linux Distributions Best Linux Distros For Programming Best Operating Systems For Hacking Best Linux Distros For Privacy &amp; Anonymity Most beautiful Linux operating systems for 2018:1. elementary OS After Linux Mint and Zorin OS, elementary OS is probably the most popular Ubuntu-derivative . It promotes itself as a “fast and open” replacement for macOS and Windows. There are tons of Linux distros around that are widely used, but elementary OS focuses mainly on non-technical users who are fed up with Windows, and young developers who are new to the open source world. Its development started as a set of themes and apps designed for Ubuntu, so the visual appeal shouldn’t turn out to be surprising. This beautiful Linux distro borrows some tricks from macOS for its slick interface that prefers to deliver a clutter-free experience to the users. The OS ships without many default Ubuntu applications, replacing them with many lightweight alternatives. It comes with the homegrown Pantheon desktop environment that looks polished and delivers with a lightweight experience. In case you’re having a tough time adapting to Ubuntu’s recent shift from Unity, you can give elementary OS a try. Why use elementary OS? macOS-like look Lightweight and efficient DE Selected set of applications Visit elementary OS website. 2. Deepin Deepin Linux is an open source, Chinese Linux distribution that aims to offer a clean and visually appealing interface to Linux users. We cover the latest Deepin Linux developments from time to time on Fossbytes and receive great feedback. The latest release of Deepin introduced a new blur and transparency style to the Control Center and desktop, which makes the overall look more appealing. It features homegrown desktop named “Deepin Desktop Environment,” or DDE. Deepin Linux, one the prettiest Linux distros around, also comes with Hot Corners and Gestures that make your Linux desktop experience refreshing. Another striking feature of Deepin is its pleasing installer that makes sure that your experience isn’t sub-par at any stage. It comes with Deepin Store that provides lots of applications that aren’t available in Ubuntu Store. Why choose Deepin? Innovative features Visual appeal Deepin Store Simple and easy-to-use installer Visit Deepin’s website. 3. Solus OS While this list features many derivatives of popular Linux distros, Solus tries to set itself apart from that crowd. In a very short period of time, Solus has established itself as one of the fastest growing and coolest Linux distros around. It follows the minimalist approach and sports a flat and modern look. It earns the tag of one of the most breathtaking Linux distros around with the help of its Budgie desktop environment. Budgie desktop is built on top of GNOME but it doesn’t feature Shell. There’s a main menu to access the available applications. On the right side of the screen, you get Raven, which hosts applets, notifications, etc. Solus has recently added the support for Snaps from Ubuntu Snappy Store, which is one of my favorite latest additions to the operating system. Why choose Solus? One of the fastest growing new distros Budgie desktop Support for Snaps Things just work out of the box Visit Solus website 4. Nitrux Nitrux is the newest Linux distro on this list of most beautiful operating systems for 2018. You’ll take a single look at the distro and find that it has been created with design in mind. It’s worth noting that Nitrux is based on Ubuntu unstable dev branch. Nitrux ships with Nomad desktop environment, which is based on KDE Plasma 5 and Qt. The developers of Nitrux OS have worked hard to distinguish themselves from the usual crop of Linux distros shipping with KDE desktop. It’s also important to mention that the same team behind current Nitrux distribution had previously created another distro with the same name. This cool distro ships with custom-made software. It’s based on rolling release model and available for 64-bit systems only. Why choose Nitrux OS? Own custom-made apps Beautiful desktop UI Minimalist approach Visit Nitrux OS website 5. KDE Neon In case you are a KDE loyalist who is looking for a beautiful and lightweight Linux experience, look no further. KDE Neon calls itself as the provider of the latest and greatest KDE software packaged on a rock solid Ubuntu LTS base. About the looks, KDE Neon developers know how to master the flat-looking themes. There a number of useful widgets that you can add to the desktop with ease. The distro’s menu is straightforward and user-friendly. The strength of KDE Neon also lies in its promise of delivering a rock solid desktop with the cutting edge features. With this good looking Linux distro, you get the stability of LTS, get all the stuff done, and enjoy a slick experience. The software choice too is pretty balanced. Go ahead and try this Linux eye candy as your daily driver. Why use KDE Neon? Latest KDE software Solid Ubuntu LTS base Bug-free, beautiful, flat theme Visit KDE Neon website 6. feren OSferen OS is based on Linux Mint. What makes it one of the most visually attractive Linux distro is its tweaked Cinnamon desktop environment. It promises to deliver an experience that’ll match beat aesthetics of macOS and Windows operating systems. feren OS is a rolling release Linux distribution. The look and feel of feren OS is familiar; there are a Windows-like start button and taskbar that have all the useful icons. The start menu is intuitively designed as clicking on an option opens a submenu.The Theme Changer tool lets you play with icons, setup, background, etc., so, do check it out. Overall, feren OS, apart from being a beautiful Linux distribution and an eye candy, it’s familiar and innovative. Why use feren OS? Familiar desktop, start menu Clean, flat design Modern looks, beginner friendly Visit feren OS website 7. Pop!_OSSystem76’s Pop!_OS is the youngest member of this collection of the most beautiful Linux distributions. This operating system came into the existence when Canonical decided to ditch Unity and more to GNOME. To provide a customized and fresh experience to its customers, Pop!_OS came into existence. While its desktop is based on GNOME, it bears a distinct appeal and minimalistic approach. If you’re bored with your current desktop and an Ubuntu-based and cool looking Linux distro appeals you, look no further. Why choose Pop!_OS? Fresh look, minimalist approach Soothing color themes Designed for creatives in computer science field Visit Pop!_OS website 8. Zorin OSZorin OS is one of the most popular Linux distros on this list for 2018. Started in 2008, over the years, this visually appealing Linux desktop has established itself as a perfect Windows replacement. Zorin OS is based on Ubuntu, so working on terminal won’t need new skills. The installation process is very similar. This Linux distro also comes with a useful set of applications that make your daily life easier. Zorin also comes with built-in Wine compatibility layer to let you install your favorite Windows applications inside Linux. Shipped with GNOME desktop, Zorin really shines and aims to become your daily driver. Why choose Zorin OS? Familiarity of Windows Popular distro, great support Polished, rock solid Linux desktop experience Visit Zorin OS website 9. Maui Linux In 2016, the developers of Netrunner Rolling turned Ubuntu-based version of Netrunner Desktop into Maui Linux. This Linux distro has been rebased on KDE Neon. The KDE software parts used here are KDE Plasma, KDE Applications, Frameworks, and Qt libraries. The distro also features non-KDE software as well, including Firefox, VLC, Thunderbird, etc. The It’s an LTS and beautiful operating system that keeps on getting security updates. Why choose Maui Linux? Stable KDE Neon/Ubuntu base Updated packages KDE Plasma desktop and KDE technologies ThanksSource From: https://fossbytes.com About Learn more on my WeChat Official Account：DealiAxyEvery post was in my blog：blog.deali.cn","categories":[{"name":"Linux评测","slug":"Linux评测","permalink":"http://blog.deali.cn/categories/Linux%E8%AF%84%E6%B5%8B/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"}]},{"title":"python：解决json-dump中文乱码问题","slug":"52d17ce43bba12b62941e84b2bb83e97","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.708Z","comments":true,"path":"posts/471881b92e96db52.html","link":"","permalink":"http://blog.deali.cn/posts/471881b92e96db52.html","excerpt":"","text":"Python2.71234567891011121314# -*- coding: utf-8 -*-m = &#123;'a' : '你好'&#125;print m=&gt;&#123;'a': '\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd'&#125;print json.dumps(m)=&gt;&#123;\"a\": \"\\u4f60\\u597d\"&#125;print json.dumps(m,ensure_ascii=False)=&gt;&#123;\"a\": \"浣犲ソ\"&#125;print json.dumps(m,ensure_ascii=False).decode('utf8').encode('gb2312')=&gt;&#123;\"a\": \"你好\"&#125; Python3123print json.dumps(m,ensure_ascii=False)=&gt;&#123;\"a\": \"你好\"&#125; About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"解决","slug":"解决","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3/"},{"name":"问题","slug":"问题","permalink":"http://blog.deali.cn/tags/%E9%97%AE%E9%A2%98/"},{"name":"前端","slug":"前端","permalink":"http://blog.deali.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"乱码","slug":"乱码","permalink":"http://blog.deali.cn/tags/%E4%B9%B1%E7%A0%81/"}]},{"title":"Whoosh搜索引擎的安装与配置","slug":"5394de470e28e2cd2d1e8c62989c9419","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.708Z","comments":true,"path":"posts/1f0588af3588ec0b.html","link":"","permalink":"http://blog.deali.cn/posts/1f0588af3588ec0b.html","excerpt":"","text":"Whoosh介绍 Whoosh is a library of classes and functions for indexing text and then searching the index. It allows you to develop custom search engines for your content. For example, if you were creating blogging software, you could use Whoosh to add a search function to allow users to search blog entries. Whoosh是一个由python实现的全文检索引擎，设计上参照了Lucene，配置和使用都比较方便，不过性能就不是很理想了，不过用在小型网站或者是测试场景下还是可以滴~ 本文介绍一下whoosh最基本的安装和使用方法，欲了解详情，请访问官方网站哈~ 官方文档：https://whoosh.readthedocs.io/en/latest/quickstart.html Whoosh安装直接使用pip安装即可：1pip install whoosh 也可以从源码安装：详情见项目主页：https://pypi.python.org/pypi/Whoosh/ 快速入门看一下官方的快速入门例子： 1234567891011121314151617&gt;&gt;&gt; from whoosh.index import create_in&gt;&gt;&gt; from whoosh.fields import *&gt;&gt;&gt; schema = Schema(title=TEXT(stored=True), path=ID(stored=True), content=TEXT)&gt;&gt;&gt; ix = create_in(\"indexdir\", schema)&gt;&gt;&gt; writer = ix.writer()&gt;&gt;&gt; writer.add_document(title=u\"First document\", path=u\"/a\",... content=u\"This is the first document we've added!\")&gt;&gt;&gt; writer.add_document(title=u\"Second document\", path=u\"/b\",... content=u\"The second one is even more interesting!\")&gt;&gt;&gt; writer.commit()&gt;&gt;&gt; from whoosh.qparser import QueryParser&gt;&gt;&gt; with ix.searcher() as searcher:... query = QueryParser(\"content\", ix.schema).parse(\"first\")... results = searcher.search(query)... results[0]...&#123;\"title\": u\"First document\", \"path\": u\"/a\"&#125; 建立索引和模式对象定义索引模式首先要定义索引模式，以字段的形式列在索引中： 12from whoosh.fields import *schema = Schema(title=TEXT, path=ID, content=TEXT) 其中，title、path、content就是字段(field)、每个字段对应索引查找目标文件的一部分信息，上面的代码就是定义索引的模式——索引内容包括title、path、content这三个字段，一个字段建立了索引就能被搜索到，也能被存储。 下面的代码和上面的代码是等价的： 1schema = Schema(title=TEXT(stored=True), path=ID(stored=True), content=TEXT) 在字段后面添加了参数(stored=True)，意味着将返回该字段的搜索结果。 这样就把索引模式建立好了，只要建立一次就好了，不用重复建立，索引模式一旦建立就会随索引保存。 定义索引模式对象索引模式对象就是一个继承自SchemaClass的类，例子如下： 1234567from whoosh.fields import SchemaClass, TEXT, KEYWORD, ID, STOREDclass TestSchema(SchemaClass): path = ID(stored=True) title = TEXT(stored=True) content = TEXT tags = KEYWORD 索引字段类型在上面的例子中，title = TEXT(stored=True)，title是字段名称，TEXT是字段类型。 whoosh有下面这些字段类型，可以在建立索引模式的时候用： whoosh.fields.ID：仅能为一个单元值，即不能分割为若干个词，通常用于诸如文件路径，URL，日期，分类。 whoosh.fields.STORED：该字段随文件保存，但是不能被索引，也不能被查询。常用于显示文件信息。 whoosh.fields.KEYWORD：用空格或者逗号（半角）分割的关键词，可被索引和搜索。为了节省空间，不支持词汇搜索。 whoosh.fields.TEXT：文件的文本内容。建立文本的索引并存储，支持词汇搜索。 whoosh.fields.NUMERIC：数字类型，保存整数或浮点数。 whoosh.fields.BOOLEAN：布尔类值 whoosh.fields.DATETIME：时间对象类型 官方文档https://pythonhosted.org/Whoosh/schema.html 选择索引存储目录建立好索引模式之后，要选择一个文件夹来保存搜索引擎建立的索引数据。代码如下： 12345678910import os.pathfrom whoosh.index import create_infrom whoosh.index import open_dirschema = fields.Schema(title=TEXT(stored=True), path=ID(stored=True), content=TEXT)if not os.path.exists('index_data'): #如果目录 index_data 不存在则创建 os.mkdir('index_data') ix = create_in(\"index_data\",schema) #按照之前创建的schema模式建立索引目录ix = open_dir(\"index_data\") #打开该目录一遍存储索引文件 上例中，用create_in创建一个具有前述索引模式的索引存储目录对象，所有的索引将被保存在该目录index_data中。 之后，用open_dir打开这个目录。 保存索引数据代码如下： 1234writer = ix.writer()writer.add_document(title=u\"my document\", content=u\"this is my document\", path=u\"/a\", tags=u\"firlst short\")writer.add_document(title=u\"my second document\", content=u\"this is my second document\", path=u\"/b\", tags=u\"second short\")writer.commit() 注意事项 字段的值必须是unicode 不是每个字段都必须赋值 官方文档https://pythonhosted.org/Whoosh/indexing.html 开始搜索 建立搜索对象 1searcher = ix.searcher() 搜索完了要记得关闭 1searcher.close() 推荐用下面这种写法 12withe ix.searcher() as searcher: (do somthing) 或者 12345try: searcher = ix.searcher() (do somthing)finally: searcher.close() 开始搜索 以搜索content为例子 12345from whoosh.qparser import QueryParserwith ix.searcher() as searcher: query = QueryParser(\"content\",ix.schema).parse(\"second\") result = searcher.search(query) results[0] 返回结果： 1&#123;\"title\":u\"my second document\",\"path\":u\"/a\"&#125; 写在后面到这里基本就ok啦，但是whoosh，或者说是全文检索引擎的使用和原理还远远不止这些，我会在后面的博客中介绍从零开始编写一个搜索引擎的方法，有兴趣的同学可以继续关注，一起学习哈~ 本文的结构和部分内容参考了老齐老师的博客，在此表示感谢~ 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://blog.deali.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}],"tags":[{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"}]},{"title":"【开源】发布一个基于JavaFX的小游戏：CrazyAlpha","slug":"53ff3339d00e60d486e1dad07fd78750","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.708Z","comments":true,"path":"posts/14b53f2797cc08f7.html","link":"","permalink":"http://blog.deali.cn/posts/14b53f2797cc08f7.html","excerpt":"","text":"Features 基于JavaFX设计了游戏引擎XEngine 使用自行开发的游戏引擎XEngine实现完整游戏功能 游戏资源管理：字体、图片、音频管理 游戏地图管理，多地图切换 MVVM分层设计，代码解耦合，模块高内聚 Model模型系统设计，模块化设计 使用订阅者模式实现的消息系统和事件处理 使用Gradle构建 下载运行首先，点击打开：CrazyAlpha下载页面 下载CrazyAlpha的最新版本，例如图中的是1.0.1，文件名是：crazyalpha.jar PS：由于游戏是使用Java编写的，所以没有安装Java的小伙伴请先下载Java，Windows版本的Java运行环境下载：点击下载 在安装完java环境之后，可以双击jar包运行，或者右键选择使用Java Runtime运行当然也可以在命令行中执行 1java -jar crazyalpha.jar 开源Github项目地址：https://github.com/Deali-Axy/CrazyAlpha PS：由于版权原因，Github代码中不包含游戏用到的图片、字体、声音等资源文件，所以要运行游戏的同学可以自行替换资源文件，或者联系我获取资源文件。 架构 Game.Engine：自行实现的游戏引擎包 Annotation：引擎注解包，包含引擎定义的注解 GameEventHandler：事件处理器注解 GameManager：游戏中各类管理器的注解 GameModel：模型注解 GameObject：游戏对象注解 GameView：视图注解，用于实现MVVM分层设计 Base：基础类包，包含了引擎定义的各种抽象基类 BaseModel：基础模型 ImageModel：基础图形模型 ShapeModel：基础形状模型 TextModel：基础文本模型 Enum：各类枚举的定义（略） Utils：其他工具（略） GameObject：游戏对象基类，所有对象都从这个类派生 GameView：除了游戏主界面外的其他界面都由视图基类派生 Game.EventHandler：包含所有事件处理器 Game.Manager：包含了各类管理器，地图、资源、数据、模型、事件等管理器 Game.Object：包含所有游戏对象的定义 Model：包含所有游戏模型的定义 GameMap：游戏地图对象 Generator：游戏事件发生器 Game.View：视图包，包含所有视图的定义 Game：全局游戏对象，使用单例模式创建 Main：游戏主类 Render：核心渲染器，负责游戏的渲染工作 图形界面实现为了开发这个游戏，我先开发了一个基于JavaFX的游戏引擎，引擎实现了从游戏资源管理、模型定义，到画面渲染等一系列功能，按照市面上现有的商业游戏引擎的设计思路进行设计，“麻雀虽小，五脏俱全”，虽然无法匹敌其他成熟的游戏引擎，但是就功能来说，是一应俱全的，能够满足大部分2D小游戏的开发需要。 界面截图游戏启动画面：左上方是游戏的logo，左下角显示最高分记录，下面是作者信息和版本。右下角是两个按钮，一个启动游戏按钮，另一个退出按钮。 游戏主界面：左上角是玩家头像，当前得分，以及生命值；正上方是当前关卡；画面中央是大风车，大风车跟随音乐节奏发射字母，玩家需要在字母飞出屏幕之前按下对应的字母才能得分。 游戏暂停画面 游戏结束画面左下方显示本局游戏得分，以及是否打破最高分记录。右下角显示返回主界面按钮。 开发心得这是我第一次使用Java做游戏开发，之前对Java这门语言的理解仅限于JavaEE做Web开发这方面，最近学习了JavaFX，用了一下，才发现原来JavaFX这么好用，确实是专门为GUI设计的框架，只是用的人比较少，我在开发过程中遇到了很多问题，基本都找不到国内的资料，还好有万能的StackOverFlow，另外，Oracle官网的文档也是挺详细的，感谢～ 对于我这样写习惯了Python这类动态语言的人来说，写大量Java代码的感受就是，很繁琐，但是很省心，不需要怎么动脑，不用纠结这个参数是什么类型，需不需要做强制类型检查，一切都由IDE和JVM安排的明明白白，不需要我再去操心类型的问题，另外因为Java语法比较死板，没有那么多灵活的写法，这既是缺点又是优点，缺点就是对于我这种喜欢炫技的人来说，写Java代码没有多少快感，但是优点是同样的功能，实现的代码基本都差不多，不同的人来实现也不会有多大的差别，这就保证了代码的可维护性，可能现在用Python写一个大项目，代码全都是挥洒飘逸，不拘一格，写的时候很爽，但是等到后面重构的时候，完蛋了，看不懂之前的代码了，尽管有注释，但不可能每一行代码都有注释吧，灵活的写法增加了理解难度，因此Java在大型项目的绝对统治地位不是空穴来风。 这次游戏开发也加深了我对Java这门语言的理解，比如说反射，比如说事件，一开始在做事件处理部分的时候，让我感到有点困惑的就是，Java既没有委托、也没有真正的“事件”这个概念，一切都是用接口和类实现，实现接口功能一般都是通过传入实现某个事件接口的匿名类（当然在Java8里可以使用lambda表达式），不过这也不是什么大问题，这些问题都有其他方法可以解决，只不过写起来比较繁琐而已。可能我之前写习惯了C#，所以写Java代码的时候总是不由自主拿来对比，但是其实这两种语言的可对比性不高，因为出生的年代都不一样，C#在语言设计上确实是比Java高明得多，近年来Java的新版本或有或无的在模仿C#多年前的特性，比如说Java8的lambda表达式，Java11的var定义变量等。 此外，此次开发小游戏让我对Java的体会就是，语法很简单，不像C#和C++那样多而复杂，所以对于初学者而言特别友好，因为一学就会，配合上最好的IDE：IDEA，轻轻松松写出各种项目，有一个说法是，因为Java语言本身的功能太少，所以出现了各种设计模式来补全Java语言的不足。 About Learn more on my WeChat Official Account：DealiAxy Every post was in my blog：blog.deali.cn 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Production","slug":"Production","permalink":"http://blog.deali.cn/categories/Production/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"开源","slug":"开源","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E6%BA%90/"},{"name":"发布","slug":"发布","permalink":"http://blog.deali.cn/tags/%E5%8F%91%E5%B8%83/"},{"name":"游戏开发","slug":"游戏开发","permalink":"http://blog.deali.cn/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"},{"name":"小游戏","slug":"小游戏","permalink":"http://blog.deali.cn/tags/%E5%B0%8F%E6%B8%B8%E6%88%8F/"}]},{"title":"忘记WSL的root密码怎么办","slug":"541e2f861a0560e6b6b902db8f7baa08","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.720Z","comments":true,"path":"posts/0c44b9e34797af56.html","link":"","permalink":"http://blog.deali.cn/posts/0c44b9e34797af56.html","excerpt":"","text":"解决方法首先，打开WSL是不需要输入密码的，如果你打开WSL时的默认用户不是root，请按照一下方式修改。 修改默认登录WSL用户以管理员权限启动Powershell 1lxrun /setdefaultuser root 此时重新打开WSL就是root用户了，并且不需要密码。 然后输入以下命令修改密码。 1passwd root About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"密码","slug":"密码","permalink":"http://blog.deali.cn/tags/%E5%AF%86%E7%A0%81/"},{"name":"忘记","slug":"忘记","permalink":"http://blog.deali.cn/tags/%E5%BF%98%E8%AE%B0/"}]},{"title":"PHP7-0-新特性","slug":"57dd78355a5e092de71be8f97bd3113f","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.720Z","comments":true,"path":"posts/acd9184841a37934.html","link":"","permalink":"http://blog.deali.cn/posts/acd9184841a37934.html","excerpt":"","text":"变量类型PHP7版本函数的参数和返回值增加了类型限定。为什么PHP要加入类型呢？实际上此项特性是为了PHP7.1版本的JIT特性做准备，增加类型后PHP Jit可以准确判断变量类型，生成最佳的机器指令。（针对密集运算的优化） 使用示例 123function test(int $a, string $b, array $c) : int &#123; //code&#125; 错误异常在过去，PHP程序出错之后Zend引擎会发生致命错误并终止程序运行，PHP7可以使用try/catch捕获错误。 12345try&#123; not_exists_func();&#125;catch(EngineException $e)&#123; echo \"Exception: &#123;$e-&gt;getMessage()&#125;\\n\";&#125; PHP7的性能优化zval使用栈内存在Zend引擎和扩展中，经常要创建一个PHP的变量，底层就是一个zval指针。之前的版本都是通过MAKE_STD_ZVAL动态的从堆上分配一个zval内存，而PHP7可以直接使用栈内存。好处：节省分配内存的花销 底层代码 123456//php5zval *val;MAKE_STD_ZVAL(val);//php7zval val; zend_string存储hash值，array查询不再需要重复计算hashPHP7为字符串单独创建了新类型叫做zend_string，除了char *指针和长度之外，增加了一个hash字段，用于保存字符串的hash值。数组的键值查找不需要反复计算hash值。 123456struct _zend_string&#123; zend_refcounted gc; zend_ulong h; size_t len; char val[1];&#125;; hashtable桶内直接存数据，减少了内存申请次数，提升看了Cache命中率和内存访问速度在之前版本的PHP中，在array里每插入一个数据，就要申请一次内存，并且使内存存储在不同的内存页上，访问的时候命中率会降低。 zend_parse_parameters改为宏实现，性能提升5%提升PHP扩展的性能 新增加4种OPCODE: call_user_function, is_int/string/array, strlen, defined 4个函数变为PHP OpCode指令，速度更快其他更多性能优化 基础类型int, float, bool等改为直接进行值拷贝 排序算法改进 PCRE with Jit(正则表达式) execute_data和opline使用全局寄存器 使用gdb 4.8的PGO功能 PHP7 JitPHP7.0-final版本不会携带Jit特性Jit使Just in Time得缩写，表示运行时将指令转为二进制的机器码。对于计算密集型的程序，Jit可以将PHP的OpCode直接转换为机器码，大幅提升性能。PHP开发组自己重启Jit开发计划，预计PHP7.1版本会带有Jit特性 为什么PHP7.0没有JitJit对于实际项目，如WordPress没有太大的性能提升 PHP内置开发测试服务器12cd ~/phpphp -S 0.0.0.0:8080 即可以~/php为网站根目录启动服务器。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"PHP","slug":"PHP","permalink":"http://blog.deali.cn/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://blog.deali.cn/tags/PHP/"},{"name":"特性","slug":"特性","permalink":"http://blog.deali.cn/tags/%E7%89%B9%E6%80%A7/"}]},{"title":"Python：使用logging模块记录日志","slug":"40ed9fcd231c39f28f56ecc632ec626d","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.672Z","comments":true,"path":"posts/6fdbd74b49ec1c7c.html","link":"","permalink":"http://blog.deali.cn/posts/6fdbd74b49ec1c7c.html","excerpt":"","text":"先看看基本用法例子123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding: utf-8 -*-import loggingimport sys# 获取logger实例，如果参数为空则返回root loggerlogger = logging.getLogger(\"AppName\")# 指定logger输出格式formatter = logging.Formatter('%(asctime)s %(levelname)-8s: %(message)s')# 文件日志file_handler = logging.FileHandler(\"test.log\")file_handler.setFormatter(formatter) # 可以通过setFormatter指定输出格式# 控制台日志console_handler = logging.StreamHandler(sys.stdout)console_handler.formatter = formatter # 也可以直接给formatter赋值# 为logger添加的日志处理器logger.addHandler(file_handler)logger.addHandler(console_handler)# 指定日志的最低输出级别，默认为WARN级别logger.setLevel(logging.INFO)# 输出不同级别的loglogger.debug('this is debug info')logger.info('this is information')logger.warn('this is warning message')logger.error('this is error message')logger.fatal('this is fatal message, it is same as logger.critical')logger.critical('this is critical message')# 2016-10-08 21:59:19,493 INFO : this is information# 2016-10-08 21:59:19,493 WARNING : this is warning message# 2016-10-08 21:59:19,493 ERROR : this is error message# 2016-10-08 21:59:19,493 CRITICAL: this is fatal message, it is same as logger.critical# 2016-10-08 21:59:19,493 CRITICAL: this is critical message# 移除一些日志处理器logger.removeHandler(file_handler) 格式化输出日志12345678# 格式化输出service_name = \"Booking\"logger.error('%s service is down!' % service_name) # 使用python自带的字符串格式化，不推荐logger.error('%s service is down!', service_name) # 使用logger的格式化，推荐logger.error('%s service is %s!', service_name, 'down') # 多参数格式化logger.error('&#123;&#125; service is &#123;&#125;'.format(service_name, 'down')) # 使用format函数，推荐 # 2016-10-08 21:59:19,493 ERROR : Booking service is down! 记录异常信息当你使用logging模块记录异常信息时，不需要传入该异常对象，只要你直接调用logger.error() 或者 logger.exception()就可以将当前异常记录下来。 12345678910111213# 记录异常信息 try: 1 / 0except: # 等同于error级别，但是会额外记录当前抛出的异常堆栈信息 logger.exception('this is an exception message') # 2016-10-08 21:59:19,493 ERROR : this is an exception message# Traceback (most recent call last):# File \"D:/Git/py_labs/demo/use_logging.py\", line 45, in # 1 / 0# ZeroDivisionError: integer division or modulo by zero logging配置要点GetLogger()方法这是最基本的入口，该方法参数可以为空，默认的logger名称是root，如果在同一个程序中一直都使用同名的logger，其实会拿到同一个实例，使用这个技巧就可以跨模块调用同样的logger来记录日志。 另外你也可以通过日志名称来区分同一程序的不同模块，比如这个例子。 12logger = logging.getLogger(\"App.UI\")logger = logging.getLogger(\"App.Service\") Formatter日志格式Formatter对象定义了log信息的结构和内容，构造时需要带两个参数： 一个是格式化的模板fmt，默认会包含最基本的level和 message信息 一个是格式化的时间样式datefmt，默认为 2003-07-08 16:49:45,896 (%Y-%m-%d %H:%M:%S) fmt中允许使用的变量可以参考下表。 %(name)s Logger的名字 %(levelno)s 数字形式的日志级别 %(levelname)s 文本形式的日志级别 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有 %(filename)s 调用日志输出函数的模块的文件名 %(module)s 调用日志输出函数的模块名| %(funcName)s 调用日志输出函数的函数名| %(lineno)d 调用日志输出函数的语句所在的代码行 %(created)f 当前时间，用UNIX标准的表示时间的浮点数表示| %(relativeCreated)d 输出日志信息时的，自Logger创建以来的毫秒数| %(asctime)s 字符串形式的当前时间。默认格式是“2003-07-08 16:49:45,896”。逗号后面的是毫秒 %(thread)d 线程ID。可能没有 %(threadName)s 线程名。可能没有 %(process)d 进程ID。可能没有 %(message)s 用户输出的消息 SetLevel 日志级别Logging有如下级别: DEBUG，INFO，WARNING，ERROR，CRITICAL默认级别是WARNING，logging模块只会输出指定level以上的log。这样的好处, 就是在项目开发时debug用的log，在产品release阶段不用一一注释，只需要调整logger的级别就可以了，很方便。 Handler 日志处理器最常用的是StreamHandler和FileHandler, Handler用于向不同的输出端打log。Logging包含很多handler, 可能用到的有下面几种 StreamHandler instances send error messages to streams (file-like objects). FileHandler instances send error messages to disk files. RotatingFileHandler instances send error messages to disk files, with support for maximum log file sizes and log file rotation. TimedRotatingFileHandler instances send error messages to disk files, rotating the log file at certain timed intervals. SocketHandler instances send error messages to TCP/IP sockets. DatagramHandler instances send error messages to UDP sockets. SMTPHandler instances send error messages to a designated email address. Configuration 配置方法logging的配置大致有下面几种方式。 通过代码进行完整配置，参考开头的例子，主要是通过getLogger方法实现。 通过代码进行简单配置，下面有例子，主要是通过basicConfig方法实现。 通过配置文件，下面有例子，主要是通过 logging.config.fileConfig(filepath) logging.basicConfigbasicConfig()提供了非常便捷的方式让你配置logging模块并马上开始使用，可以参考下面的例子。具体可以配置的项目请查阅官方文档。 12345678910import logging logging.basicConfig(filename='example.log',level=logging.DEBUG)logging.debug('This message should go to the log file') logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)logging.debug('This message should appear on the console') logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')logging.warning('is when this event was logged.') 备注： 其实你甚至可以什么都不配置直接使用默认值在控制台中打log，用这样的方式替换print语句对日后项目维护会有很大帮助。 通过文件配置logging如果你希望通过配置文件来管理logging，可以参考这个官方文档。在log4net或者log4j中这是很常见的方式。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# logging.conf[loggers]keys=root[logger_root]level=DEBUGhandlers=consoleHandler#,timedRotateFileHandler,errorTimedRotateFileHandler#################################################[handlers]keys=consoleHandler,timedRotateFileHandler,errorTimedRotateFileHandler[handler_consoleHandler]class=StreamHandlerlevel=DEBUGformatter=simpleFormatterargs=(sys.stdout,)[handler_timedRotateFileHandler]class=handlers.TimedRotatingFileHandlerlevel=DEBUGformatter=simpleFormatterargs=('debug.log', 'H')[handler_errorTimedRotateFileHandler]class=handlers.TimedRotatingFileHandlerlevel=WARNformatter=simpleFormatterargs=('error.log', 'H')#################################################[formatters]keys=simpleFormatter, multiLineFormatter[formatter_simpleFormatter]format= %(levelname)s %(threadName)s %(asctime)s: %(message)sdatefmt=%H:%M:%S[formatter_multiLineFormatter]format= ------------------------- %(levelname)s ------------------------- Time: %(asctime)s Thread: %(threadName)s File: %(filename)s(line %(lineno)d) Message: %(message)sdatefmt=%Y-%m-%d %H:%M:%S 假设以上的配置文件放在和模块相同的目录，代码中的调用如下。 1234import osfilepath = os.path.join(os.path.dirname(__file__), 'logging.conf')logging.config.fileConfig(filepath)return logging.getLogger() 日志重复输出的坑你有可能会看到你打的日志会重复显示多次，可能的原因有很多，但总结下来无非就一个，日志中使用了重复的handler。 第一坑12345678910111213import logging logging.basicConfig(level=logging.DEBUG) fmt = '%(levelname)s:%(message)s'console_handler = logging.StreamHandler()console_handler.setFormatter(logging.Formatter(fmt))logging.getLogger().addHandler(console_handler) logging.info('hello!') # INFO:root:hello!# INFO:hello! 上面这个例子出现了重复日志，因为在第3行调用basicConfig()方法时系统会默认创建一个handler，如果你再添加一个控制台handler时就会出现重复日志。 第二坑123456789101112131415161718192021import logging def get_logger(): fmt = '%(levelname)s:%(message)s' console_handler = logging.StreamHandler() console_handler.setFormatter(logging.Formatter(fmt)) logger = logging.getLogger('App') logger.setLevel(logging.INFO) logger.addHandler(console_handler) return logger def call_me(): logger = get_logger() logger.info('hi') call_me()call_me() # INFO:hi# INFO:hi# INFO:hi 在这个例子里hi居然打印了三次，如果再调用一次call_me()呢？我告诉你会打印6次。why? 因为你每次调用get_logger()方法时都会给它加一个新的handler，你是自作自受。正常的做法应该是全局只配置logger一次。 第三坑123456789101112131415161718192021222324252627import logging def get_logger(): fmt = '%(levelname)s: %(message)s' console_handler = logging.StreamHandler() console_handler.setFormatter(logging.Formatter(fmt)) logger = logging.getLogger('App') logger.setLevel(logging.INFO) logger.addHandler(console_handler) return logger def foo(): logging.basicConfig(format='[%(name)s]: %(message)s') logging.warn('some module use root logger') def main(): logger = get_logger() logger.info('App start.') foo() logger.info('App shutdown.') main() # INFO: App start.# [root]: some module use root logger# INFO: App shutdown.# [App]: App shutdown. 为嘛最后的App shutdown打印了两次？所以在Stackoverflow上很多人都问，我应该怎么样把root logger关掉，root logger太坑爹坑妈了。只要你在程序中使用过root logger，那么默认你打印的所有日志都算它一份。上面的例子没有什么很好的办法，我建议你招到那个没有经过大脑就使用root logger的人，乱棍打死他或者开除他。 如果你真的想禁用root logger，有两个不是办法的办法： 12logging.getLogger().handlers = [] # 删除所有的handlerlogging.getLogger().setLevel(logging.CRITICAL) # 将它的级别设置到最高 小结Python中的日志模块作为标准库的一部分，功能还是比较完善的。个人觉得上手简单，另外也支持比如过滤，文件锁等高级功能，能满足大多数项目需求。 本文整理自以下几个博客和文档： 官方文档：https://docs.python.org/2.7/library/logging.html http://blog.csdn.net/balderfan/article/details/7644807 http://python.jobbole.com/86887/ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"记录","slug":"记录","permalink":"http://blog.deali.cn/tags/%E8%AE%B0%E5%BD%95/"},{"name":"日志","slug":"日志","permalink":"http://blog.deali.cn/tags/%E6%97%A5%E5%BF%97/"},{"name":"模块","slug":"模块","permalink":"http://blog.deali.cn/tags/%E6%A8%A1%E5%9D%97/"}]},{"title":"给VMware里的Linux虚拟机配置静态ip","slug":"5fc47b34a507e218297f10179238f30b","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.728Z","comments":true,"path":"posts/87449f4c5409b2d3.html","link":"","permalink":"http://blog.deali.cn/posts/87449f4c5409b2d3.html","excerpt":"","text":"前言最近用VMware的时候是使用桥接方式，不知道是路由的问题还是其他，路由器里面没有显示虚拟机的连接，虽然虚拟机和主机都在路由器里分配了不同的IP地址，但是每次resume之后虚拟机的IP地址总是变，很麻烦。 VMware设置把下面这个勾去掉。 然后点击Nat Settings。记录网关。 虚拟机设置。把网络改成这个VMnet8。 Linux系统中配置静态IPDebian1nano /etc/network/interfaces 修改文件内容： 12345678auto lo iface lo inet loopbackauto ens33 iface ens33 inet static address 192.168.8.100 netmask 255.255.255.0 gateway 192.168.8.2 CentOS修改/etc/sysconfig/network 123NETWORKING=yesHOSTNAME=localhost.localdomainGATEWAY=192.168.92.2 修改/etc/sysconfig/network-scripts/ifcfg-eth0 123456789101112DEVICE=\"eth0\"#BOOTPROTO=\"dhcp\"BOOTPROTO=\"static\"IPADDR=192.168.129.129NETMASK=255.255.255.0HWADDR=\"00:0C:29:56:8F:AD\"IPV6INIT=\"no\"NM_CONTROLLED=\"yes\"ONBOOT=\"yes\"TYPE=\"Ethernet\"UUID=\"ba48a4c0-f33d-4e05-98bd-248b01691c20\"DNS1=192.168.92.2 配置DNS修改：/etc/resolv.conf配置成你想要使用的DNS服务器。 1nameserver 192.168.92.2 重启网络1/etc/init.d/networking restart About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"},{"name":"网络协议","slug":"网络协议","permalink":"http://blog.deali.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"静态","slug":"静态","permalink":"http://blog.deali.cn/tags/%E9%9D%99%E6%80%81/"}]},{"title":"自己动手开发简单消息队列（异步任务队列）：Python实现","slug":"3b1e687d846474b791bc80d929108eb8","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.664Z","comments":true,"path":"posts/5ec75b035e008a85.html","link":"","permalink":"http://blog.deali.cn/posts/5ec75b035e008a85.html","excerpt":"","text":"又是造轮子系列咯，Python上有很多成熟完善的异步任务队列框架可以用，比如Celery，或者RQ，不过这些都不自带消息队列服务，都需要使用Redis、RabbitMQ之类的消息队列才行，我用到小项目中又不需要附带这么多东西，于是自己动手来实现咯。 思路 将需要异步执行的任务添加到队列 自动从队列中取出任务，创建新线程执行 保存任务的执行结果和输出 任务完成，调用回调函数，处理返回的数据 使用输出重定向处理任务的输出 下面分析一下几个关键部分的代码实现 优先级队列Python标准库已经有实现好的优先级队列了，但是当在相同优先级下传入同样的对象时，他会自动比较这些对象，不过我们的Task类没有实现相关的运算符重载，所以无法比较。 要解决这个问题，要不就在Task里面实现运算符重载，要不就是自己实现一个优先级队列，我选择后者。 123456789101112131415161718class PriorityQueue: \"\"\" 自己实现的优先级队列，使用了Python的堆 \"\"\" def __init__(self): self._index = 0 self.queue = [] def push(self, priority, val): heapq.heappush(self.queue, (priority, self._index, val)) self._index += 1 def pop(self): return heapq.heappop(self.queue)[-1] @property def empty(self): return len(self.queue) == 0 输出重定向其实这个挺坑的了，毕竟是异步任务队列，难免涉及到线程的竞争问题，又没办法单独控制每个人物的输出，不过我还是做了，小项目的话还是可以用的（其实就是懒得移植一下已有代码） 代码如下，同样是使用队列来实现输出缓冲区，大小可以自己调整，默认支持输出到控制台、文件或者返回列表。 一般重定向输出的话需要自己实现可以输出处理函数，直接给Redirection类的custom 属性赋值即可。 123456789101112131415161718192021222324252627282930313233343536373839class Redirection: def __init__(self, buffer_size=512): self.buffer = Queue(maxsize=512) self._console = sys.stdout # 自定义的输出端 self.custom = None def write(self, output_stream): # 加入缓冲区队列 self.buffer.put(output_stream) def to_console(self): sys.stdout = self._console # 出列 while not self.buffer.empty(): print(self.buffer.get()) def to_file(self, file_path): with open(file_path, 'w+') as f: sys.stdout = f while not self.buffer.empty(): print(self.buffer.get()) f.close() def to_custom(self): while not self.buffer.empty(): self.custom(self.buffer.get()) def to_list(self): data = [] while not self.buffer.empty(): data.append(self.buffer.get()) return data def flush(self): self.buffer.empty() def reset(self): sys.stdout = self._console Task类没什么好说的，定义任务类，Task，代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Task: def __init__(self, func, callback=None, priority=Priority.MIDDLE, args=(), kwargs=&#123;&#125;): \"\"\" Args: func: 需要执行的函数 callback: 执行完的回调函数 priority: 优先级 *args: **kwargs: \"\"\" self._id = uuid.uuid4().hex self.function = func self.callback = callback self.priority = priority self.args = args self.kwargs = kwargs # 任务运行过程的输出，stdout的输出 self._outputs: Redirection = None @property def id(self): return self._id @property def outputs(self) -&gt; Redirection: return self._outputs @outputs.setter def outputs(self, value: Redirection): self._outputs = value def run(self): try: if self.callback: # 回调函数原型 callback(task_obj, result) result = self.callback(self, self.function(*self.args, **self.kwargs)) else: result = self.function(*self.args, **self.kwargs) return result except Exception as e: if self.callback: result = self.callback(self, e) else: result = e return result 使用起来很简单，如下： 12345678910111213141516def fun1(num1, num2): print(f'num1=&#123;num1&#125;') print(f'num2=&#123;num2&#125;') return num1 + num2Task( func=fun1, callback=lambda task, result: print(f'task result: &#123;result&#125;'),)# 也可以写成这样Task( func=lambda num1, num2: num1 + num2, callback=lambda task, result: print(f'task result: &#123;result&#125;'), args=[2, 3]) 任务队列最后是实现任务队列，也很简单，根据任务的优先级进行调度即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class TaskQueue: \"\"\" 基于线程的异步任务队列 todo 下次做一个基于进程的队列，充分利用多核CPU性能 \"\"\" def __init__(self, output_redirect=False): self.queue = PriorityQueue() self.output_redirect = output_redirect self._redirect_objs = &#123;&#125; self._results = &#123;&#125; def put(self, task: Task): \"\"\" 将task加入任务列表 Args: task: Returns:返回task id \"\"\" self.queue.push(task.priority, task) return task.id def get(self): return self.queue.pop() def run(self): while not self.queue.empty: task = self.get() # 开启新线程 t = threading.Thread(target=self._task_wrapper, name=task.id, args=[task]) self._log(f'Start thread &#123;task.id&#125;') t.start() def get_output(self, task_id: str) -&gt; Redirection: return self._redirect_objs.get(task_id, None) def get_result(self, task_id: str): return self._results.get(task_id, None) @staticmethod def _log(msg: str): \"\"\"日志输出接口，可以替换为日志组件\"\"\" print(f'[TaskQueue] &#123;msg&#125;') def _task_wrapper(self, task: Task): if self.output_redirect: if task.id in self._redirect_objs: redirect_obj = self._redirect_objs[task.id] else: redirect_obj = Redirection(2048) self._redirect_objs[task.id] = redirect_obj # 重定向输出 sys.stdout = redirect_obj task.outputs = redirect_obj result = task.run() # 恢复默认输出 redirect_obj.reset() self._log(f'Task finished. &#123;task.id&#125;') else: result = task.run() # 保存结果 self._results[task.id] = result 整个项目代码就在这了，很简单，也有很多不足的地方，不过小项目用用勉强还可以吧~ 过几天发布到pip，有需要的同学直接pip安装就可以使用，请关注博客更新。 Demo附上使用任务队列的demo代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950if __name__ == '__main__': task_queue = TaskQueue(output_redirect=True) def fun1(): time.sleep(2) return 1 def fun2(): time.sleep(3) return 2 task_queue.put(Task( func=fun1, callback=lambda task, result: print(f'task1 result: &#123;result&#125;'), )) task_queue.put(Task( func=fun2, callback=lambda task, result: print(f'task2 result: &#123;result&#125;'), )) def custom_output(msg): print(f'[custom] &#123;msg&#125;') def fun3(num1, num2): print(f'num1=&#123;num1&#125;') print(f'num2=&#123;num2&#125;') return num1 + num2 def callback(task_obj, result): print(f'task3 result=&#123;result&#125;') output = task_obj.outputs output.custom = custom_output output.reset() output.to_custom() task_queue.put(Task(func=fun3, callback=callback, args=[2, 3])) print('task queue run') task_queue.run() print('do other things...') for i in range(0, 100): print(i * i) 参考资料 运算符重载 https://blog.csdn.net/goodlixueyong/article/details/52589979 https://www.open-open.com/code/view/1433410658322 Celery异步任务队列 https://www.cnblogs.com/StitchSun/p/8552488.html https://zhuanlan.zhihu.com/p/37637660 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"实现","slug":"实现","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E7%8E%B0/"},{"name":"队列","slug":"队列","permalink":"http://blog.deali.cn/tags/%E9%98%9F%E5%88%97/"},{"name":"动手","slug":"动手","permalink":"http://blog.deali.cn/tags/%E5%8A%A8%E6%89%8B/"},{"name":"任务","slug":"任务","permalink":"http://blog.deali.cn/tags/%E4%BB%BB%E5%8A%A1/"},{"name":"消息","slug":"消息","permalink":"http://blog.deali.cn/tags/%E6%B6%88%E6%81%AF/"}]},{"title":"Python-本地时间和UTC时间转换","slug":"60b0179f8fdd7ee0cf59ccbae639ce39","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.768Z","comments":true,"path":"posts/b26a1aaf669c38e8.html","link":"","permalink":"http://blog.deali.cn/posts/b26a1aaf669c38e8.html","excerpt":"","text":"代码123456789101112131415161718192021222324252627import timeimport datetimedef utc2local(utc_st): \"\"\"UTC时间转本地时间（+8: 00）\"\"\" now_stamp = time.time() local_time = datetime.datetime.fromtimestamp(now_stamp) utc_time = datetime.datetime.utcfromtimestamp(now_stamp) offset = local_time - utc_time local_st = utc_st + offset return local_stdef local2utc(local_st): \"\"\"本地时间转UTC时间（-8: 00）\"\"\" time_struct = time.mktime(local_st.timetuple()) utc_st = datetime.datetime.utcfromtimestamp(time_struct) return utc_stif __name__ == '__main__': year = int(time.strftime(\"%Y\")) month = int(time.strftime(\"%m\")) day = int(time.strftime(\"%d\")) hour = int(time.strftime(\"%H\")) minute = int(time.strftime(\"%M\")) second = int(time.strftime(\"%S\")) local_time = datetime.datetime(year, month, day, hour, minute, second) utc_time = local2utc(local_time)","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"时间","slug":"时间","permalink":"http://blog.deali.cn/tags/%E6%97%B6%E9%97%B4/"},{"name":"转换","slug":"转换","permalink":"http://blog.deali.cn/tags/%E8%BD%AC%E6%8D%A2/"}]},{"title":"PHP7-0-+-Swoole-环境配置","slug":"6116c7e77a48c6b43d453f4ca81f4bb4","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.768Z","comments":true,"path":"posts/53c46704f4a2edf8.html","link":"","permalink":"http://blog.deali.cn/posts/53c46704f4a2edf8.html","excerpt":"","text":"前言Swoole是一个面向生产环境的 PHP 异步网络通信引擎。使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。 使用 PHP + Swoole 作为网络通信框架，可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。（官网如是说）听起来就很强大，赶紧尝试一下。 配置 PeclSwoole使用Pecl方式管理扩展，在Debian下配置Pecl方法如下： 1apt install php-pear php7.0-dev 安装 Swoole1pecl install swoole","categories":[{"name":"PHP","slug":"PHP","permalink":"http://blog.deali.cn/categories/PHP/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"环境","slug":"环境","permalink":"http://blog.deali.cn/tags/%E7%8E%AF%E5%A2%83/"},{"name":"PHP","slug":"PHP","permalink":"http://blog.deali.cn/tags/PHP/"}]},{"title":"为什么Ubuntu点了关机键变成注销？","slug":"619815e9a9a96efd78b1c75d8c0d668e","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.768Z","comments":true,"path":"posts/3eccc845c989452d.html","link":"","permalink":"http://blog.deali.cn/posts/3eccc845c989452d.html","excerpt":"","text":"最近发现一个奇怪的现象，就是点了关机键变成了注销，神烦，查了一下资料，找到了原因，原来是我安装的plank dock栏有个bug，会阻止系统关机，所以点了关机之后变成注销了，所以要在关机之前退出plank或者是docky这种dock工具。 然后我选择用回Unity的侧边栏了，告辞～ 参考资料https://linux.cn/article-6265-1.html","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"关机","slug":"关机","permalink":"http://blog.deali.cn/tags/%E5%85%B3%E6%9C%BA/"},{"name":"注销","slug":"注销","permalink":"http://blog.deali.cn/tags/%E6%B3%A8%E9%94%80/"},{"name":"变成","slug":"变成","permalink":"http://blog.deali.cn/tags/%E5%8F%98%E6%88%90/"}]},{"title":"Win10的Linux子系统也能运行图形程序","slug":"6266c7fb4e7b811a9992a477aae91a8f","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.768Z","comments":true,"path":"posts/e9a53dbbfbfdbd47.html","link":"","permalink":"http://blog.deali.cn/posts/e9a53dbbfbfdbd47.html","excerpt":"","text":"前言之前写了一篇在Win10中安装Linux子系统的文章，虽然Linux子系统既实用又方便，不过有些同学可能会觉得只有命令行挺无聊的，所以今天分享一个运行图形程序的方法，经过试用效果还是不错的。本文将带领你一步一步在Win10的子系统里安装运行Gimp(PS：Gimp是Linux上的PS，功能还是灰常强大滴)，还有其他一些Linux的图形化软件。 准备工作Linux子系统必备的哈，这个不用多说，需要教程的同学可以看看我博客里之前发的文章。这里我用的是Ubuntu子系统。 然后！还需要一个软件。Xming，就叫他小明吧= =。有这个软件才能在Windows上运行Linux的图形程序。 Xming 是一个在 Microsoft Windows 计算机上运行的开源 X-Windows 终端機仿真器（X 服务器）。Xming 容让 Windows 机器显示在远程 Linux 服务器上执行的图像化 Linux 程序官网：sourceforge.net/projects/xming。 安装XMing下载完了这玩意长这样： 打开进行安装，一直点下一步就好了。 启动XMing在开始界面最近安装的应用里面可以看到XMing和XLaunch。 打开XLaunch。 选择Xming以何种形式显示Linux图形程序的窗口（多窗口、单窗口、全屏或是不包含标题栏的单窗口），然后点击下一步按钮； 保持该选项不变，点击下一步按钮； 保持该选项不变，点击下一步按钮； 点击完成按钮； 现在XMing的配置就已经完成了，接下来要在Linux子系统中安装图形程序了。 安装Gimp首先启动Linux子系统bash：按Win+R，打开运行窗口，输入bash，按回车。 先更新一下软件仓库： 1sudo apt update 哇好多软件要升级的，那先sudo apt upgrade升级一下吧。升级完成之后，来开始安装Gimp。 1sudo apt install gimp 这里他问你要不要继续，我们按y继续。好像Gimp还挺大的。不过没事，我现在有100m的网络。 OK~现在已经下载好了，开始在一系列安装操作了，都是全自动的，看他表演就行。感觉这个过程比下载还慢啊。= = 启动Gimp经过漫长的等待，终于安装好了，嘿嘿，Linux比起Windows还是快，我要是安装个PS肯定不止这么久。 现在终于可以运行Gimp了，不过！要先做一件事： 1DISPLAY=:0 gimp 上面这个命令你不打进去能运行Gimp算我输。 成功启动Gimp！ 其他Linux图形工具感觉其他软件不是依赖与Gnome就是依赖KDE环境，本身是没多大，但是加上这两个桌面环境就很大了。我120G的硬盘在瑟瑟发抖= =。所以想到了这个超级轻量级的图形化软件 Leaf Pad(图片来源于网络，待会安装完可以看看在Windows里面的效果。) 首先还是通过apt安装 1sudo apt install leafpad 然后输入leafpad运行。啊？怎么回事 记得我前面运行Gimp时怎么做的吗？前面要加DISPLAY=:0啊！也就是要输入：DISPLAY=:0 leafpad 重新来，得嘞，成功了。 结束由于篇幅关系，就只是介绍这两个软件咯，其他软件都大同小异，有兴趣的同学可以自己去安装试一下。不过我觉得Linux这些软件放到Windows上运行看起来都挺丑的，还是在Linux桌面环境里面，换一套好看的GTK主题好看一些吧，在子系统里运行Linux图形程序确实挺好玩的，虽然就仅限于好玩，实际作用嘛= =。没想出来有啥= =。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"子系统","slug":"子系统","permalink":"http://blog.deali.cn/tags/%E5%AD%90%E7%B3%BB%E7%BB%9F/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"程序","slug":"程序","permalink":"http://blog.deali.cn/tags/%E7%A8%8B%E5%BA%8F/"},{"name":"图形","slug":"图形","permalink":"http://blog.deali.cn/tags/%E5%9B%BE%E5%BD%A2/"},{"name":"运行","slug":"运行","permalink":"http://blog.deali.cn/tags/%E8%BF%90%E8%A1%8C/"}]},{"title":"设置Linux默认的文件管理器","slug":"62ba5a8fc4ef1fb932172cf79aa0cf00","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.772Z","comments":true,"path":"posts/461cb8772f0ec7cf.html","link":"","permalink":"http://blog.deali.cn/posts/461cb8772f0ec7cf.html","excerpt":"","text":"搜索了半天，也试了很久。 用以下命令可以：使用Xfce的文件管理器 1xdg-mime default Thunar.desktop inode/directory thunar.desktop换成你想要的文件管理器名称再不行就只能把原来的那个文件管理器卸载掉= =。 我比较喜欢用Gnome的文件管理器： 1xdg-mime default org.gnome.Nautilus.desktop inode/directory 在深度论坛上看到另一个方法： 在~/.config/mimeapps.list的[Default Applications]字段下修改inode/directory=org.gnome.Nautilus.desktop即可更改默认的文件管理器 这个方法更加直观方便！说来也奇怪，之前用在国外的论坛社区转了一圈，只找到了最上面的方法，很多也都比较含糊，而使用中文搜索之后很快就找到了解决方法，不得不说，我们国内的计算机发展真的是不差的！ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"默认","slug":"默认","permalink":"http://blog.deali.cn/tags/%E9%BB%98%E8%AE%A4/"},{"name":"文件","slug":"文件","permalink":"http://blog.deali.cn/tags/%E6%96%87%E4%BB%B6/"},{"name":"管理器","slug":"管理器","permalink":"http://blog.deali.cn/tags/%E7%AE%A1%E7%90%86%E5%99%A8/"},{"name":"设置","slug":"设置","permalink":"http://blog.deali.cn/tags/%E8%AE%BE%E7%BD%AE/"}]},{"title":"操作系统学习一：-NetCore-实现模拟多道程序设计的简单处理机调用","slug":"20bcb1e8d05d2bb0053cc2f7f72666a1","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.648Z","comments":true,"path":"posts/b484360529bb54b4.html","link":"","permalink":"http://blog.deali.cn/posts/b484360529bb54b4.html","excerpt":"","text":"前言道程序设计中，经常是若干个进程同时处于就绪状态，为了使系统中的各进程有条不紊地运行，必须选择某种调度策略，以选择一个进程占用处理机。本次实验设计一个模拟单处理机调度的算法，以加深对处理机调度算法的理解。 要求 按照时间片轮转算法设计模拟调度程序。 输出进程的调度过程。 思路分析由于本实验是按照处理机调度算法模拟实现处理机的调度，与真正的处理机调度过程并不完全相同，比如没有实现中断（时间片设为1），进程的运行也不是真正的运行，而是在屏幕上打印其运行时间等。所以要以文件的形式给出进程的信息，文件信息可参考如下： 123456进程ID 到达时间 估计运行时间 优先级0 0 3 21 2 6 42 4 4 03 6 5 34 8 2 1 以下是实验的大致思路： 建立三个队列：PCB队列，就绪队列，完成队列。PCB队列：保存将进入系统的进程。（由于没有实现中断，所以将进入系统运行的进程必须在程序运行前给出）。就绪队列：到达进程进入系统的时间，将该进程放入就绪队列，等待调度。完成队列：将“运行”完的进程放入完成队列。 进程运行过程是在屏幕上打印相关信息。使用轮转算法调度的进程应打印的信息包括：进程占用处理机序列，该进程每次占用处理机的开始时间与结束时间。 统计出进程的周转时间T和带权周转时间W。 流程图 实现代码 ProcessControlBlock.cs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace OperatingSystemExperiment.Exp1 &#123; enum ProcessStatus &#123; Ready, Run, Finish &#125; /// &lt;summary&gt; /// 进程控制块 PCB /// &lt;/summary&gt; class ProcessControlBlock &#123; /// &lt;summary&gt; /// 进程号 /// &lt;/summary&gt; public int ID; /// &lt;summary&gt; /// 进程状态 /// &lt;/summary&gt; public ProcessStatus Status; /// &lt;summary&gt; /// 进程到达时间 /// &lt;/summary&gt; public int ArriveTime; /// &lt;summary&gt; /// 估计运行时间 /// &lt;/summary&gt; public int Time; /// &lt;summary&gt; /// 已运行时间 /// &lt;/summary&gt; public int RunTime = 0; /// &lt;summary&gt; /// 等待时间 /// &lt;/summary&gt; public int WaitTime; /// &lt;summary&gt; /// 优先级 /// &lt;/summary&gt; public int Priority; /// &lt;summary&gt; /// 链接指针 /// &lt;/summary&gt; public ProcessControlBlock Next; /// &lt;summary&gt; /// 开始时间 /// &lt;/summary&gt; public int StartTime; /// &lt;summary&gt; /// 结束时间 /// &lt;/summary&gt; public int FinishTime; public void Run() &#123; this.Status = ProcessStatus.Run; if (RunTime &gt;= Time) &#123; this.Status = ProcessStatus.Finish; return; &#125; this.RunTime++; &#125; public void Wait() &#123; this.WaitTime++; &#125; public override string ToString() =&gt; String.Format(\"&#123;0&#125; &#123;1&#125; &#123;2&#125;\", ID, StartTime, FinishTime); &#125;&#125; CentralProcessUnit.cs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.IO;namespace OperatingSystemExperiment.Exp1 &#123; class CentralProcessUnit &#123; private List&lt;ProcessControlBlock&gt; PCBList = new List&lt;ProcessControlBlock&gt;(); private Queue&lt;ProcessControlBlock&gt; FinishQueue = new Queue&lt;ProcessControlBlock&gt;(); private Queue&lt;ProcessControlBlock&gt; ReadyQueue = new Queue&lt;ProcessControlBlock&gt;(); public CentralProcessUnit() &#123; LoadPcbList(); &#125; /// &lt;summary&gt; /// 生成进程列表 /// &lt;/summary&gt; /// &lt;param name=\"count\"&gt;进程数量&lt;/param&gt; public static void GenerateProcessList(int count) &#123; var processListFile = Path.Combine(Environment.CurrentDirectory, \"process_list.txt\"); var writer = new StreamWriter(processListFile); var rnd = new Random(DateTime.Now.Millisecond); for (var i = 0; i &lt; count; i++) &#123; var runTime = rnd.Next(1, 10); writer.WriteLine(\"&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;\", i, Math.Pow(2, i), runTime, rnd.Next(0, 4)); &#125; writer.Close(); &#125; /// &lt;summary&gt; /// 加载PCB列表 /// &lt;/summary&gt; private void LoadPcbList() &#123; var processListFile = Path.Combine(Environment.CurrentDirectory, \"process_list.txt\"); var reader = new StreamReader(processListFile); while (!reader.EndOfStream) &#123; var line = reader.ReadLine(); var procInfo = line.Split(' '); PCBList.Add(new ProcessControlBlock &#123; ID = int.Parse(procInfo[0]), ArriveTime = int.Parse(procInfo[1]), Time = int.Parse(procInfo[2]), Priority = int.Parse(procInfo[3]) &#125;); &#125; &#125; /// &lt;summary&gt; /// CPU运行 /// &lt;/summary&gt; public void Run() &#123; var times = 0; while (true) &#123; // 如果所有进程运行完，则退出循环 if (FinishQueue.Count == PCBList.Count) &#123; break; &#125; // 遍历所有进程列表 foreach (var p in PCBList) &#123; // 根据进程到达时间判定是否有新进程加入，然后将进程状态设置为就绪 if (p.ArriveTime == times++) &#123; Console.WriteLine(\"时间：&#123;0&#125;,进程 &#123;1&#125; 到达\", times, p.ID); p.Status = ProcessStatus.Ready; &#125; // 讲就绪状态进程加入就绪列表 if (p.Status == ProcessStatus.Ready) &#123;// Console.WriteLine(\"时间：&#123;0&#125;，进程 &#123;1&#125; 加入就绪列表\", times, p.ID); ReadyQueue.Enqueue(p); &#125; // 如果就绪队列为空则进入下一次循环 if (ReadyQueue.Count == 0) &#123;// Console.WriteLine(\"时间：&#123;0&#125;，没有就绪进程，进入下一个循环\", times); continue; &#125; // 从就绪队列中取出一个进程运行 var currentProcess = ReadyQueue.Dequeue(); Console.WriteLine(\"时间：&#123;0&#125;，运行进程 &#123;1&#125;\", times, p.ID); currentProcess.Run(); // 将运行完毕进程加入完成列表 if (currentProcess.Status == ProcessStatus.Finish) &#123; Console.WriteLine(\"时间：&#123;0&#125;，进程 &#123;1&#125; 运行完毕，总运行时间：&#123;2&#125;\", times, p.ID, p.RunTime); FinishQueue.Enqueue(currentProcess); &#125; else currentProcess.Status = ProcessStatus.Ready; &#125; &#125; &#125; &#125;&#125; Main.cs 1234567891011namespace OperatingSystemExperiment.Exp1&#123; public class Main &#123; public static void Run() &#123; CentralProcessUnit.GenerateProcessList(5); new CentralProcessUnit().Run(); &#125; &#125;&#125; 运行结果 生成的process_list.txt内容： 123450 1 8 31 2 3 12 4 8 03 8 6 34 16 4 1 控制台输出时间：1，运行进程 0时间：2，运行进程 1时间：3，运行进程 2时间：4，运行进程 3时间：5，运行进程 4时间：6，运行进程 0时间：7，运行进程 1时间：8，运行进程 2时间：9,进程 3 到达时间：9，运行进程 3时间：10，运行进程 4时间：11，运行进程 0时间：12，运行进程 1时间：13，运行进程 2时间：14，运行进程 3时间：15，运行进程 4时间：16，运行进程 0时间：17，运行进程 1时间：17，进程 1 运行完毕，总运行时间：3时间：18，运行进程 2时间：19，运行进程 3时间：20，运行进程 4时间：21，运行进程 0时间：23，运行进程 2时间：24，运行进程 3时间：25，运行进程 4时间：25，进程 4 运行完毕，总运行时间：4时间：26，运行进程 0时间：28，运行进程 2时间：29，运行进程 3时间：31，运行进程 0时间：33，运行进程 2时间：34，运行进程 3时间：34，进程 3 运行完毕，总运行时间：6时间：36，运行进程 0时间：38，运行进程 2时间：41，运行进程 0时间：41，进程 0 运行完毕，总运行时间：8时间：43，运行进程 2时间：43，进程 2 运行完毕，总运行时间：8 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"编程","slug":"编程","permalink":"http://blog.deali.cn/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"产品","slug":"产品","permalink":"http://blog.deali.cn/tags/%E4%BA%A7%E5%93%81/"},{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"实现","slug":"实现","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E7%8E%B0/"},{"name":"设计","slug":"设计","permalink":"http://blog.deali.cn/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"操作系统","slug":"操作系统","permalink":"http://blog.deali.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"处理机","slug":"处理机","permalink":"http://blog.deali.cn/tags/%E5%A4%84%E7%90%86%E6%9C%BA/"},{"name":"调用","slug":"调用","permalink":"http://blog.deali.cn/tags/%E8%B0%83%E7%94%A8/"},{"name":"模拟","slug":"模拟","permalink":"http://blog.deali.cn/tags/%E6%A8%A1%E6%8B%9F/"}]},{"title":"我的2018：不念过往、不畏将来","slug":"115970c9b73762f82508946aaa22666f","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/90df5fdcda9d923a.html","link":"","permalink":"http://blog.deali.cn/posts/90df5fdcda9d923a.html","excerpt":"","text":"刚刚手机提醒我剩余空间不足1%，打开Google的文件极客准备清理文件，这个时候突然意识到，2018年余额也已经不足1%了，那是时候写一波年度总结了。 单纯写「2018总结」，未免太单薄苍白了，所以把过去的这一年过了一遍，想到了齐白石的「不念过往，不畏将来」。稍稍翻阅了2018年的手帐和日记，我看到最多的字眼就是「熬夜」，其次是「生产力」，因此可以简单的概括一下我的2018，「前半年熬夜。后半年努力提高生产力」。 关键词：熬夜关于熬夜的理由，每天都可以不同，但是终归是一点不变的——那就是白天效率低，这才导致了晚上需要加班加点，用以弥补白天拖延浪费的时间。再者，因为有太多的事情没有做完或者做好，所以没有勇气安然入梦，「大概有太多人没有勇气结束这一天」。所以就陷入这种日复一日的循环，「白天顶着黑眼眶在浪费时间，晚上带着愧疚和疲惫奋战」。2018年最大的收获之一，就是把主动熬夜的状态，慢慢调整到了「被动熬夜」，除非必要，绝不熬夜。 关键词：生产力为什么这么关注生产力呢？只有一点原因，我们的时间太有限了，「人生太短，要做的事情太多」。所以我们只能千方百计的用尽一切办法去提高生活和工作的效率，即所谓「生产力」。这一年我读了一些古代和近代文学，偶尔醉心于古人那种悠然自得，恬静自然的轻松的生活状态，但是从书中回到现实难免会有巨大的落差，毕竟我们的社会经过了几百上千年的发展，科学技术、社会生产力等早已不是古代的农耕社会能够相提并论的了，现代人或许拥有比古代人更加「舒适」的生活方式，但是也拥有更大的生存压力，特别是在我们这样的处于高速发展阶段的发展中国家。 2018年可以说是在提高生产力道路上不断探索，并且取得一定成就的一年~在生产工具（Computer）方面： 2月份给笔记本加了另一块固态硬盘，还有内存条，用最简单粗暴的方式提高使用提高和开发效率； 3月份为了方便看书（大多是文学作品），买了kindle，也确实用它读了好多本书，并且以后还要坚持每个月读至少两本书； 5月份因为不满笔记本电脑对于Linux系统糟糕的支持，为了避免继续折腾，果断配了一台主机，从此专心使用Linux开发，再不回头Windows； 11月份赶上了苏宁的优惠活动，入了iPad，这下专业书、笔记本、手账都可以省了。 除了硬件设施之外，在2018年我也彻底转入Linux阵营，告别了Windows肮脏低效的开发环境。 虽然早在此之前，我就是忠实的Linux粉丝，但是一方面经验、知识还不足，另一方面没有特别合适的设备使用Linux（华硕笔记本对Linux的兼容很感人），所以一直以来都是双系统来回切换，这样就免不了两个系统都要各自配置一套开发环境，极度浪费时间和精力。所以在2017年的后半年和2018年的前半年里，我一直在折腾Linux环境，平均每两个星期就要重装一次系统，因为当前使用的系统总有一些让我不满意的地方，基本把各个主流的Linux发行版都试过一遍了。但是仍然没有找到对华硕笔记本兼容特别好的Linux发行版。直到5月份配了台式电脑之后，所有的问题都迎刃而解了，从那之后就可以心无旁骛使用Linux做开发和学习了，从5月份开始就固定使用Arch系统直到9月份开学重新安装了Ubuntu系统至今。再也不用因为需要折腾系统而浪费不必要的时间，所以有时候该买的东西就果断买，不要等，时间比金钱更宝贵，况且现在的电子产品都已经是白菜价了，可能只需要花费很少的钱，就能换来很好的使用体验，更可以提高生产力，何乐而不为呢？ 关键词：心态每个成长阶段，心境都会发生变化，偏偏我又是一个太容易受外界影响的人，所以一直都在养成健康心态的路上努力着。 进入大学的近三年来，心境虽然说有比较大的变化，相比起中学有些进步，不过离我自己预期的还有一些差距，比如说有时候会有点优柔寡断，决断力不够（执行力不够），尽管这种情况已经很少了，但是发生的时候还是对我有很大影响的。不过倒是在某些事情上变得很果断，这个算是很大的进步了~ 还有一个就是对情绪的控制能力，我知道这个能力很重要，也在努力培养，基本来说，对愤怒情绪的控制会比较好，但是失落情绪对我的影响还是蛮大的，还好我也是通过多种方式来及时发泄和引导，不过以后还要多学习这方面的知识，用更加科学的方式来控制情绪，让自己在情绪波动的时候更加理性，避免被情绪左右~ 说到心态，现在更多的是可以用「佛系」或者「无欲无求」来形容，做事情越来越「顺其自然」，这样反而是更加的顺利并且更加容易达成心愿，用平常心对待每件事情，往往会有一些想不到的惊喜和收获。世间最难受的事情，莫过于「求而不得」，那一般欲望过大的人，往往都过的不快乐，这个无所谓拥有的多少，以前上学的时候，老师总是会对我们说，要有「永不满足的上进心」，做事情要「追求完美」，这个说法本身没有错，但是在生活中，人确实不应该「永不满足」，很多这样的人在生活工作中看谁都不顺眼，事事不顺心，就是因为太过追求完美，世界上哪来那么多完美的事情，就算有一些完美的事物，你确保有足够的运气都碰到吗？我觉得如果能把对生活、工作，对别人的要求稍微降低一些，至少能让幸福感提升好几层，我们要明白的事情是，「人生很短」，但是生活可以很长，完美主义者苛求的每一天也许分毫不差，那么在他们的眼里，人生的几十年就像几天一样，因为每天都要重复着「完美」这个词的样子，千篇一律；但是在佛系玩家看来，生活里的每一天都不重样，因为「不必要完美」所以平淡的生活总会有新奇的色彩出现，小小的不同也能极大提高生活的幸福感。（当然「佛系」不代表「没有追求」，两者有所不同，没必要细述） 2018年的改变前半年循着2017年的路线行进，没有大的变化，后半年换了新的环境，接触了不同的人，我也调整了自己的方向和定位。 在技术方面，后半年开始我渐渐从Python/C#技术栈转向了Java技术栈，（实话说现在转Java是有一些慢了，只能说以前对市场的敏感度不够，学什么都照着自己的喜好和心情来），当然Python和C#肯定是不会抛弃的啦，不过接下来我会把更多的精力放在Java的底层知识学习上，单纯语言层面来说，学某种语言就是一两天的事情，况且Java在此之前就已经在用了，主要是被Java的生态吸引到了，JavaEE的生态真的是无敌的存在，在未来的几年里，应该还是具有相当的活力的。在此之前我对技术一向都是，喜欢什么就学什么，看到什么好玩就学什么，没有什么明确的目的，完全看心情，虽然确实玩的比较开心，但是难免学得太多太杂，没有在某一个方向深入的话就比较缺乏竞争力了，而且最近关于「互联网寒冬」的消息满天飞，说焦虑情绪的话多多少少会有一些的。还有值得一提的是，我开始更注重基础知识的学习，不是像以前那样只是停留在语言的层面，在最表层摸索，在基础知识（数据结构、算法、操作系统、汇编、网络等）的学习上花了很多时间，当然成果也是比较明显的，就是对各类技术的理解更深了，唯一还不满意的就是数学这一块。（似乎要归类到学习方面来讲） 在学习方面，最大的改变就是对数学的态度有了极大的改观。为什么这么说呢，因为曾经有段时间我是比较不喜欢数学这东西的，因为觉得他很枯燥和乏味，没什么意思，远不如「所见即所得」的编程来的成就感高，所以一直忽视了数学的学习，转而去学习我自己感兴趣的东西。后来我才意识到这是个错误，也是在我深入学习各种技术之后，才体会到数学在计算机科学领域的奇妙作用和地位。还有关于外语的学习上，2018年开始了日语的学习，不过至今不温不火，沉迷背单词无法自拔，但是每天又花不了那么多时间去背单词，只能慢慢来吧，希望能在大学毕业之前考一个N2。在英语学习方面，以前从不觉得英语是我的短板，因为每天接触的英语都不少，语感上也是比较顶呱呱的，但是，我不得不承认的是，我确实是很久没好好读英语或者是背英语单词了，（再次吐槽，每天的时间真的是不够用的）所以在做题的时候明显感觉到了吃力，我也知道英语怎么学，但是就是没有那么多时间去学啊，这可怎么办，最重要的外语就是英语了，这点也是比较迷茫的地方，需要我好好规划一下了。 感情上，2018年和前女友分手了，这也是我们在经过复杂的分分合合之后做的最正确的选择，分开的具体原因难以总结，这也是我少有的决绝和果断，也许是经过这些和读了一些文学作品，让我有点怀疑现实生活中的「爱情」这东西，是不是不如「生活的妥协」来得更实在一点。所以当有人说起我对爱情的态度比较消极的时候，我觉得可能不是我的问题，而是生活本来的面目就是如此。总之能心无旁骛的学习是很好的，当然还是希望能遇到一个一起奋斗的人，但最好是「不那么上进」的，符合我这种「佛系」性格，哈哈~ 其他方面，我想一想，好像没有什么特别的事情了，我还没有心态好到把每一天都过的很精彩，所以特别羡慕那种乐天派遇到啥事都能觉得开心的同学。总结一下就是，「拥抱改变，迎接挑战」。 关于未来最近一段时间经常在想的就是关于未来的工作和发展问题，家里人当然是希望我毕业之后回家乡十八线小县城当一个普通的公务员或者教师，过「无欲无求」的生活就好了，嗯确实比较符合我的心态，但是看过了外面的更大的世界，总觉得如果只是继续回到小县城过这种养老的生活是不是太可惜了，而且这跟我学的专业好像也不符合，IT行业只有一线城市才有相关的工作，所以我个人的倾向还是到一线城市发展，「通过自己的努力拉高下一代的起点」，上了年纪的上一辈对高新产业没有什么概念，同时对工作的观念还停留在了「铁饭碗」上。其实如果城市不好的话，为什么每年有那么多从农村来的年轻人投入到城市的生活中，养老生活的话也不是不行，但是总觉得这样的生活太没有激情了，而且最重要的是，收入不够….（这个才是最关键的） 不急，慢慢来，2019年加油！愿2018年的所有遗憾，都是2019年惊喜的铺垫。 曦远2019年1月1日","categories":[{"name":"随笔","slug":"随笔","permalink":"http://blog.deali.cn/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"不畏","slug":"不畏","permalink":"http://blog.deali.cn/tags/%E4%B8%8D%E7%95%8F/"}]},{"title":"【VB超简单入门】一、写在前面","slug":"689e2cea33d35e1624a89f11bc02e86e","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.788Z","comments":true,"path":"posts/14c8d6732d41823a.html","link":"","permalink":"http://blog.deali.cn/posts/14c8d6732d41823a.html","excerpt":"","text":"前言每本书的前面总得写点什么，到我这里也自然不能免俗，前言这东西“存在即合理”，所以就随便写一点咯~ 首先这本书是给从未接触过编程的童鞋准备的，由于我学识疏浅，对VB也只是一知半解所以也只能讲一点点最基础的知识，入门之后便可以自由学习更高级的东西了~ 编程其实并不难，有很多人一看到屏幕上密密麻麻的代码就被吓呆了= =… 也有很多童鞋问我编程是不是得背很多代码= =…其实根本不用背，编程涉及的单词都是很简单的，高中的英语水平基本是可以胜任的，当然如果英语水平足够高的话可以直接阅读英文原版手册那就是更好咯，编程涉及的英语单词都是诸如：if while for end begin function之类的很简单的词汇，童鞋们不用害怕。 除了英语还有一个数学的问题，可能有些同学去看了一些编程教材书，也是被里面很多数学题吓坏了= =… 确实，编程这种东西最初被发明出来就是为了代替人力进行大量计算的，但是！现在时代不同了，我们随随便便一个手机拿出来就可以进行上亿次的计算，还用得着自己编程去算数吗= =… 况且我们不是数学家也不用算那些啊（反正我是想不明白编程算什么焚天塔、八皇后有什么用，这些是用来锻炼算法的，我们入门可以先不做这类）我们现在编程主要是为了开发实用软件，什么是实用软件啊？就是可以实实在在做出什么的软件，算那些乱七八糟数学题的简直make no sense啊= =… 下图是我用C#写的绘制分形图形，是根据书里题目写的，结果就是这个黑乎乎的东西，然并卵 分形图形就是涉及数学的东西了吧，但其实我们日常使用电脑谁会去弄这个= =… 所以总结起来就是英语和数学都是不用怕的，因为涉及到的是很少的，除非你研究到很深了，不过那时你也不会怕这些了对吧~ 下面给童鞋看看其他比较有实用性的软件哈= =… Project Manager 项目管理器这是用C#开发的软件，用于管理我正在开发的项目。目前还没有开源，所以想了解的同学可以在公众号联系我。 PassNote 密码笔记本C#开发的密码管理软件，使用AES加密算法保存，可以在软件里生成密码，保存密码。代码已开源，有兴趣的同学可以点击这里：PassNote主页 语音倒计时这是我用vb编写的一个倒计时提示软件。项目主页：http://blog.deali.cn/works/qcountdown 设置开机自动启动后。每次开机会在桌面上显示最近的事件的倒计时，并且会语音提示。就像这样： 比例换算这是我用vb编写的超级简单的一个实例软件，用于展示CQAF框架（我基于VB开发的软件快速搭建框架） 以上介绍的都是PC端的桌面软件，PC端只是软件开发的冰山一角，除此之外，还有网页端、服务器端、移动端的各种程序，由于篇幅限制，且本教程主要是关于PC端开发的，我这里就不再介绍了，有兴趣的同学可以在我的博客里找到对应的信息。或者可以通过公众号联系我。以后随着入门教程的进行，我还会以更多例子展示给童鞋们~ 啰里啰唆说到这里也差不多了，写在前面的话写完了，接下来希望童鞋们保持对编程的兴趣学习下去，不久就可以学会啦！ 有什么问题或者需要交流的同学可以通过微信公众号和我联系。微信公众号：DealiAxy 博客地址：blog.deali.cn","categories":[{"name":"VB入门教程","slug":"VB入门教程","permalink":"http://blog.deali.cn/categories/VB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"B超","slug":"B超","permalink":"http://blog.deali.cn/tags/B%E8%B6%85/"},{"name":"入门","slug":"入门","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E9%97%A8/"}]},{"title":"配置MariaDB数据库服务端远程访问","slug":"fb3819f897b4659d2c3d6f5aa2488191","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.976Z","comments":true,"path":"posts/391dbf61a14c4a40.html","link":"","permalink":"http://blog.deali.cn/posts/391dbf61a14c4a40.html","excerpt":"","text":"操作步骤开启远程访问权限连接MariaDB数据库，执行以下命令开启远程访问。 12grant all privileges on *.* to 'root'@'192.168.248.248' identified by 'password';flush privileges; 如果需要任意IP地址访问，就把IP地址换成%。 修改配置文件在网络上能搜索到的资料都只说了第一点，然而亲测之后并没有用。因为MariaDB默认绑定了本地IP。具体的文件存放位置和数据库的版本有关。我当时就找了一些时间才找到。/etc/mysql/my.cnf/mariadb.conf.d/50-server.cnf把bind-address = 127.0.0.1这一行注释掉。 重启MariaDB服务About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"},{"name":"访问","slug":"访问","permalink":"http://blog.deali.cn/tags/%E8%AE%BF%E9%97%AE/"},{"name":"服务端","slug":"服务端","permalink":"http://blog.deali.cn/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"},{"name":"远程","slug":"远程","permalink":"http://blog.deali.cn/tags/%E8%BF%9C%E7%A8%8B/"}]},{"title":"【VB超简单入门】九、程序执行顺序-1","slug":"6d46f547bd087202a08fd4a8097fd89c","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.788Z","comments":true,"path":"posts/d98472cb8a1607c0.html","link":"","permalink":"http://blog.deali.cn/posts/d98472cb8a1607c0.html","excerpt":"","text":"前言最近作者很忙啦，这个系列的教程更新得也比较慢，在公众号后台看到有同学在催更了，所以抽出时间写一篇哈~有同学担心我没时间继续更新下去，这里再重申一下，只要有人看我就会抽出时间继续更新的啦，请大家放心哈。 关于程序执行顺序我们写程序的时候，是一行一行的写的，在程序运行的时候，也是一行一行的运行，不过现实中的需求都是非常复杂的，如果只能一行一行运行的话，那我们的程序就不能叫做「程序」了，只能称为「批处理」。 在VB中，我们有三种方法来控制程序的执行顺序，分别是：判断、循环、跳转。下面我们将分别进行学习。 判断判断顾名思义就是判断啦，比如判断两个是的大小，判断用户名和密码是否匹配等等。判断又有两种类型的语句，条件语句和选择语句。 条件语句下面是一个简单的条件语句结构： 1234567if 条件1 then dosth()elseif 条件2 then dosth2()else dosth3()end if 对于 if 语句，是这样执行的，如果 条件 表达式的值为 true ，那么就执行 then 后面的代码块，如果为 false ，就执行 else 后面的语句。 举个例子： 判断两个数的大小代码功能：判断两个数的大小，输出最大的数。 12345678910dim a as integera = 1dim b as integerb = 2if a &gt; b then print aelse print bend if 代码执行结果： 12 判断用户名代码功能：判断用户名是否为管理员 1234567dim username as stringusername = inputbox(\"enter your username\")if username = \"admin\" then print \"you are super user\"else print \"you are not super user\"end if 运行结果： 输入：admin 输出：you are super user 根据季节说月份代码功能：根据用户输入的季节输出对应月份 1234567891011dim season as stringseason = inputbox(\"please enter season\")if season = \"spring\" then print \"Jan, Feb, Mar\"elseif season = \"summer\" then print \"Apr, May, June\"elseif season = \"autumn\" then print \"July, Aug, Sept\"elseif season = \"winter\" then print \"Oct, Nov, Dec\"end if 运行结果： 输入：spring 输出：Jan, Feb, Mar 选择语句在上面的例子里面，有一个根据季节说月份的，一年只有四个季节，所以问题还不大，可以写四个 if else if 语句来判断，假如现在要反过来，根据月份说季节，难道要写12个语句不成？ 为了解决代码太罗嗦的问题，VB中采用了 select 的选择语句，和C语言里的 switch 语句差不多，不过VB的 select 语句功能更强大！ 语法： 值选择，即根据变量的不同值，执行不同的操作。 12345678910select case 变量 case 1 call dosth1() case 2 call dosth2() case 3 call dosth3() case else call dosth4()end select select case 语句如何运行？VB先计算测试表达式，然后将表达式的 值与每个Case的值进行比较。若相等， 就执行与该Case相关联的语句块。如果 不止一个Case与测试表达式匹配，那么 只对第一个匹配的Case执行与之相关联 的语句块；如果在表达式列表中没有一 个值与测试表达式相匹配，则执行Case Else子句中的语句。 可以对每个Case语句设置多个比较值 123456789' 飞机棋游戏dim number as integernumber = int(rnd * 6) + 1select case number case 1,6 print \"起飞\" case 2,3,4,5 print \"不起飞\"end select 也可以用设定范围的方法来设置多个比较值 123456789101112dim score as integerscore = inputbox(\"请输入考试分数\")select case score case 90 to 100 print \"优秀\" case 80 to 90 print \"良好\" case 60 to 80 print \"及格\" case else print \"不及格\"end select 条件选择，VB的 select 语句独有的功能，很好用。相当于简化版本的 if else if 结构。 123456789101112131415dim score as integerscore = inputbox(\"请输入考试分数\")select case sorce case is &lt; 60 print \"不及格\" exit select case is &gt; 60 and is &lt; 80 print \"及格\" exit select case is &gt; 80 and is &lt; 90 print \"良好\" exit select case is &gt; 90 print \"优秀\"end select 由于时间和篇幅关系，不再举更多例子，更详细的语法介绍将在下次更新时展开，敬请关注哈~ end关于程序执行顺序本文就介绍到这里了，循环和跳转将在接下来的文章中介绍，希望同学们持续关注哈~ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"VB入门教程","slug":"VB入门教程","permalink":"http://blog.deali.cn/categories/VB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"B超","slug":"B超","permalink":"http://blog.deali.cn/tags/B%E8%B6%85/"},{"name":"入门","slug":"入门","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E9%97%A8/"},{"name":"程序执行","slug":"程序执行","permalink":"http://blog.deali.cn/tags/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C/"},{"name":"顺序","slug":"顺序","permalink":"http://blog.deali.cn/tags/%E9%A1%BA%E5%BA%8F/"}]},{"title":"刚刚入手新书了，嘿嘿，一本《Pro-C#》岂不是美滋滋","slug":"6fdc35aef46824647d1823075aaa2ee6","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.788Z","comments":true,"path":"posts/8f8585a1ceeae6d2.html","link":"","permalink":"http://blog.deali.cn/posts/8f8585a1ceeae6d2.html","excerpt":"","text":"前言用了这么久的C#，当然是要来一波《Pro C# 5.0》啦~ 这本书估计有7、8斤重，“C#圣经”的名头，真不是盖的= =… （自带滑稽）感觉不亏~ 简介（复制自豆瓣）本书是C# 领域久负盛名的经典著作，深入全面地讲解了C# 编程语言和.NET 平台的核心内容，并结合大量示例剖析相关概念。全书分为八部分：C# 和.NET 平台、C# 核心编程结构、C# 面向对象编程、高级C# 编程结构、用.NET 程序集编程、.NET 基础类库、WPF 和ASP.NET Web Forms。第6 版是对第5 版的进一步更新和完善，内容涵盖了最先进的.NET 编程技术和技巧，并准确呈现出C# 编程语言的最新变化和.NET 4.5 Framework 的新特性。本书由微软C# MVP Andrew Troelsen 编写，第6 版专门针对C# 5.0 和.NET 4.5 进行了细致入微的修订，是各层次.NET 开发人员的必读之作。 image 作者简介Andrew Troelsen世界级C#专家，微软Visual C# MVP。他是著名的微软技术咨询企业Intertech的合伙人和副总裁，该公司的客户包括微软、霍尼韦尔、美国国家航空航天局等。他曾是MSDN网站和MacTech网站.NET技术帖专家，并经常在业界主要技术会议上发表演讲和开设技术讲座。他还是公认的C#和.NET畅销技术书作家。除本书外，他还著有Pro Expression Blend 4、Pro VB 2008 and the .NET 3.5 Platform和COM and .NET Interoperability等近二十部.NET技术方面的著作。 来两张照片 image image 开始看书了，告辞~ About","categories":[{"name":"书单","slug":"书单","permalink":"http://blog.deali.cn/categories/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/tags/C/"},{"name":".Net","slug":"Net","permalink":"http://blog.deali.cn/tags/Net/"},{"name":"入手","slug":"入手","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E6%89%8B/"},{"name":"新书","slug":"新书","permalink":"http://blog.deali.cn/tags/%E6%96%B0%E4%B9%A6/"}]},{"title":"关于uwsgi服务器的管理","slug":"fb31246f69dda1d29a446553ce4c655b","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.976Z","comments":true,"path":"posts/ddf6eccba4bcbc1b.html","link":"","permalink":"http://blog.deali.cn/posts/ddf6eccba4bcbc1b.html","excerpt":"","text":"前言使用Django开发项目好是好，就是部署的时候太麻烦，使用Uwsgi服务器的话，每次修改了代码，都需要重新启动服务器才可以生效。然后uwsgi服务器的重启也挺麻烦。 看了一下官网的文档，最好是把uwsgi安装到venv虚拟环境里面，这样的话在 ps aux 的时候容易区分啦。 查看uwsgi进程1ps -aux | grep uwsgi 结束原uwsgi进程1kill -9 27543 结论这样还是麻烦，要手动去找到uwsgi的进程然后去结束，接下来应该找找有什么便捷的方式，例如把uwsgi加入service，让systemctl来管理，不过官方文档里说不建议这样的操作？ 补充还有几个其他的方式，可以简化uwsgi服务器的管理操作。 supervisor管理uwsgi服务 Supervisor（http://supervisord.org/）是用Python开发的一个client/server服务，是Linux/Unix系统下的一个进程管理工具，不支持Windows系统。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。 参考资料： - https://blog.csdn.net/qq_32402917/article/details/80169366 - https://blog.csdn.net/windy135/article/details/78945375 Emperor模式 uWSGI可以运行在’emperor’模式。在这种模式下，它会监控uWSGI配置文件目录，然后为每个它找到的配置文件生成实例 (‘vassals’)。每当修改了一个配置文件，emperor将会自动重启 vassal. 参考资料：http://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html 国际惯例，文章末尾放图片做封面啦。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://blog.deali.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"管理","slug":"管理","permalink":"http://blog.deali.cn/tags/%E7%AE%A1%E7%90%86/"}]},{"title":"在Nginx上配置https加密服务器","slug":"714900f7760022d4920f5e878975d31b","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.800Z","comments":true,"path":"posts/b8a3dd3a261ae013.html","link":"","permalink":"http://blog.deali.cn/posts/b8a3dd3a261ae013.html","excerpt":"","text":"前言最近开发微信小程序需要使用Https，于是折腾了一番。 超简单步骤1. 申请SSL证书一般云服务器提供商就会提供这种服务，我在腾讯云上申请了，十分钟就完成了。 2. 上传证书上传到一个文件夹里面 3. 配置nginx网络上的资料都是直接修改 /etc/nginx/nginx.conf 这个文件。不过我的服务器上这个文件里头没有 server 这个节点可以配置。因此需要修改 /etc/nginx/sites-available 里头的虚拟站点配置文件。 基础配置：在原有虚拟站点的基础上添加这部分配置就可以了 123456789101112server &#123; #ssl参数 listen 443 ssl; server_name example.com; #证书文件 ssl_certificate /path/to/example.com.crt; #私钥文件 ssl_certificate_key /path/to/example.com.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; #...&#125; 参考资料https://aotu.io/notes/2016/08/16/nginx-https/index.htmlhttps://blog.csdn.net/duyusean/article/details/79348613 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"服务器","slug":"服务器","permalink":"http://blog.deali.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"网络协议","slug":"网络协议","permalink":"http://blog.deali.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"运维","slug":"运维","permalink":"http://blog.deali.cn/tags/%E8%BF%90%E7%BB%B4/"},{"name":"信息安全","slug":"信息安全","permalink":"http://blog.deali.cn/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"加密","slug":"加密","permalink":"http://blog.deali.cn/tags/%E5%8A%A0%E5%AF%86/"}]},{"title":"《重构-改善既有代码》Refactoring-Improving-the-Design-of-Existing-Code","slug":"fa159c319a9bb2567abe61ecdbe99809","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.968Z","comments":true,"path":"posts/10796de41c0ede32.html","link":"","permalink":"http://blog.deali.cn/posts/10796de41c0ede32.html","excerpt":"","text":"前言前阵子当当网做活动，购买图书有优惠，于是趁机清了一小部分购物车，因而买来了这本心仪已久的《重构》。虽然到现在还没拆封，有点惭愧= =… 不过找到空闲时间一定要好好拜读一下经典。 Amazon.com ReviewYour class library works, but could it be better? Refactoring: Improving the Design of Existing Code shows how refactoring can make object-oriented code simpler and easier to maintain. Today refactoring requires considerable design know-how, but once tools become available, all programmers should be able to improve their code using refactoring techniques. Besides an introduction to refactoring, this handbook provides a catalog of dozens of tips for improving code. The best thing about Refactoring is its remarkably clear presentation, along with excellent nuts-and-bolts advice, from object expert Martin Fowler. The author is also an authority on software patterns and UML, and this experience helps make this a better book, one that should be immediately accessible to any intermediate or advanced object-oriented developer. (Just like patterns, each refactoring tip is presented with a simple name, a “motivation,” and examples using Java and UML.) Early chapters stress the importance of testing in successful refactoring. (When you improve code, you have to test to verify that it still works.) After the discussion on how to detect the “smell” of bad code, readers get to the heart of the book, its catalog of over 70 “refactorings”–tips for better and simpler class design. Each tip is illustrated with “before” and “after” code, along with an explanation. Later chapters provide a quick look at refactoring research. Like software patterns, refactoring may be an idea whose time has come. This groundbreaking title will surely help bring refactoring to the programming mainstream. With its clear advice on a hot new topic, Refactoring is sure to be essential reading for anyone who writes or maintains object-oriented software. –Richard Dragan Topics Covered: Refactoring, improving software code, redesign, design tips, patterns, unit testing, refactoring research, and tools. 豆瓣简介重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。多年前，正是本书原版的出版，使重构终于从编程高手们的小圈子走出，成为众多普通程序员日常开发工作中不可或缺的一部分。本书也因此成为与《设计模式》齐名的经典著作，被译为中、德、俄、日等众多语言，在世界范围内畅销不衰。本书凝聚了软件开发社区专家多年摸索而获得的宝贵经验，拥有不因时光流逝而磨灭的价值。今天，无论是重构本身，业界对重构的理解，还是开发工具对重构的支持力度，都与本书最初出版时不可同日而语，但书中所蕴涵的意味和精华，依然值得反复咀嚼，而且往往能够常读常新。 图片 实拍图片 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"书单","slug":"书单","permalink":"http://blog.deali.cn/categories/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"代码","slug":"代码","permalink":"http://blog.deali.cn/tags/%E4%BB%A3%E7%A0%81/"},{"name":"重构","slug":"重构","permalink":"http://blog.deali.cn/tags/%E9%87%8D%E6%9E%84/"},{"name":"改善","slug":"改善","permalink":"http://blog.deali.cn/tags/%E6%94%B9%E5%96%84/"}]},{"title":"修改\"Inotify-Watches-Limit\"提高idea性能","slug":"739e70c7f6ae0bd68ecf4dcaeab605a3","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.804Z","comments":true,"path":"posts/cf94fb7732ff527c.html","link":"","permalink":"http://blog.deali.cn/posts/cf94fb7732ff527c.html","excerpt":"","text":"官网说明 For an intelligent IDE, it is essential to be in the know about any external changes in files it is working with - e.g. changes made by VCS, or build tools, or code generators etc. For that reason, IntelliJ platform spins background process to monitor such changes. The method it uses is platform-specific, and on Linux, it is the Inotify facility. Inotify requires a “watch handle” to be set for each directory in the project. Unfortunately, the default limit of watch handles may not be enough for reasonably sized projects, and reaching the limit will force IntelliJ platform to fall back to recursive scans of directory trees. To prevent this situation it is recommended to increase the watches limit (to, say, 512K) 大意就是说idea运行的时候有一个后台进程在不断的扫描项目文件夹里面是否有文件变动，这个技术在Linux系统上是使用 Inotify 特性实现的，但是Linux系统有一个 watch handle limit，简单说就是监视大小限制， 一般来说这个大小限制都比我们的项目所需要的小，所以idea就要经常主动去扫描项目目录，而不能利用系统特性，导致变卡。 解决这个问题的办法就是我们修改一下系统配置，提高这个限制的大小。 解决方法 Add the following line to either /etc/sysctl.conf file or a new *.conf file (e.g. idea.conf) under /etc/sysctl.d/ directory: 1&gt;fs.inotify.max_user_watches = 524288 Then run this command to apply the change: 1&gt;sudo sysctl -p --system 官网说明https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit About Learn more on my WeChat Official Account：DealiAxyEvery post was in my blog：blog.deali.cn","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"修改","slug":"修改","permalink":"http://blog.deali.cn/tags/%E4%BF%AE%E6%94%B9/"},{"name":"提高","slug":"提高","permalink":"http://blog.deali.cn/tags/%E6%8F%90%E9%AB%98/"},{"name":"性能","slug":"性能","permalink":"http://blog.deali.cn/tags/%E6%80%A7%E8%83%BD/"}]},{"title":"Linux：提高鼠标滚轮的速度","slug":"7748749a9a3a2a0bea68bd653be78373","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.804Z","comments":true,"path":"posts/8cdf956303783f64.html","link":"","permalink":"http://blog.deali.cn/posts/8cdf956303783f64.html","excerpt":"","text":"安装1sudo apt install imwheel 配置1nano ~/.imwheelrc 1234567\".*\"None, Up, Button4, 4None, Down, Button5, 4Control_L, Up, Control_L|Button4Control_L, Down, Control_L|Button5Shift_L, Up, Shift_L|Button4Shift_L, Down, Shift_L|Button5 运行1imwheel 重新运行 1imwheel kill 看到提示就成功了。 添加到启动项避免每次开机都要手动运行 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"速度","slug":"速度","permalink":"http://blog.deali.cn/tags/%E9%80%9F%E5%BA%A6/"},{"name":"提高","slug":"提高","permalink":"http://blog.deali.cn/tags/%E6%8F%90%E9%AB%98/"},{"name":"鼠标","slug":"鼠标","permalink":"http://blog.deali.cn/tags/%E9%BC%A0%E6%A0%87/"},{"name":"滚轮","slug":"滚轮","permalink":"http://blog.deali.cn/tags/%E6%BB%9A%E8%BD%AE/"}]},{"title":"两款生产力工具","slug":"f879b9511615a2a1e7ddc39fc8a6398b","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.968Z","comments":true,"path":"posts/40f3cccb88e02949.html","link":"","permalink":"http://blog.deali.cn/posts/40f3cccb88e02949.html","excerpt":"","text":"albertguake","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"生产力","slug":"生产力","permalink":"http://blog.deali.cn/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/"},{"name":"工具","slug":"工具","permalink":"http://blog.deali.cn/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"配置pip国内镜像加快python第三方库安装速度~","slug":"f818f348f01110adede07fbb39c2303f","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.968Z","comments":true,"path":"posts/f6b0379da380efb2.html","link":"","permalink":"http://blog.deali.cn/posts/f6b0379da380efb2.html","excerpt":"","text":"现在这网络对于开发者来说有点不太友好，下载什么东西都慢慢，pip install慢，git clone也慢，难受…… 不过还好有各种代替的国内镜像源可以加速 临时配置在使用pip的时候加参数-i https://pypi.tuna.tsinghua.edu.cn/simple例如：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple django，这样就会从清华的镜像去安装django库，速度会快很多。 持久化配置通过修改配置文件的方式，可以让pip在每次安装的时候都使用指定的镜像源。 LinuxLinux下，修改~/.pip/pip.conf （路径不存在的话，要自己创建文件夹和文件）内容如下： 1234[global]index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com WindowsWindows的配置和Linux有一点差别，直接在user目录中创建一个pip目录，再新建文件pip.ini。（例如：C:\\Users\\Administrator\\pip\\pip.ini）内容同上。 常用的国内镜像源 清华：https://pypi.tuna.tsinghua.edu.cn/simple 阿里云：http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 华中理工大学：http://pypi.hustunique.com/ 山东理工大学：http://pypi.sdutlinux.org/ 豆瓣：http://pypi.douban.com/simple/ Anaconda配置配置清华大学源 123conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes 配置中科大源 12conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/ conda config --set show_channel_urls yes 如果某个镜像源网站挂了，换源的话记得去用户目录下把.condarc文件夹下原有的清华镜像删除掉 。 About 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"镜像","slug":"镜像","permalink":"http://blog.deali.cn/tags/%E9%95%9C%E5%83%8F/"},{"name":"速度","slug":"速度","permalink":"http://blog.deali.cn/tags/%E9%80%9F%E5%BA%A6/"},{"name":"网络协议","slug":"网络协议","permalink":"http://blog.deali.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"加快","slug":"加快","permalink":"http://blog.deali.cn/tags/%E5%8A%A0%E5%BF%AB/"}]},{"title":"在网页中使用Material-Design图标","slug":"7d5eedc5c1faffb24c924caf5ed05203","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.808Z","comments":true,"path":"posts/3f2315539872bf21.html","link":"","permalink":"http://blog.deali.cn/posts/3f2315539872bf21.html","excerpt":"","text":"什么是Material Design图标MD大家都听过的吧，就是谷歌的Material Design设计，Material Design图标就是符合MD设计语言的图标。本文通过字体的方法在网页中显示Material Design图标。 What are material icons Material design system icons are simple, modern, friendly, and sometimes quirky. Each icon is created using our design guidelines to depict in simple and minimal forms the universal concepts used commonly throughout a UI. Ensuring readability and clarity at both large and small sizes, these icons have been optimized for beautiful display on all common platforms and display resolutions. See the full set of material design icons in the Material Icons Library. 准备1. 使用谷歌在线字体这是最方便的方式： 引入在线CSS文件 12&lt;link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"&gt; 2. 使用本地字体由于某些你懂的原因，谷歌服务在大陆是无法使用的，所以我们可以把这些字体下载下来，然后在网页中引用即可。 下载地址：https://github.com/google/material-design-icons/tree/master/iconfont 新建CSS文件： 123456789101112131415161718192021222324252627282930313233343536@font-face &#123; font-family: 'Material Icons'; font-style: normal; font-weight: 400; src: url(https://example.com/MaterialIcons-Regular.eot); /* For IE6-8 */ src: local('Material Icons'), local('MaterialIcons-Regular'), url(https://example.com/MaterialIcons-Regular.woff2) format('woff2'), url(https://example.com/MaterialIcons-Regular.woff) format('woff'), url(https://example.com/MaterialIcons-Regular.ttf) format('truetype');&#125;.material-icons &#123; font-family: 'Material Icons'; font-weight: normal; font-style: normal; font-size: 24px; /* Preferred icon size */ display: inline-block; line-height: 1; text-transform: none; letter-spacing: normal; word-wrap: normal; white-space: nowrap; direction: ltr; /* Support for all WebKit browsers. */ -webkit-font-smoothing: antialiased; /* Support for Safari and Chrome. */ text-rendering: optimizeLegibility; /* Support for Firefox. */ -moz-osx-font-smoothing: grayscale; /* Support for IE. */ font-feature-settings: 'liga';&#125; 在网页中使用在Material Design图标库中寻找你想要的图标，然后通过名字就可以把图标正确显示在网页里咯。 图标库：https://material.io/tools/icons/ 使用举例： 1&lt;i class=\"material-icons\"&gt;face&lt;/i&gt; 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Web前端","slug":"Web前端","permalink":"http://blog.deali.cn/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"前端","slug":"前端","permalink":"http://blog.deali.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"图标","slug":"图标","permalink":"http://blog.deali.cn/tags/%E5%9B%BE%E6%A0%87/"},{"name":"网页","slug":"网页","permalink":"http://blog.deali.cn/tags/%E7%BD%91%E9%A1%B5/"}]},{"title":"pip和git速度太慢？配置Linux终端代理教程","slug":"f68fa2ac01f025a8ec7b789df2ffb0f4","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.968Z","comments":true,"path":"posts/4a0b793b1535e5fe.html","link":"","permalink":"http://blog.deali.cn/posts/4a0b793b1535e5fe.html","excerpt":"","text":"前言现在做开发已经严重依赖网络了，但是没办法，很多工具都是国外的，我们国内访问速度太慢了，所以配置一下终端代理就很有必要了 ProxyChains介绍ProxyChains是一个命令行预加载器，用于挂钩动态链接程序中的套接字，并通过一个或多个socks / http代理重定向它。 GitHub地址 https://github.com/rofl0r/proxychains-ng MacOS和Linux系本身通过Shadowsocks代理之后，通过PAC名单可以识别出要代理的域名。但要求代理应用必须支持Sock5，如果不支持，那么也没有办法通过Shadowsocks代理。我们的Shell控制台环境是不支持Sock代理的，只支持HTTP代理。如果我们不在终端设置 http_proxy 代理，那么我们的Shell控制台是无法通过Shadowsocks代理的。 终端设置 http_proxy 代理方法其实如果不嫌麻烦，我们可以通过在终端设置http_proxy来将Sock代理换成HTTP代理。这样Shell环境也可以曲线救国而使用Shadowsocks代理啦。 12export http_proxy='http://localhost:8888'export https_proxy='http://localhost:8888' 取消代理 12unset http_proxyunset https_proxy 如果有兴趣也可以将这个命令放在.bashrc或者.zshrc中，让我们的Shell控制台全局代理启动更加方便一些。 安装proxychains打开终端，输入以下命令 1234git clone https://github.com/rofl0r/proxychains-ng.gitcd proxychains-ng./configuremake &amp;&amp; make install 配置参数修改/usr/local/etc/proxychains.conf 中的配置 注意：Linux系不会默认生成conf文件，需要将git下来的工程中./src/proxychains.conf 里面的配置Copy到目录中，也可以手动创建，都一样没所谓如果proxychain4命令不手动制定配置文件路径，它会自动寻找配置。 1234567[ProxyList]# add proxy here ...# meanwile# defaults set to \"tor\"# socks4 127.0.0.1 9050socks5 127.0.0.1 1080 #这里设置自己的代理地址和端口#一般都是1080 测试一下proxychains4配置生效之后，我们在终端使用proxychains4加上命令就可以在终端代理了。但是这真的可以代理了么？？？答案是MacOS不行，而Linux系的同学已经OK了。 1proxychains4 curl -L tool.lu/ip 结果如图： 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"教程","slug":"教程","permalink":"http://blog.deali.cn/tags/%E6%95%99%E7%A8%8B/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"速度","slug":"速度","permalink":"http://blog.deali.cn/tags/%E9%80%9F%E5%BA%A6/"},{"name":"代理","slug":"代理","permalink":"http://blog.deali.cn/tags/%E4%BB%A3%E7%90%86/"},{"name":"网络协议","slug":"网络协议","permalink":"http://blog.deali.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"版本管理","slug":"版本管理","permalink":"http://blog.deali.cn/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"},{"name":"终端","slug":"终端","permalink":"http://blog.deali.cn/tags/%E7%BB%88%E7%AB%AF/"}]},{"title":"使用Python3新特性类型注解提高代码可读性","slug":"88172cbc9cbd6d006e6c20f4e9e6ef09","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.832Z","comments":true,"path":"posts/416d59d84c1e5e05.html","link":"","permalink":"http://blog.deali.cn/posts/416d59d84c1e5e05.html","excerpt":"","text":"先看代码12def add(x: int, y: int) -&gt; int: return x + y 没用过类型注解(Type Annotations)的同学可能咋一看有点迷糊，其实上面这段代码和下面这个代码是一样的。 12def add(x, y): return x + y 类型注解介绍我们知道 Python 是一种动态语言，变量以及函数的参数是不区分类型。Python解释器会在运行的时候动态判断变量和参数的类型，这样的好处是编写代码速度很快，很灵活，但是坏处也很明显，不好维护，可能代码写过一段时间重新看就很难理解了，因为那些变量、参数、函数返回值的类型，全都给忘记了。而且当你在读别人的代码的时候，也无法一眼看出变量或者参数的类型，经常要自己推敲，这样给学习带来了很大的障碍。 所以Python3里有了这个新特性，可以给参数、函数返回值和变量的类型加上注解，不过这个仅仅是注释而已，对代码的运行来说没有任何影响，变量的真正类型还是会有Python解释器来确定，你所做的只是在提高代码的可读性，仅此而已。 看代码12345678910111213141516def add(x: int, y: int) -&gt; int: return x + ydef area_calculation(radius: float) -&gt; float: # 变量类型注解需要 py3.6 以上版本 # Var Type Annotations need python 3.6 and later pi: float = 3.1415926 return radius * radius * piif __name__ == '__main__': print(add(1, 2)) print(add.__annotations__) print(area_calculation(2)) print(area_calculation.__annotations__) 运行结果： 12343&#123;'x': &lt;class 'int'&gt;, 'y': &lt;class 'int'&gt;, 'return': &lt;class 'int'&gt;&#125;12.5663704&#123;'radius': &lt;class 'float'&gt;, 'return': &lt;class 'float'&gt;&#125; 这里调用了函数的__annotations__属性，通过这个属性可以看到参数和返回值类型的注解。 测试注解的正确性前面说了，这个注解仅仅起到了注释的作用，不会影响代码的执行，所以即使你类型注解写错了，程序运行的时候还是会按照正确的类型去运行。然后，Python提供了一个工具方便我们测试代码里的类型注解正确性，mypy 首先安装： 1pip install mypy 使用测试： 1mypy filename.py 如果没有错误则没有输出，如果有错误则会有相应输出，如 12$ mypy demo.pydemo.py:14: error: Incompatible return value type (got \"float\", expected \"int\") About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"提高","slug":"提高","permalink":"http://blog.deali.cn/tags/%E6%8F%90%E9%AB%98/"},{"name":"特性","slug":"特性","permalink":"http://blog.deali.cn/tags/%E7%89%B9%E6%80%A7/"},{"name":"可读性","slug":"可读性","permalink":"http://blog.deali.cn/tags/%E5%8F%AF%E8%AF%BB%E6%80%A7/"},{"name":"注解","slug":"注解","permalink":"http://blog.deali.cn/tags/%E6%B3%A8%E8%A7%A3/"},{"name":"代码","slug":"代码","permalink":"http://blog.deali.cn/tags/%E4%BB%A3%E7%A0%81/"},{"name":"类型","slug":"类型","permalink":"http://blog.deali.cn/tags/%E7%B1%BB%E5%9E%8B/"}]},{"title":"Python踩坑：类与类对象类型参数传递与使用","slug":"f22b720b0d4e2d0b4bf6783ba9770871","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.964Z","comments":true,"path":"posts/da0ea68fcdcc320c.html","link":"","permalink":"http://blog.deali.cn/posts/da0ea68fcdcc320c.html","excerpt":"","text":"前言对初学者来说，Python确实简单好用，毕竟动态类型语言，不用定义就可以拿来用，类型之间随意转换简直不要太方便，因此Python用来写写小脚本，爬虫程序什么的，没什么问题。不过，一旦用来开发稍微大型一点的项目，例如搭建一个Web应用，就会遇到一些问题，一般缺乏经验的人都会陷入某些坑中。= =… 坑先说坑，函数参数类型是一坑，类与类的对象这又是一坑。虽然之前用其他静态类型语言（例如C#/Java）的时候都搞明白了的，但是换了个动态类型的Python，总会有点令人疑惑。 例子让我用代码来举例子。 首先定义两个类，都继承自内置的 Exception 类，说明这两个类是异常类。 1234567891011class Error1(Exception): def __str__(self): return 'error1'class Error2(Exception): def __init__(self): print('error2 init') def __str__(self): return 'error2' 然后再定义处理异常的方法： 12345def error(err: object): print(f'err:&#123;err.__str__()&#125;')def error2(err: Exception): print(err) 接着是测试代码： 1234567try: raise Error1except Error1 as e: error(e)if 1 != 2: error(Error2) 运行结果： 123456err:error1 File \"/home/test.py\", line 33, in &lt;module&gt; error(Error2) File \"/home/test.py\", line 19, in error print(f'err:&#123;err.__str__()&#125;')TypeError: __str__() missing 1 required positional argument: 'self' 第一个error()的结果没毛病，可是第二个接抛出异常了，看看错误信息先：TypeError: __str__() missing 1 required positional argument: &#39;self&#39;，没有提供self参数，因为这个参数不是Error2类的实例，所以自然没有self参数。 到这里应该有点明白了，就是调用error(Error2)这个方法的时候，传入的Error2参数其实是Error2这个类型本身，并不是它的对象，有点神奇，居然把一个类型当成参数用了。 那要怎么解决呢，很简单，传入Error2的对象就行了。代码如下： 12if 1 != 2: error(Error2()) 运行结果 12error2 initerr:error2 没毛病了，上面代码还有个error2方法没有使用呢，来试试看。 12error2(Error2)error2(Error2()) 运行结果 123&lt;class '__main__.Error2'&gt;error2 initerror2 可以看出，使用print(Object)的时候，如果是一个类型，就打印这个类型的信息，是类型的对象时，才会打印Object.__str__()返回的结果。搞明白了之后其实很简单，但是Python对函数参数没有限制，即使给方法加了type hints，也只是起到了提示作用，不会做真正的限制或者是隐式转换，所以有时候代码写久了头晕脑胀，就容易掉进动态类型坑里了 T_T… 国际惯例，放图片： About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"类型","slug":"类型","permalink":"http://blog.deali.cn/tags/%E7%B1%BB%E5%9E%8B/"},{"name":"对象","slug":"对象","permalink":"http://blog.deali.cn/tags/%E5%AF%B9%E8%B1%A1/"}]},{"title":"LittleWhiteOne基本设计","slug":"8e17209929f7426d19b4ccfbd11d2835","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.832Z","comments":true,"path":"posts/ff681baa212fee18.html","link":"","permalink":"http://blog.deali.cn/posts/ff681baa212fee18.html","excerpt":"","text":"LittleWhite One魔改chatterbot框架实现的新版小白~ 简介 core：核心框架，魔改版chatterbot corpus：英文和中文训练语料 nltk_data：需要用到的nltk数据集 文本相似度算法 LevenshteinDistance SpacySimilarity JaccardSimilarity Levenshtein Distance算法中文名：莱文斯坦距离参考资料：https://en.wikipedia.org/wiki/Levenshtein_distance Levenshtein distance是表征或度量两段字符串的差异度的概念,以单词kitten和sitting为例，定义：替换(substitution)、插入(insert)和删除(delete)三种标准编辑手段来消除这两个词之间的差异，每经过1次标准编辑手段，Levenshtein distance增计一次，则kitten需经过2次替换、1次插入新字符，来得到sitting这个单词，因此所谓的Levenshtein distance应为3。按照其定义，该距离和字符串差异度呈正比关系。 定义：两个字符串a，b之间的莱文斯坦距离 编辑距离是NLP基本的度量文本相似度的算法，可以作为文本相似任务的重要特征之一，其可应用于诸如拼写检查、论文查重、基因序列分析等多个方面。但是其缺点也很明显，算法基于文本自身的结构去计算，并没有办法获取到语义层面的信息。 SpacySimilarity算法 SpacySimilarity属于语义相似度的计算方法。 参考资料： https://spacy.io/api/doc/#similarity 先将句子的词向量求平均，获取句子的语义表示，然后计算两个句子的语义表示的余弦相似度。 JaccardSimilarity算法参考资料：https://en.wikipedia.org/wiki/Jaccard_index 给定两个集合A,B，Jaccard 系数定义为A与B交集的大小与A与B并集的大小的比值，定义如下： 当集合A，B都为空时，J(A,B)定义为1。 与Jaccard 系数相关的指标叫做Jaccard 距离，用于描述集合之间的不相似度。Jaccard 距离越大，样本相似度越低。公式定义如下： todo算法优化 试用另外的基于词向量的几种计算文本相似度方法 ： 使用词向量求平均计算相似度 词向量tfidf加权求平均计算相似度 词向量加权-PCA计算相似度 基于深度学习的方式，计算句子的语义相似度 训练优化 使用新的大容量语料训练 接入tai套取聊天语料 结合LittleWhite v3的双引擎从用户对话中学习","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://blog.deali.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"产品","slug":"产品","permalink":"http://blog.deali.cn/tags/%E4%BA%A7%E5%93%81/"},{"name":"设计","slug":"设计","permalink":"http://blog.deali.cn/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"基本","slug":"基本","permalink":"http://blog.deali.cn/tags/%E5%9F%BA%E6%9C%AC/"}]},{"title":"PHP-Ajax-跨域问题最佳解决方案","slug":"f049ff68569c62189a750b8ed2fb2fe5","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.964Z","comments":true,"path":"posts/b3ae5396b2af38be.html","link":"","permalink":"http://blog.deali.cn/posts/b3ae5396b2af38be.html","excerpt":"","text":"前言Ajax跨域问题在开发中非常常见。例如网页的域名是client.abc.com，而请求的域名是server.abc.com。如果直接使用ajax访问，会有以下错误： XMLHttpRequest cannot load http://server.abc.com/server.php. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.Origin &apos;http://client.abc.com&apos; is therefore not allowed access.最简单的解决1234567header('content-type:application/json;charset=utf8'); // 指定允许其他域名访问 header('Access-Control-Allow-Origin:*'); // 响应类型 header('Access-Control-Allow-Methods:POST'); // 响应头设置 header('Access-Control-Allow-Headers:x-requested-with,content-type'); 1、允许单个域名访问指定某域名client.abc.com跨域访问，则只需在server.abc.com/a.php文件头部添加如下代码： 1header('Access-Control-Allow-Origin:http://client.abc.com'); 2、允许多个域名访问指定多个域名，在server.php文件头部添加如下代码： 1234567891011$origin = isset($_SERVER['HTTP_ORIGIN'])? $_SERVER['HTTP_ORIGIN'] : '';//$_SERVER['HTTP_ORIGN']获得请求访问的域名$allow_origin = array( 'http://client.abc.com', 'http://client2.abc.com');if(in_array($origin, $allow_origin))&#123;header('Access-Control-Allow-Origin:'.$origin);&#125; 3、允许所有域名访问允许所有域名访问则只需在php文件头部添加如下代码： 1header('Access-Control-Allow-Origin:*'); About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"PHP","slug":"PHP","permalink":"http://blog.deali.cn/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://blog.deali.cn/tags/PHP/"},{"name":"问题","slug":"问题","permalink":"http://blog.deali.cn/tags/%E9%97%AE%E9%A2%98/"},{"name":"解决方案","slug":"解决方案","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"name":"跨域","slug":"跨域","permalink":"http://blog.deali.cn/tags/%E8%B7%A8%E5%9F%9F/"}]},{"title":"嘿嘿，我也是拥有小红书的人了~《JavaScript高级程序设计》入手","slug":"91fb35a1f02e3124ac4d56490406724b","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.836Z","comments":true,"path":"posts/92cf632cbae0161c.html","link":"","permalink":"http://blog.deali.cn/posts/92cf632cbae0161c.html","excerpt":"","text":"前言嘿嘿，说我是个前端开发者你们还不信~这回小红书入手，真·前端无疑了。 作者简介Nicholas C. Zakas（尼古拉斯•泽卡斯）世界顶级Web技术专家，现为雅虎公司界面呈现架构师，负责My Yahoo!和雅虎首页等大访问量站点的设计。尼古拉斯拥有丰富的Web开发和界面设计经验，曾经参与许多世界级大公司的Web解决方案开发。他还是High Performance JavaScript一书的作者，并与他人合作撰写了Professional Ajax和Even Faster Web Sites。尼古拉斯拥有梅里马克学院计算机科学学士学位和埃迪柯特学院的MBA学位。他的个人网站是www.nczonline.net，他的Twitter别名是@slicknet。 简介本书是JavaScript 超级畅销书的最新版。ECMAScript 5 和HTML5 在标准之争中双双胜出，使大量专有实现和客户端扩展正式进入规范，同时也为JavaScript 增添了很多适应未来发展的新特性。本书这一版除增加5 章全新内容外，其他章节也有较大幅度的增补和修订，新内容篇幅约占三分之一。全书从JavaScript 语言实现的各个组成部分——语言核心、DOM、BOM、事件模型讲起，深入浅出地探讨了面向对象编程、Ajax 与Comet 服务器端通信，HTML5 表单、媒体、Canvas（包括WebGL）及Web Workers、地理定位、跨文档传递消息、客户端存储（包括IndexedDB）等新API，还介绍了离线应用和与维护、性能、部署相关的最佳开发实践。本书附录展望了未来的API 和ECMAScript Harmony 规范。本书适合有一定编程经验的Web 应用开发人员阅读，也可作为高校及社会实用技术培训相关专业课程的教材。 注意这个黑体字，嘿嘿，*“有一定编程经验的Web开发人员”*，不就是在说我吗 = =… (不要脸状态) 言归正传言归正传，这本书确实是相当权威的JS参考书，我们一般把它和“犀牛书”放在一起，称之为“JS二重奏”，实乃初窥JS门径进阶的必备“字典”啊～问题不大，我正好拜读一番，免得有人疑心我“前端”之名有假 （逃….. 封面 拍个照片 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"书单","slug":"书单","permalink":"http://blog.deali.cn/categories/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"产品","slug":"产品","permalink":"http://blog.deali.cn/tags/%E4%BA%A7%E5%93%81/"},{"name":"入手","slug":"入手","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E6%89%8B/"},{"name":"前端","slug":"前端","permalink":"http://blog.deali.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"网络协议","slug":"网络协议","permalink":"http://blog.deali.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"程序设计","slug":"程序设计","permalink":"http://blog.deali.cn/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"拥有","slug":"拥有","permalink":"http://blog.deali.cn/tags/%E6%8B%A5%E6%9C%89/"}]},{"title":"国产Linux发行版Deepin浅度体验","slug":"92243eece363e8b042b1864ef2b4bb9c","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.840Z","comments":true,"path":"posts/7f153006775a3bef.html","link":"","permalink":"http://blog.deali.cn/posts/7f153006775a3bef.html","excerpt":"","text":"前言昨天系统又重装了两次，所以没时间写推文了，今天刚刚搭完就来写了。这几天电脑升级硬件之后系统还没配置好，只是装了个Win10，我还是更喜欢在Linux环境工作，又看到Deepin的界面设计得很好看，于是就装了一个试试效果。但是用的时间还不长，所以只能是浅度体验。 系统截图两种模式的桌面。时尚模式（类似于Mac系统） 高校模式（类似与Windows系统） Dashboard（所有应用程序） 分组查看 多任务视图 控制面板 应用商店 测评开始本文主要包括：用户界面、应用程序、开发体验、系统性能细节每个小环节都给出一个评分，满分10分。 用户界面评分：9.0 （少一分怕你骄傲） 从上面的截图就可以看出来，Deepin的用户界面水平那是真的高，实际使用体验真的很爽，没有很多花哨的特效，界面清爽又不失个性（适合装逼XDD…）Deepin的这个桌面环境叫做DDE，不是和其他“国产发行版”一样拿Gnome或者KDE换个主题就说是自己做的。这个DDE是使用Qt从头搭建的，以前Deepin的桌面是HTML5开发的，所以比较卡顿，使用Qt重写的这个桌面在使用过程中没有遇到过卡顿。 应用程序评分：8.5 （日常使用毫无压力，不用再切换到Windows） 操作系统最重要的就是应用数量和质量了，Windows之所以成为桌面操作系统的霸主，就是因为庞大的应用软件支持，Windows Phone系统为何衰落，根本原因也是因为缺乏足够的应用软件。作为开发者，我其实并不关心Linux桌面系统的推广，我用Linux单纯是因为开发的方便，Linux下所有鼠标能完成的操作，命令肯定可以做到，而反过来就不行。上面有一张截图是Deepin的应用商店，赫赫在目的就是QQ的图标，事实上，Deepin安装完就已经自带QQ这个应用了，长期以来，Linux平台上运行QQ一直是个大问题，因为腾讯官方不会再推出任何QQ的客户端了，所以不是用WebQQ就是自己去折腾WineQQ，非常麻烦，而且不稳定，Deepin是直接给你配置好了，开箱即用，也足够稳定。关于Windows平台软件的问题，Deepin是购买了Crossover的授权，然后把Windows上的常用软件（例如微信、PS、迅雷、百度云、爱奇艺）都配置好了，在应用商店里就能直接安装了，非常的方便。虽然应用商店是很方便的，但是作为程序猿大部分时间还是用命令行比较多，我发现Deepin的包管理器apt好像有点迷，因为当我apt update检查到有新的软件包可以更新的时候，用apt upgrade更新它却提示我通过apt更新会出错，让我在控制面板里面选择系统更新…原来是系统更新不能通过命令行的apt直接更新，要在控制面板里面操作= =，有点麻烦。 开发体验评分：8.0 关于开发工具的安装：非常方便，在应用商店里面都有，vscode、sublime、jetbrains全家桶一应俱全，都是一键安装。（虽然jb全家桶也有个小工具可以管理，但是商店里安装这些真是方便，这个给好评） 实际开发体验，并没有多少，只用了几天，Android Studio还没安装，只安装了VSCode写前端代码和PHP，还有pycharm，jb家的东西真是好，不仅体验好，还跨平台。日常开发没什么问题，npm和pip用起来都OK，Python我用的是anaconda管理的，没毛病。 不过在论坛什么的看到说Deepin的源里面这些工具版本不够新的情况，这个好办，Deepin不是基于Debian构建的吗，直接用Debian的源不就好了。 系统性能评分：6.5 （性能表现比较中庸） Deepin这么好看的界面还是比较吃配置的，实际用起来感觉不如Debian配上Gnome或者KDE，我的电脑是i5 6代+16G内存的，Deepin也是安装在SSD上面，但是感觉还是比较奇怪，没有Debian那么舒服。 体验细节评分：3.0 首先是开机，从开机到进入桌面，没什么毛病，很快，大概15秒内，但是进到桌面却加载不出壁纸？？这个加载壁纸的过程需要1分钟左右，不过这段时间可以自由操作，没多大影响，就是壁纸是一片黑，但是对于轻微强迫症的我来说不能忍。 还有关于电源管理，Deepin的电源管理绝对是有问题的，因为，没办法正常关机和重启！对，你没有听错，关机和重启在我的电脑上是不行的。具体表现为：无论在菜单中选择关机还是在终端输入命令关机，都会卡在这个界面，鼠标可以移动，但是界面卡住了，并不能关机成功，我只好强制断电。 如果说前面的桌面壁纸加载还算是小问题的话，这个应该是大问题了，这个问题直接导致了Deepin在我的电脑上存活不过3天。 还有网络也有很大的问题，在电脑从睡眠状态中唤醒之后，WiFi连接就断开了，并且无法重连！根本搜索不到任何WiFi信号！，在论坛上有人说网线还能使用，在我的电脑上不行。并且这个问题不是只有我的电脑才有，很多人都有。 （还有一些其他小毛病，不想再吐槽了） 总结最后，Deepin在上面提到的几个方面里的综合评分为：7分数还是不错，因为好看的用户界面和丰富的应用程序拉高了平均分，我还是比较看好Deepin这个发行版的，有很大的潜力，就是到现在还不是很稳定，很多细节不完善。把电源管理和性能优化好，那绝对又是Linux发行版一大霸主。引用知乎一个回答：如果Deepin都不能成功，Linux桌面就完了。Deepin真的是用心在做的系统，希望越来越好，我在等能回去Deepin的一天。 写了这么多，好像不错。不过，溜了，安装大蜥蜴(OpenSUSE)去了（逃 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Linux评测","slug":"Linux评测","permalink":"http://blog.deali.cn/categories/Linux%E8%AF%84%E6%B5%8B/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"发行版","slug":"发行版","permalink":"http://blog.deali.cn/tags/%E5%8F%91%E8%A1%8C%E7%89%88/"},{"name":"体验","slug":"体验","permalink":"http://blog.deali.cn/tags/%E4%BD%93%E9%AA%8C/"},{"name":"浅度","slug":"浅度","permalink":"http://blog.deali.cn/tags/%E6%B5%85%E5%BA%A6/"},{"name":"国产","slug":"国产","permalink":"http://blog.deali.cn/tags/%E5%9B%BD%E4%BA%A7/"}]},{"title":"梦中之情，何必非真——天下岂少梦中人","slug":"e97e84add1ec8917d7fc155713802ae4","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.960Z","comments":true,"path":"posts/ccde43fb0a77ba7d.html","link":"","permalink":"http://blog.deali.cn/posts/ccde43fb0a77ba7d.html","excerpt":"","text":"（记一场精彩的梦。） 故事里，是21世纪的社会，远在千年之后的世界里，科技高度发达，很多人喜欢玩一种“漂流瓶”的游戏，把一段记忆封装进时光胶囊之后扔进时光隧道里，任其漂流，女主的“时光胶囊”刚好透过时光隧道来到千年之前——也就是21世纪的男主家中，男主无意在家中发现了时光胶囊，但是却无法打开，一个偶然的机会，男主心情不好，拿着时光胶囊默默发呆，突然他的脑海里闪现出一段不清晰的记忆，就这样男主在无意中打开了时光胶囊，原来打开的条件是要和时光胶囊主人的心理状态产生共鸣。 穿越千年的一段记忆一点一滴呈现在男主面前，女主的一切都深深地在男主地脑海里留下烙印，男主对这个千年后的人产生了无可救药的迷恋，他用尽他所能做的一切在世界上留下痕迹，以及对女主的爱。 千年后的那个世界里，女主竟然神奇地感受到了在千年以前，有这样一个男生，在打开自己的时光胶囊之后如此深爱着自己，女主根据时光机中留下来的男主的痕迹，一点点还原男主的形象和性格，在这个过程中竟也慢慢爱上这个相隔千年的人。 两人心心相印，无奈彼此之间隔着千年的时光。在千年后科技高度发达的社会中，人类以及研究出穿越时空的科技，但是这是被世界政府严格禁止的行为，因为时空穿梭会导致在目标世界中产生巨大的时空漩涡，严重扰乱目标世界的正常社会秩序，甚至造成大规模的伤亡，这已经会严重改变历史轨迹了。因此虽然男主女主彼此甘心首疾，但是却无法相见，甚至不能说上一句话。 女主的朋友是性格古怪的科学家，他被女主和男主的精神感动到了，于是决定帮助女主，让她回到千年以前男主的那个世界。 但是穿越时空会产生巨大时空漩涡，如果不解决这个问题，那么是不能穿越回去的，女主也不愿意因为自己的自私而导致成千上万的无辜的人的丧生。 这个天才科学家利用他发明的空间导弹巧妙地解决了这个问题，时空穿梭的时候因为扰乱了时空，所以产生巨大的时空漩涡，而空间导弹的原理则是利用空间的不平坦性质制导，利用曲率引擎驱动，运动过程和引爆之后都会改变空间的曲率。为了试验这个新发明，也为了帮助女主，科学家孤身前往千年前的世界，为了不产生时空漩涡，他是冒险从黑洞中的时空隧道过去的，这样的隧道开启需要很大的能量，并且只能允许一个人通过，非常危险，科学家花光所有积蓄才得以凑足资金得到足够开启隧道的能量。 或许是上天的眷顾，科学家成功回到一千年前的世界，穿越黑洞隧道回来的他一无所有，但是有着超越时代的非凡智慧，很快就找到一份薪酬不错的工作，并且成功找到男主，告诉他自己的来历，男主表示很惊讶，但是之后便是狂喜，因为终于有机会和朝思暮想的姑娘见面了。 科学家一边攒钱，一边收集制造时空导弹的材料，经过一年多的努力，终于把时空导弹和时光机制造出来。 他开启时光机，将坐标定位到女主的家中，时空穿梭开始了，地球上真的出现了巨大的时空漩涡，世界各地一瞬间出现各种台风、飓风、龙卷风，地壳受此影响也开始剧烈运动，就在千钧一发的时候，女主穿过时空漩涡来到这个世界上，科学家向时空漩涡发射空间导弹。 他成功了！ 空间导弹的引爆成功阻止了时空扰动，地球上重新恢复了宁静，男女主角只是第一次见面，却像是分开多年的情侣一般，相拥而泣，久久不肯分开。 然而如此巨大的时空扰动也引起了星际时空警察的注意，因为自从时空穿梭技术出现以来，还没有人成功穿越时空，只有像开头的时空胶囊那样没有生命的物品成功穿越时空，并且人类穿越时空是被严令禁止的。因此星际时空警察觉得事情非同小可，立刻开启黑洞里的大隧道，男主女主才见面没多久，大量的时空警察就纷纷从时空隧道里来到一千年前的世界里，准备抓捕男女主角和科学家。 还好科学家留了一手，来到这个世界后制造了强磁屏障，让他们暂时躲过了时空警察的追捕，但这始终不是长久之计。在这暂时的宁静里，男女主角四目相对，相顾无言，但是彼此都懂得对方的心。为了这跨越千年的恋情，所有的一切，是值得的…… （End） 了解更多有趣的操作请关注我的微信公众号：DealiAxy 每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"微小说","slug":"微小说","permalink":"http://blog.deali.cn/categories/%E5%BE%AE%E5%B0%8F%E8%AF%B4/"}],"tags":[]},{"title":"广州的夏天格外的热：9月实训心得小结","slug":"92c2b28176a785738a994c2d5f4d306e","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.848Z","comments":true,"path":"posts/2744f47f56537894.html","link":"","permalink":"http://blog.deali.cn/posts/2744f47f56537894.html","excerpt":"","text":"emmmm不知不觉间来广州已经两个多星期了，本来打算一周写一篇小结的，结果上个星期感冒了在宿舍休息，前几天又中秋假期出去玩了，就一直拖着了…… 这个实训说好听是什么实习，结果就是学校和培训班合作，把我们塞到这里来集中体验培训，但是又不会教你很多真正有用的东西，谁要是觉得好就交钱上正式培训班，住宿贼贵，环境还贼差，还好只有一个月的时间，咬咬牙就过去了，其中的猫腻不言而喻…… 说说学习的内容吧 第一周学了一些和HTML5和CSS3布局，最后老师教了一点点js吧，其实就是很基础的入门知识了，我就当复习了，期间做了音乐相册、模拟太阳系行星运动、打地鼠游戏，以及我前几天写的网易云歌单音乐下载工具~ 啊对了， 第一周的课设还做了一个购物网站，后台我用go写的，只做了用户登录注册和商品数据获取 第二周就是学Linux运维啦，因为感冒请了好多天假，所以上课的内容我也不太清楚，但看布置的作业都是很基础的东西，之前就会了 接下来的两周都要学Java了，看了一下大纲就是spring boot啦，可能会讲一点点微服务相关的知识，不过应该不会有很多干货，学技术还是要靠自己自学~ 不得不说CSS3动画太好用了 下面贴一下图片音乐相册 打地鼠用js写的小游戏，手机上玩的话好像可以玩到14分+，电脑上我只能玩到6分这样子，手速太慢了 在线试玩：http://cloud.deali.cn/sept/day04/打地鼠/ 太阳系典型CSS3动画啦 网易云歌单音乐下载工具这个其实和教的内容没啥关系，毕竟主要是用python爬虫做的 分享这里再贴一下之前课前分享的ppt吧 关于生产力工具的hhh 比较随意的做了几页ppt，介绍了基本的几种~ 因为分享的时候我是以讲为主，所以ppt里面只有关键词，需要的同学可以自行Google搜索或者私信我哈~ 排名第一的当然是Google啦： 然后是我比较喜欢的Linux发行版： 还有针对大家都在用的Windows系统： last还有半个月啦，加油吧 广州真的好热好热啊，感觉有点顶不住，白天都没办法出门，是遮阳伞也挡不住的高温，还有这大暴雨说下就下，下完还是热~ 3号线能把人挤扁，一有什么节假日高铁票火车票就都不用想了，刚开售就被抢光了，人多资源少，还是很难顶的。 广州地铁价格真的好贵，随便坐一下就要六七块钱，相比之下，重庆轨道交通不知道好了多少~ 还不挤。不过广州的公共交通确实方便，去哪都有地铁和公交车，就是有些地方共享单车都太破了，我这可是天河啊，市中心共享单车管理都这么乱吗。。 还有diss一下这边的社区医院，太坑了，医生连把脉都不会，就只会让你去抽血查抗体，一次两百块，然后再开一堆乱七八糟的药。。感冒的话还是自己根据症状吃点药吧，不行就去大医院，社区医院是真的很坑。 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"实训","slug":"实训","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E8%AE%AD/"},{"name":"小结","slug":"小结","permalink":"http://blog.deali.cn/tags/%E5%B0%8F%E7%BB%93/"},{"name":"心得","slug":"心得","permalink":"http://blog.deali.cn/tags/%E5%BF%83%E5%BE%97/"},{"name":"广州","slug":"广州","permalink":"http://blog.deali.cn/tags/%E5%B9%BF%E5%B7%9E/"}]},{"title":"Using-python-virtual-environment-on-Windows","slug":"e8da201d102dacec65d6a99b6374b80c","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.960Z","comments":true,"path":"posts/e982c89b9a0e5042.html","link":"","permalink":"http://blog.deali.cn/posts/e982c89b9a0e5042.html","excerpt":"","text":"关于部分推文使用英文写作最近把公众号推给Github上认识的外国朋友，他们虽然关注了，但是表示并不能看懂中文，所以我答应他们试试看用英文写作，一来避免他们觉得无聊取关（逃，二来练习一下惨不忍睹的英文 = =…，文章中难免错漏百出，请朋友们多多包涵和给予指正，谢谢！ Why am I writing in EnglishRecently I recommended my WeChat official account and blog to some friends, but they are not able to read Chinese, so I would like to try to write blogs in English and having more communication with them. Install virtual environmentIf you want to use virtualenv on a path which contain spaces, you should install win32api Using pip to install virtualenv 1pip install virtualenv Create virtual environmentOpen shell and cd to your project path.Then use the following command to create virtual environment. 1virtualenv env_name env_name is the name of the virtual environment, such as env Activate the virtual environmentAt first you should know your virtualenv name, usually it’s envthen change the dir to your project root.Command: 1env\\scripts\\activate after that, a sign will display before the cmd to show that you enter the virtualenv successfully. Now you can install any python packages in the virtualenv and do some other operations. Quit the virtual environmententer 1deactivate to quit the virtual environment. About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"}]},{"title":"Python中的三元表达式","slug":"01a9275263d5b06512e4eafad9281108","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.616Z","comments":true,"path":"posts/f08e1f2880dfea5e.html","link":"","permalink":"http://blog.deali.cn/posts/f08e1f2880dfea5e.html","excerpt":"","text":"一般语言的三元表达式都是这种形式： 1234result = statement ? true : false// For examleresult = a &gt; b ? a : b Python中的三元表达式比较特殊，用下面这种形式 1234result = true if statement else false# For exampleresult = a if a &gt; b else b About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"表达式","slug":"表达式","permalink":"http://blog.deali.cn/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"New-books-bought-《Programming-Python》","slug":"97f95857e2e9503eadac77752e5e6cc9","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.872Z","comments":true,"path":"posts/2ad8aa0c201f057d.html","link":"","permalink":"http://blog.deali.cn/posts/2ad8aa0c201f057d.html","excerpt":"","text":"Hello最近Python代码写了好多，自觉得编程基础还是比较差，于是买了这套Python教程，上下册，看了目录觉得这套教程写得很详细，藉由这套书来补一补python基础~ IntroductionIf you’ve mastered Python’s fundamentals, you’re ready to start using it to get real work done. Programming Python will show you how, with in-depth tutorials on the language’s primary application domains: system administration, GUIs, and the Web. You’ll also explore how Python is used in databases, networking, front-end scripting layers, text processing, and more. This book focuses on commonly used tools and libraries to give you a comprehensive understanding of Python’s many roles in practical, real-world programming. You’ll learn language syntax and programming techniques in a clear and concise manner, with lots of examples that illustrate both correct usage and common idioms. Completely updated for version 3.x, Programming Python also delves into the language as a software development tool, with many code examples scaled specifically for that purpose. Topics include: Quick Python tour: Build a simple demo that includes data representation, object-oriented programming, object persistence, GUIs, and website basics System programming: Explore system interface tools and techniques for command-line scripting, processing files and folders, running programs in parallel, and more GUI programming: Learn to use Python’s tkinter widget library Internet programming: Access client-side network protocols and email tools, use CGI scripts, and learn website implementation techniques More ways to apply Python: Implement data structures, parse text-based information, interface with databases, and extend and embed Python 贴个照片 About","categories":[{"name":"书单","slug":"书单","permalink":"http://blog.deali.cn/categories/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"}]},{"title":"在Manjaro上配置国内源","slug":"98170f53a456786d85e99332450ee62d","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.880Z","comments":true,"path":"posts/df0d89a35f9cc686.html","link":"","permalink":"http://blog.deali.cn/posts/df0d89a35f9cc686.html","excerpt":"","text":"前言之前我一直用官方源的，但是最近发现官方源变慢了，于是想要切换国内源，顺手做个笔记。 操作使用以下命令，生成可用中国镜像站列表： 1sudo pacman-mirrors -i -c China -m rank 刷新完列表之后会弹出来一个框让你选择软件源，这里的就都是国内源了，选择一个喜欢的就行（当然要选择两个以上也没问题。） 日常桌面截图","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"}]},{"title":"Jupyter-Notebook-简单配置","slug":"e7ab6f2b784b0d6950718744f11b50bb","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/ce5927dcc17dca4d.html","link":"","permalink":"http://blog.deali.cn/posts/ce5927dcc17dca4d.html","excerpt":"","text":"安装主题默认主题太丑了，必须换个好看的主题，pip安装： 1pip install jupyterthemes 装完之后： 123456# 列出所有主题jt -l# 设置主题# -T 启用工具栏# -N 启用名称栏jt -t 主题名称 -T -N 自动补全安装nbextensions12pip install jupyter_contrib_nbextensionsjupyter contrib nbextension install --user 安装nbextensions_configurator12pip install --user jupyter_nbextensions_configurator jupyter nbextensions_configurator enable --user 重启Jupyter Notebook就能看到多出来一个Nbextensions标签页。 启用插件： 就阔以了~ 附上我的界面","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"}]},{"title":"WSL小技巧：切换到zsh以及加入右键菜单","slug":"e24c423475de2eeed2b8c7e014dcf675","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/5bf47bfac6f506c8.html","link":"","permalink":"http://blog.deali.cn/posts/5bf47bfac6f506c8.html","excerpt":"","text":"切换到zsh说明在 Windows Subsystem for Linux 中，执行 chsh -s /bin/zsh 并不能成功地将默认 shell 修改为 zsh。在打开 WSL 时，默认 shell 仍然为 bash。 这是因为WSL 在启动时并没有执行 login 相关的组件，而这些组件和默认 shell 有关。Microsoft 已经知晓了这个问题，但并没有计划去解决。 方法我们可以通过一个简易的 workaround 可以使在打开 WSL 时同时打开 zsh。在 ~/.bashrc 中添加 1bash -c zsh 参考资料https://github.com/Microsoft/WSL/issues/477 加入右键菜单 打开运行，输入 regedit 运行注册表编辑器 找到注册表中这个文件夹\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\ 选中shell这个文件夹右键新建一个项，双击默认这个值，改为WSL Shell Here，这个是右键菜单显示出来的名字 在默认下面加一个字符串值，名称为Icon，双击将它的值改为你想要的图标的地址，可以是.ico和.exe文件 在 WSL Shell Here 下新建一个项，项名称为command，将这个项的默认的值改为Ubuntu的exe文件地址，我的是&quot;C:\\Windows\\System32\\bash.exe&quot;，注意两边要双引号 Ps: 为什么今天的截图是这样的呢 = =..原因：外出中。只能用笔记本上的Windows啦 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"切换","slug":"切换","permalink":"http://blog.deali.cn/tags/%E5%88%87%E6%8D%A2/"},{"name":"右键","slug":"右键","permalink":"http://blog.deali.cn/tags/%E5%8F%B3%E9%94%AE/"},{"name":"菜单","slug":"菜单","permalink":"http://blog.deali.cn/tags/%E8%8F%9C%E5%8D%95/"},{"name":"技巧","slug":"技巧","permalink":"http://blog.deali.cn/tags/%E6%8A%80%E5%B7%A7/"},{"name":"加入","slug":"加入","permalink":"http://blog.deali.cn/tags/%E5%8A%A0%E5%85%A5/"}]},{"title":"Using-VirtualenvWrapper-to-manage-your-virtual-environment","slug":"9f5f0d5be37361e60fe5adee4ee8d06c","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.880Z","comments":true,"path":"posts/f477476525879750.html","link":"","permalink":"http://blog.deali.cn/posts/f477476525879750.html","excerpt":"","text":"Install VirtualenvWrapperon Windows 1pip install virtualenvwrapper-win on Linux 1pip install virtualenvwrapper Configure on Windowsconfigure WORKON_HOME as the path to save your virtual environment. New virtual environment1mkvirtualenv bobbyvir All virtual environments will be installed into path your configured for WORKON_HOME. See all virtual environments1workon Enter virtual environment1workon venv_name Quit the virtual environment1deactivate About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[]},{"title":"Python中获取异常（Exception）信息","slug":"d937a655fa80f0dbc8a1c4cc00934214","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/b7fa8af2f51ceae2.html","link":"","permalink":"http://blog.deali.cn/posts/b7fa8af2f51ceae2.html","excerpt":"","text":"前言异常信息的获取对于程序的调试非常重要，可以有助于快速定位有错误程序语句的位置。下面介绍几种python中获取异常信息的方法，这里获取异常（Exception）信息采用try…except…程序结构。如下所示 1234567try: ...except Exception, e: ... 1、str(e)返回字符串类型，只给出异常信息，不包括异常信息的类型，如1/0的异常信息 ‘integer division or modulo by zero’ 2、repr(e)给出较全的异常信息，包括异常信息的类型，如1/0的异常信息 “ZeroDivisionError(‘integer division or modulo by zero’,)” 3、e.message获得的信息同str(e) 4、采用traceback模块 需要导入traceback模块，此时获取的信息最全，与python命令行运行程序出现错误信息一致。使用traceback.print_exc()打印异常信息到标准错误，就像没有获取一样，或者使用traceback.format_exc()将同样的输出获取为字符串。你可以向这些函数传递各种各样的参数来限制输出，或者重新打印到像文件类型的对象。 示例如下12345678910111213141516171819202122232425262728import tracebackprint '########################################################'print \"1/0 Exception Info\"print '---------------------------------------------------------'try: 1/0except Exception, e: print 'str(Exception):\\t', str(Exception) print 'str(e):\\t\\t', str(e) print 'repr(e):\\t', repr(e) print 'e.message:\\t', e.message print 'traceback.print_exc():'; traceback.print_exc() print 'traceback.format_exc():\\n%s' % traceback.format_exc()print '########################################################'print '\\n########################################################' print \"i = int('a') Exception Info\"print '---------------------------------------------------------'try: i = int('a')except Exception, e: print 'str(Exception):\\t', str(Exception) print 'str(e):\\t\\t', str(e) print 'repr(e):\\t', repr(e) print 'e.message:\\t', e.message print 'traceback.print_exc():'; traceback.print_exc() print 'traceback.format_exc():\\n%s' % traceback.format_exc()print '########################################################' 运行结果 参考资料https://www.cnblogs.com/klchang/p/4635040.html","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"获取","slug":"获取","permalink":"http://blog.deali.cn/tags/%E8%8E%B7%E5%8F%96/"},{"name":"信息","slug":"信息","permalink":"http://blog.deali.cn/tags/%E4%BF%A1%E6%81%AF/"}]},{"title":"Manjaro-Linux安装Virtualbox的那些坑与解决方案～","slug":"a68e0e8d2769f03ada2ef5d4befb7413","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.880Z","comments":true,"path":"posts/dd7afd120524ceff.html","link":"","permalink":"http://blog.deali.cn/posts/dd7afd120524ceff.html","excerpt":"","text":"前言不久之前，由于我的Ubuntu安装盘空间满了，于是想在新的SSD上装另一个系统，于是就又回到了Manjaro的怀抱，KDE桌面真好用，不过很多配置的地方还是要研究一下的，毕竟以前主要用的桌面还是Gtk系的～ 进入正题安装virtualboxManjaro的官方源里面是有virtualbox的，直接打开Octopi搜一下就有了～ 或者输入命令安装： 1sudo pacman -S virtualbox 安装内核模块上一步把virtualbox安装好了，但这个时候还不能使用，得安装内核模块并且激活才可以。同样在官方源里面就有对应的内核模块可以安装，但是得查一下对应版本。 怎么查看内核版本呢，打开Manjaro Settings Manager，如下： 选择“内核”： 可以看到当前的内核版本是4.19.32-1，然后就可以开始安装内核模块了～在Octopi上搜索Virtualbox的时候就可以看到很多内核模块可选，这里我们选择对应内核版本的Linux419，如图： 激活内核模块1sudo modprobe vboxdrv 添加当前用户到virtualbox用户组1sudo gpasswd -a [username] vboxusers 其中，[username]换成你的用户名，比如我自己的是这样 1sudo gpasswd -a dealiaxy vboxusers 坑：导入已有的虚拟机无法开机把已经有的虚拟机导入的时候会遇到这个问题，主要是虚拟硬盘的位置改变了，在设置里面重新设置回来就好了。但是这时又会报错说虚拟硬盘的SSID有问题，这个时候就要重置一下SSID了～ 切换到虚拟硬盘文件所在目录，执行以下命令： 1VBoxManage internalcommands sethduuid &lt;file.vdi&gt; 把&lt;file.vdi&gt;换成你的虚拟硬盘文件名～ 参考资料 https://forum.manjaro.org/t/kernel-driver-not-installed-virtualbox/65797 https://wiki.manjaro.org/index.php?title=Virtualbox#Install_VirtualBox https://stackoverflow.com/questions/44114854/virtualbox-cannot-register-the-hard-disk-already-exists 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"},{"name":"解决方案","slug":"解决方案","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}]},{"title":"内存不够用？在Linux上使用swapfile配置交换空间","slug":"a6cf0e6787fdfe9d5a9758abda55af4a","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.888Z","comments":true,"path":"posts/dbd5b4751612ccae.html","link":"","permalink":"http://blog.deali.cn/posts/dbd5b4751612ccae.html","excerpt":"","text":"前言几个月前我还兴高采烈写了篇文章说给笔记本升级了内存配置，从乞丐版的4G一跃成为16G高富帅，然而，这几个月来我备受电脑死机的折磨，我现在有理由怀疑我可能买了假的内存条，于是没有办法，只能换回原厂的4G内存条，（然后准备赚部台式机），问题不大。换上4G内存条之后效果显著，只开了一个谷歌浏览器，内存占用就已经到了80%了，JB家的IDE是决计不敢再用了，可是这样还是难以满足系统对内存空间渴求，这时候就只能配置交换空间了。（也就是虚拟内存） Swap概念Swap分区（也称交换分区）是硬盘上的一个区域，被指定为操作系统可以临时存储数据的地方，这些数据不能再保存在RAM中。 基本上，这使您能够增加服务器在工作“内存”中保留的信息量，但有一些注意事项，主要是当RAM中没有足够的空间容纳正在使用的应用程序数据时，将使用硬盘驱动器上的交换空间。写入磁盘的信息将比保存在RAM中的信息慢得多，但是操作系统更愿意将应用程序数据保存在内存中，并使用交换旧数据。 总的来说，当系统的RAM耗尽时，将交换空间作为回落空间可能是一个很好的安全网，可防止非SSD存储系统出现内存不足的情况。 检查系统信息在开始之前，我们可以检查系统是否已经有一些可用的交换空间，可能有多个交换文件或交换分区，但通常应该是足够的。我们可以通过如下的命令来查看系统是否有交换分区： 1sudo swapon --show 如果没有任何结果或者没有任何显示，说明系统当前没有可用的交换空间。free命令用来查看空闲的内存空间，其中包括交换分区的空间。 1free -h 检查硬盘驱动器分区上的可用空间为swap分配空间的最常见方式是使用专门用于具体某个任务的单独分， 但是，改变分区方案并不是一定可行的，我们只是可以轻松地创建驻留在现有分区上的交换文件。 在开始之前，我们应该通过输入以下命令来检查当前磁盘的使用情况： 1df -h 创建swap文件由于这个系统我已经用了很久了，并且磁盘上并没有空闲的分区可以用，所以我选择手动创建一个swapfile来充当交换空间。 据说交换空间的大小一般是内存的两倍，我现在只有4g的内存空间，于是当然要创建一个8G大小的交换空间了。使用以下命令创建swapfile 1sudo fallocate -l 8G /swapfile 经过测试，OpenSuSE系统要使用以下命令才能成功创建swapfile 1sudo dd if=/dev/zero of=/swapfile count=4096 bs=1MiB 使用以下命令查看是否正确创建。 1ls -lh /swapfile 结果应该类似下面这样： 1-rw-r--r-- 1 root root 8.0G Apr 26 17:04 /swapfile 修改swapfile权限1sudo chmod 600 /swapfile 查看效果 1ls -lh /swapfile 结果应该类似下面这样： 1-rw------- 1 root root 8.0G Apr 26 17:04 /swapfile 激活交换空间12sudo mkswap /swapfilesudo swapon /swapfile 之后使用以下命令查看使用成功开启交换空间： 1sudo swapon --show 结果类似下面这样： 12NAME TYPE SIZE USED PRIO/swapfile file 8G 0B -1 添加到fstab这样每次开机系统就会自动吧swapfile挂载为交换空间。首先请自行备份fstab文件。然后把以下配置添加到fstab文件末尾。 1/swapfile none swap sw 0 0 或者直接使用以下命令： 12sudo cp /etc/fstab /etc/fstab.bakecho '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"内存","slug":"内存","permalink":"http://blog.deali.cn/tags/%E5%86%85%E5%AD%98/"},{"name":"交换","slug":"交换","permalink":"http://blog.deali.cn/tags/%E4%BA%A4%E6%8D%A2/"},{"name":"不够","slug":"不够","permalink":"http://blog.deali.cn/tags/%E4%B8%8D%E5%A4%9F/"},{"name":"空间","slug":"空间","permalink":"http://blog.deali.cn/tags/%E7%A9%BA%E9%97%B4/"}]},{"title":"使用Django搭建微信小程序后端服务","slug":"a857fee70e9bee786c770eea688d6ebe","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.888Z","comments":true,"path":"posts/b7cd52ecd8cd79d2.html","link":"","permalink":"http://blog.deali.cn/posts/b7cd52ecd8cd79d2.html","excerpt":"","text":"参考资料https://www.rapospectre.com/blog/45http://www.wxapp-union.com/thread-4132-1-1.html https://www.jianshu.com/p/c1c5b1f641b1http://gitbook.cn/books/5aa68b6ab47f7e04448311aa/index.html","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"微信开发","slug":"微信开发","permalink":"http://blog.deali.cn/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"},{"name":"微信","slug":"微信","permalink":"http://blog.deali.cn/tags/%E5%BE%AE%E4%BF%A1/"},{"name":"Go","slug":"Go","permalink":"http://blog.deali.cn/tags/Go/"},{"name":"服务","slug":"服务","permalink":"http://blog.deali.cn/tags/%E6%9C%8D%E5%8A%A1/"},{"name":"程序","slug":"程序","permalink":"http://blog.deali.cn/tags/%E7%A8%8B%E5%BA%8F/"},{"name":"搭建","slug":"搭建","permalink":"http://blog.deali.cn/tags/%E6%90%AD%E5%BB%BA/"}]},{"title":"Nginx配置http跳转https-强制https访问","slug":"d58825b6e4996e802e5934605a395ba1","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.936Z","comments":true,"path":"posts/73c376bca6e606e5.html","link":"","permalink":"http://blog.deali.cn/posts/73c376bca6e606e5.html","excerpt":"","text":"前言最近上线了好几个项目，同时也申请了相应的SSL证书，不过发现了一个问题，用户在浏览器直接输入域名的时候，浏览器默认访问的是http站点，然而我们的网站只支持https访问，所以就访问不了咯。其实可以在nginx全局配置里面把所有访问重定向到https，不过服务器有些站点是提供http服务的，所以只能每个站点分别配置。根据搜索引擎找到的资料，本文总结了三种配置方法，有需要的朋友可以选择中意的使用。 nginx的rewrite方法说明这应该是大家最容易想到的方法，将所有的http请求通过rewrite重写到https上即可。 配置123456server &#123; listen 192.168.1.111:80; server_name test.com; rewrite ^(.*)$ https://$host$1 permanent;&#125; 搭建此虚拟主机完成后，就可以将http://test.com的请求全部重写到https://test.com上了 nginx的497状态码错误代码4971497 - normal request was sent to HTTPS 解释：当此虚拟站点只允许https访问时，当用http访问时nginx会报出497错误码 说明利用error_page命令将497状态码的链接重定向到https://test.com这个域名上 配置1234567891011121314server &#123; listen 192.168.1.11:443; #ssl端口 listen 192.168.1.11:80; #用户习惯用http访问，加上80，后面通过497状态码让它自动跳到443端口 server_name test.com; #为一个server&#123;......&#125;开启ssl支持 ssl on; #指定PEM格式的证书文件 ssl_certificate /etc/nginx/test.pem; #指定PEM格式的私钥文件 ssl_certificate_key /etc/nginx/test.key; #让http请求重定向到https请求 error_page 497 https://$host$uri?$args;&#125; index.html 刷新法说明上述两种方法都需要服务器做计算处理，均会耗费服务器的资源。网页刷新法是从百度那里学来的。我们用curl访问baidu.com试一下，看百度的公司是如何实现baidu.com向www.baidu.com的跳转。 可以看到百度很巧妙的利用meta的刷新作用，将baidu.com跳转到www.baidu.com.因此我们可以基于http://test.com的虚拟主机路径下也写一个index.html，内容就是http向https的跳转 index.html网页内容123&lt;html&gt;&lt;meta http-equiv=\"refresh\" content=\"0;url=https://test.com/\"&gt;&lt;/html&gt; 站点配置在服务器的配置里添加一个http站点配置用来提供刚才那个 index.html 的访问服务 1234567891011server &#123; listen 80; server_name test.com; location / &#123; #index.html放在虚拟主机监听的根目录下 root /srv/www/http.test.com/; &#125; #将404的页面重定向到https的首页 error_page 404 https://test.com/;&#125; 参考资料https://blog.csdn.net/wzy_1988/article/details/8549290 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"访问","slug":"访问","permalink":"http://blog.deali.cn/tags/%E8%AE%BF%E9%97%AE/"},{"name":"网络协议","slug":"网络协议","permalink":"http://blog.deali.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"运维","slug":"运维","permalink":"http://blog.deali.cn/tags/%E8%BF%90%E7%BB%B4/"},{"name":"跳转","slug":"跳转","permalink":"http://blog.deali.cn/tags/%E8%B7%B3%E8%BD%AC/"},{"name":"强制","slug":"强制","permalink":"http://blog.deali.cn/tags/%E5%BC%BA%E5%88%B6/"}]},{"title":"如何阻止Win10重置默认应用？","slug":"d3a36047eb135d8dbaf4d95f6b559d20","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.936Z","comments":true,"path":"posts/5f9075ec6e15ad90.html","link":"","permalink":"http://blog.deali.cn/posts/5f9075ec6e15ad90.html","excerpt":"","text":"前言Win10比之前版本的Windows系统更现代，然而却不见得更好用，喜欢自作主张重置默认应用就是一个大问题。 就像这样，真的是烦。 解决方法改注册表。新建一个 去除重置默认应用.reg 的注册表文件，粘贴一下代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107Windows Registry Editor Version 5.00;Description: Prevents Windows 10 from resetting the file associations;... by setting NoOpenWith registry value for all the modern apps.;Tested in Windows 10 Build 10586;-------------------;Microsoft.3DBuilder;-------------------;File Types: .stl, .3mf, .obj, .wrl, .ply, .fbx, .3ds, .dae, .dxf, .bmp;... .jpg, .png, .tga[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXvhc4p7vz4b485xfp46hhk3fq3grkdgjg]\"NoOpenWith\"=\"\";-------------------;Microsoft Edge;-------------------;File Types: .htm, .html[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppX4hxtad77fbk3jkkeerkrm0ze94wjf3s9]\"NoOpenWith\"=\"\";File Types: .pdf[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXd4nrz8ff68srnhf9t5a8sbjyar1cr723]\"NoOpenWith\"=\"\";File Types: .svg[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXde74bfzw9j31bzhcvsrxsyjnhhbq66cs]\"NoOpenWith\"=\"\";File Types: .xml[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXcc58vyzkbjbs4ky0mxrmxf8278rk9b3t]\"NoOpenWith\"=\"\";-------------------;Microsoft Photos;-------------------;File Types: .3g2,.3gp, .3gp2, .3gpp, .asf, .avi, .m2t, .m2ts, .m4v, .mkv;... .mov, .mp4, mp4v, .mts, .tif, .tiff, .wmv[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXk0g4vb8gvt7b93tg50ybcy892pge6jmt]\"NoOpenWith\"=\"\";File Types: Most Image File Types[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppX43hnxtbyyps62jhe9sqpdzxn1790zetc]\"NoOpenWith\"=\"\";File Types: .raw, .rwl, .rw2 and others[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppX9rkaq77s0jzh1tyccadx9ghba15r6t3h]\"NoOpenWith\"=\"\";-------------------; Zune Music;-------------------;File Types: .aac, .adt, .adts ,.amr, .flac, .m3u, .m4a, .m4r, .mp3, .mpa;.. .wav, .wma, .wpl, .zpl[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs]\"NoOpenWith\"=\"\";-------------------; Zune Video;-------------------;File Types: .3g2,.3gp, .3gpp, .avi, .divx, .m2t, .m2ts, .m4v, .mkv, .mod;... .mov, .mp4, mp4v, .mpe, .mpeg, .mpg, .mpv2, .mts, .tod, .ts;... .tts, .wm, .wmv, .xvid[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppX6eg8h5sxqq90pv53845wmnbewywdqq5h]\"NoOpenWith\"=\"\" 双击运行即可。 要恢复原状的话，可以再新建一个 恢复.reg 注册表文件。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105Windows Registry Editor Version 5.00;Description: UNDO file for the earlier NoOpenWith registry edit;Tested in Windows 10 Build 10586;-------------------;Microsoft.3DBuilder;-------------------;File Types: .stl, .3mf, .obj, .wrl, .ply, .fbx, .3ds, .dae, .dxf, .bmp;... .jpg, .png, .tga[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXvhc4p7vz4b485xfp46hhk3fq3grkdgjg]\"NoOpenWith\"=-;-------------------;Microsoft Edge;-------------------;File Types: .htm, .html[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppX4hxtad77fbk3jkkeerkrm0ze94wjf3s9]\"NoOpenWith\"=-;File Types: .pdf[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXd4nrz8ff68srnhf9t5a8sbjyar1cr723]\"NoOpenWith\"=-;File Types: .svg[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXde74bfzw9j31bzhcvsrxsyjnhhbq66cs]\"NoOpenWith\"=-;File Types: .xml[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXcc58vyzkbjbs4ky0mxrmxf8278rk9b3t]\"NoOpenWith\"=-;-------------------;Microsoft Photos;-------------------;File Types: .3g2,.3gp, .3gp2, .3gpp, .asf, .avi, .m2t, .m2ts, .m4v, .mkv;... .mov, .mp4, mp4v, .mts, .tif, .tiff, .wmv[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXk0g4vb8gvt7b93tg50ybcy892pge6jmt]\"NoOpenWith\"=-;File Types: Most Image File Types[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppX43hnxtbyyps62jhe9sqpdzxn1790zetc]\"NoOpenWith\"=-;File Types: .raw, .rwl, .rw2 and others[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppX9rkaq77s0jzh1tyccadx9ghba15r6t3h]\"NoOpenWith\"=-;-------------------; Zune Music;-------------------;File Types: .aac, .adt, .adts ,.amr, .flac, .m3u, .m4a, .m4r, .mp3, .mpa;.. .wav, .wma, .wpl, .zpl[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs]\"NoOpenWith\"=-;-------------------; Zune Video;-------------------;File Types: .3g2,.3gp, .3gpp, .avi, .divx, .m2t, .m2ts, .m4v, .mkv, .mod;... .mov, .mp4, mp4v, .mpe, .mpeg, .mpg, .mpv2, .mts, .tod, .ts;... .tts, .wm, .wmv, .xvid[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AppX6eg8h5sxqq90pv53845wmnbewywdqq5h]\"NoOpenWith\"=- 参考资料微软官网win10之家 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"默认","slug":"默认","permalink":"http://blog.deali.cn/tags/%E9%BB%98%E8%AE%A4/"},{"name":"应用","slug":"应用","permalink":"http://blog.deali.cn/tags/%E5%BA%94%E7%94%A8/"},{"name":"重置","slug":"重置","permalink":"http://blog.deali.cn/tags/%E9%87%8D%E7%BD%AE/"},{"name":"阻止","slug":"阻止","permalink":"http://blog.deali.cn/tags/%E9%98%BB%E6%AD%A2/"}]},{"title":"聊聊互联网产品设计：从张小龙的微信到一百多M的诗词App","slug":"b023e5614fafd015f2c26fe2852ba4b6","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.892Z","comments":true,"path":"posts/16d91a5eb6663f11.html","link":"","permalink":"http://blog.deali.cn/posts/16d91a5eb6663f11.html","excerpt":"","text":"不会技术的产品设计师不是好的厨师。 前段时间微信更新了7.0.10版本，","categories":[{"name":"随笔","slug":"随笔","permalink":"http://blog.deali.cn/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"产品","slug":"产品","permalink":"http://blog.deali.cn/tags/%E4%BA%A7%E5%93%81/"},{"name":"微信开发","slug":"微信开发","permalink":"http://blog.deali.cn/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"},{"name":"微信","slug":"微信","permalink":"http://blog.deali.cn/tags/%E5%BE%AE%E4%BF%A1/"},{"name":"聊聊","slug":"聊聊","permalink":"http://blog.deali.cn/tags/%E8%81%8A%E8%81%8A/"},{"name":"产品设计","slug":"产品设计","permalink":"http://blog.deali.cn/tags/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"},{"name":"诗词","slug":"诗词","permalink":"http://blog.deali.cn/tags/%E8%AF%97%E8%AF%8D/"},{"name":"互联网","slug":"互联网","permalink":"http://blog.deali.cn/tags/%E4%BA%92%E8%81%94%E7%BD%91/"}]},{"title":"关于系统的折腾-＆-OpenSuSE养老","slug":"b580ad039188dac05359a0ac9189d0c2","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.892Z","comments":true,"path":"posts/4b4ec861f1535667.html","link":"","permalink":"http://blog.deali.cn/posts/4b4ec861f1535667.html","excerpt":"","text":"前言最近python写得多了真的受不了Windows的开发环境了，于是又开始折腾系统，先是试了黑苹果，结果发现真的是难，问题一大堆 = = …于是果断选择回到我大蜥蜴的怀抱，用过那么多桌面环境，最喜欢的还是Gnome，所以就这样吧，在大蜥蜴养老就行了，好像这次安装完之后没什么大问题了，除了输入法暂时用不了搜狗，其他都ok，不折腾了，太浪费时间。 附上截图 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Linux评测","slug":"Linux评测","permalink":"http://blog.deali.cn/categories/Linux%E8%AF%84%E6%B5%8B/"}],"tags":[{"name":"系统","slug":"系统","permalink":"http://blog.deali.cn/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"折腾","slug":"折腾","permalink":"http://blog.deali.cn/tags/%E6%8A%98%E8%85%BE/"}]},{"title":"给你的Deepin系统换主题～","slug":"cffb60f62c6da121a73dfcefb1bffb19","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.936Z","comments":true,"path":"posts/ae7f50df5a94b662.html","link":"","permalink":"http://blog.deali.cn/posts/ae7f50df5a94b662.html","excerpt":"","text":"我现在的桌面： 因为美国封锁然后华为电脑用上Deepin系统的事情，Deepin系统最近名声大噪，其实Deepin本来的界面就很好看，号称打造最适合国人的系统不是盖的。 不过Deepin有一个坏处，就是默认主题的标题栏太大了…… 太占空间。所以我们要换主题折腾一下。 Deepin的桌面是Qt写的，所以首先要换KDE主题，然后再安排一下GTK3的主题，在Deepin系统设置里面换的主题就是GTK的，只对Gtk程序有效。 首先下载这个主题：pingguo-aurorae 然后解压到主目录 / .local / share / aurorae / themes/目录下面，缺了哪个目录就自己创建啦。 然后还需要安装KDE设置这个程序，因为我们要设置Qt程序的主题呀，Deepin系统设置是没办法换Qt程序主题的，如下： 1sudo apt install systemsettings 之后打开KDE设置，选 应用程序风格 ，选一个你喜欢的配色即可 设置之后的效果：","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"系统","slug":"系统","permalink":"http://blog.deali.cn/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"主题","slug":"主题","permalink":"http://blog.deali.cn/tags/%E4%B8%BB%E9%A2%98/"}]},{"title":"苹果竟然给我发这种邮件？这是什么新骗局","slug":"cff253c372e076c62de262e237530d0b","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.924Z","comments":true,"path":"posts/19623636f7b38434.html","link":"","permalink":"http://blog.deali.cn/posts/19623636f7b38434.html","excerpt":"","text":"今天突然收到一封邮件，说是我的Apple ID被锁了，要我点击链接登录解锁，一开始我是觉得挺烦的，上个月我的美区ID刚被锁了，折腾了很久联系了台湾的客服才给解锁的，现在我国区的ID也被锁了？苹果怕是药丸。 不过看这封邮件总觉得有什么不对劲的地方…… 你这apple单词的e好像不是英文字母吧，如果苹果公司发来的邮件会是这个？而且这发件的邮箱也不对啊，没见过这域名，苹果的难道不是apple.com吗？有毒吧，于是我将信将疑的打开这个链接…… 话说这个网站我还打不开，得科学上网才能打开…… 页面还做得有模有样的，就是这网址，我读书少，你别骗我啊… 出于尊重人的劳动成果，（写一个模仿苹果官网的页面也不容易吧），我决定随便输入一个账号登录一下，结果还真的登录成功，我佛了，提示我账号被锁定…… 我再观察了一下这个页面，除了中间让输入账号密码和引导你一步步入坑之外，其他链接都是假的，都点不了，合着就是一简陋的钓鱼页面啊……这也太敷衍了吧。。。 好的，让我们再来看看这个页面的代码，看能不能找到点什么。别吧，你一需要科学上网才能访问的网站还用百度的统计代码？闹哪样啊，这是我中国同胞开发出来坑我的？ 让我们打开抓包，看看输入账号密码的时候他对我们的账号干了些什么： 可以看到有四个请求，其中一个是POST请求 果然就是这个请求把我们的账号密码偷走了，而且还是明文传输！ 都到这一步了，继续看看后面他有什么花样…… 让我填一下个人信息…… 我随便填一下就好啦 现在要骗我填信用卡信息，这不是要盗刷我信用卡吗……无语 乱填的信用卡号说是不支持，好了，到这里就没有继续玩的必要了，很低劣的骗术，可能是拿去骗外国人的？让我们查查这个域名的信息…… 这里我们通过WHOIS查询这个域名的注册信息，科普一下，whois是是用来查询域名的IP以及所有者等信息的传输协议。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。通过whois来实现对域名信息的查询。早期的whois查询多以命令列接口存在，但是现在出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名/IP的whois信息由对应的管理机构保存。 果然，信息都是隐藏的 不过还是能查到一点有用信息的，域名注册商是Google，那我们登录Google域名官网查一下……谷歌官网能查到的信息就多了很多，至少电话号码没有马赛克了，可以看出是一个加拿大的号码，然后注册人和邮件什么的都是隐藏的，不过地址倒是有了，不过是加拿大的地址，没什么用… 好像查到这里就陷入僵局了，毕竟都是国外的不好找啊，只能试试谷歌一下这个号码了… 算了，好像找不出什么了，不继续查了，总之大家要提高警惕，收到这类邮件的时候最好看看发件人是不是假的，登录的时候多留个心眼，用假的用户名试试看…… About 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"给我发","slug":"给我发","permalink":"http://blog.deali.cn/tags/%E7%BB%99%E6%88%91%E5%8F%91/"},{"name":"骗局","slug":"骗局","permalink":"http://blog.deali.cn/tags/%E9%AA%97%E5%B1%80/"},{"name":"邮件","slug":"邮件","permalink":"http://blog.deali.cn/tags/%E9%82%AE%E4%BB%B6/"},{"name":"苹果","slug":"苹果","permalink":"http://blog.deali.cn/tags/%E8%8B%B9%E6%9E%9C/"}]},{"title":"写一写生活吧，人生不只是有学习和工作。","slug":"cf7abbd3fe492c2edae9a06295f1ed3a","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.924Z","comments":true,"path":"posts/9a5143b051640ed3.html","link":"","permalink":"http://blog.deali.cn/posts/9a5143b051640ed3.html","excerpt":"","text":"哈喽～ 今天没有想写技术文（其实是我也不知道有什么好写的），不怎么耗时间的太简单，稍微有含金量一些的太耗费时间和精力，最近真的没有那么多的时间去写去整理这么一篇文章。（当你经营一个公众号之后就会觉得每次produce一篇文章都是一个壮举）。 最近一直在折腾系统，作为一名不怎么标准的极客，没有趁手的工具怎么干活，所以我一直秉承着“磨刀不误砍柴工”的理念去折腾（误。 （忠告：千万不要折腾，这是一个大坑） Linux对于中国用户来说，有很多不方便需要折腾的地方，首当其冲的当然就是中文输入法了，要在Linux上安装配置好一个现代的中文输入法真的没有那么容易的（逃，所以前阵子我极力避免做任何需要输入中文的事情，不是不能输入，其实只是打字体验不好，没有正常情况下流畅打字的那种快感。 然后这两天经过很久的折腾，终于用上并且配置好了Arch Linux（的衍生发行版Manjaro），接触过Linux社区的人都知道，这是一个很特别的发行版，基本用过的人都会表示Arch大法好，并且从此再不回头～ 起初我是不相信的，不过在这几天的使用中，我不得不承认，这是真的。所以现在我终于可以愉快地打字输入了，所以也就开始了本文的创作（是的，即时是吹水，也是一种creation）。 好吧，说了本文不涉及技术的，所以关于折腾系统这个话题，就不详细展开了，写写生活吧，“生活”是现代人最容易忽略的东西，大部分所做的一切都只能称为“生存”。活着，对现代人来说应该不是一件难事，难的是怎么活得让自己开心，再者让身边的人也能因为有你的存在而感到愉悦。我觉得，这才是“生活”的含义，因此，“生活”，首先就是要自己过得快乐。好，那么，如果过得快乐又是一个问题，更何况每个人对快乐的定义都不同，每个人感受到幸福的阈值也不同，所以既然本文只是随笔，我就不阐述这些有很大争议的问题了，如何获得快乐幸福，各位请自行探索。 自从国内的微博变成一个广告满天飞的营销平台之后，我索性把生活记录转移到纸上，也就是名为“手帐”的物件，并且我觉得，这么个本子还是挺有意思的，每天写上今天完成的事情，记一下小总结，再把明天的大致计划写上去，这样一段时间下来再回头看，会有很大的满足感和成就感。 以下内容摘自我的手帐，并且加以简单的叙述说明。 5月17日。在手帐上看到一句话，“原谅别人就是善待自己”。 《华严经》中有云：“我昔所造诸恶业，皆由无始贪瞋痴”，关于“贪”、“嗔”、“痴”，我记得公众号之前有推送过，世人所遇痛苦，皆源自这“三毒”。这里的“原谅别人”，自然就是避免自己遁入“嗔”了，虽然这句话看起来很平淡，就是一句很普通的鸡汤，但是却能很好地解决人际关系中的许多困扰。“原谅别人”不是简单的消极面对人际关系中不愉快的事情，而是彼此多一些理解，多一些积极的沟通，这样就可以少一些误会。再者，我认为“缘”一说，其实挺有道理，每个人有不同的生活经历，也造就了不同的性格，一般来说性格相似的人会比较“臭味相投”，所以你问我别人有冒犯到你的地方，实在原谅不了怎么办，那只能说明你们真的没有“缘”，性格上合不来，很难通过正常的沟通来解决冲突，所以还是不要为难自己，还是可以选择“原谅”，这不是选择妥协还是认输，只不过是善待自己，你想想，如果一直记恨哲某个人冒犯过你，每每想起的时候，心里肯定不开心，接着这种不愉快的情绪就会蔓延到身边的其他人身上，也就是所谓的“负能量”，这样于己于人，都是不利的。所以，这句话挺有道理的，理解万岁，实在不行的话就远离吧，不要勉强自己，做人嘛，最紧要是开心。 5月19日。“心理学真的挺有意思的最大的意义不在于揣摩他人，而是了解自己” 上文提到“原谅别人”在人际关系中扮演着积极的作用，正好我手头有相关的书籍，所以在闲暇的时候浏览一番，心理学确实挺有趣，也很有意义，当然最大的意义在于了解自己。了解自己有什么意思吗？当然有了，生活的目的——过得开心，如果过得开心？当然是要了解自己想要什么吧，当然具体如何过得开心，如何分析自己的理想追求，也不在本文的讨论范围。 5月21日。“知识掌握了再回头看基础，当时学的时候好多看不懂的东西都能轻松理解了，同时也能把碎片化的知识连接起来” 这是在看完书之后发出的感慨，深有体会，举个简单的例子，我喜欢折腾Linux系统，那么在折腾过程中有学习到什么东西吗？当然是有的，但是很碎片化，基本都是一些经验，下次遇到不同的问题又要去搜索，即使折腾Linux系统有两三年的经验，但可能还不如一个刚入门Linxu的人从头学一遍鸟哥的《Linux私房菜》几个月获得的知识丰富，这就是系统化学习和碎片化积累的差距。也是我为什么说折腾是没有意义的原因。（感觉可以去找鸟哥要一点广告费） 5月22日。“每个人都有自觉得最舒服的相处方式和距离，就像在冬天里报团取暖的刺猬一样，即使不理解，但起码要尊重。” 午休时间看了一部电影解说，得到的感想，例子不知道要举什么好。俗话说“君子之交淡如水，小人之交甘若醴”，不过如何去评判这两种交往方式孰好孰坏？应该很难吧，“君子之交”是否真的“淡如水”，我不清楚，因为我不是“君子”，关于是否为“君子”，也难有一个评判的标准；同理，“小人之交”是否“甘若醴”，我同样不清楚。既然了解都不怎么了解，那就更谈不上理解了，但这都不是什么大问题，保持尊重即可。 5月23日。“如果只有一天时间，就不要想去做一星期的事情。” 对于我能总结出这句话的这件事，我至今仍然觉得很有成就感。不是因为它多有启示意义，而是因为这句话太适合我了，没错，我一直是非常的“好高骛远”，即使只拥有一条泥鳅，却也总想抓住整个池塘里的鱼，当然，很多时候什么都抓不住。所以，要提高工作学习的效率，首先得数清楚自己“拥有几条泥鳅”，一条泥鳅一条鱼，贪心的结果往往是一无所获（当然你可能机智一些一条泥鳅可以抓到两条鱼，但你总不可能把一池子的鱼都抓上来吧）。认清自己的能力，才能更好分配计划，也才能最大化效率。有限的时间里千万别想着做无限的事情，不然就只能是拖拖拖，让deadline无限延期…… 最后感慨一下，ReSharp真的挺好用的，涉及.Net开发的朋友可以了解一下。 一句话总结：写流水账和吹水的时候，是最轻松的。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://blog.deali.cn/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"人生","slug":"人生","permalink":"http://blog.deali.cn/tags/%E4%BA%BA%E7%94%9F/"},{"name":"生活","slug":"生活","permalink":"http://blog.deali.cn/tags/%E7%94%9F%E6%B4%BB/"},{"name":"工作","slug":"工作","permalink":"http://blog.deali.cn/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"Windows平台下Git的安装与配置","slug":"bdddfcd292b56ab32c33a6f256aa4b02","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.912Z","comments":true,"path":"posts/64f0f5b2bf0311e1.html","link":"","permalink":"http://blog.deali.cn/posts/64f0f5b2bf0311e1.html","excerpt":"","text":"一、下载Git for Windows，主页：http://gitforwindows.org/点击页面中“Download”进入下载列表。可根据个人喜好选择下载版本。这里选择下载最新版：Git-1.8.3-preview20130601.exe. 二、安装 下载完毕，双击开始安装： 1、除了AdvancedXXX选项，其余全选中 2、选择“Use Git Bash only” 3、选择“Checkout as-is，commit as-is” 4、等待安装完毕。三、配置1、安装完毕，桌面上会有Git Bash图标 双击进入Git Shell界面 2、配置Name和Email命令格式： 12git config --global user.name \"your name\"git config --global user.email \"your email address\" 3、生成Public/Private RSA Key命令格式： 1ssh-keygen -C \"your email address\" -t rsa 注意图中红色数字标注： 设置Public RSA Key的保存位置，直接回车采用默认地址； 设置一个密码，并再次输入确认(这里不建议设置，方便本地使用) Public RSA Key的保存路径：c:\\users\\username.ssh\\id_rsa.pub 将Public Key告知Github 请首先注册一个github账号，Home Page：https://github.com/ 。然后进入Account Settings页面，打开SSH Keys，点击“Add SSH Key”。打开c:\\users\\username\\.ssh\\id_rsa.pub，把里面的内容全部Copy到Key对应的输入框内，点击“Add Key”。 四、Clone Repositories1、进入Git Workspace，右键选择Git GUI Here： 2、选择“克隆已有版本库” 3、输入要克隆的版本库地址和保存目录。 需要注意的是： 版本库地址格式：git@github.com:your resp address 保存目录的最后一级不能Exist 图中蓝线标注即为your resp address，可以在github.com的Account Settings–&gt;Respositories中看到，如下图红圈所示。 4、根据提示输入密码（在第三节的第三项中所设置），可能会输入多次。 5、Clone成功。 五、简化第四节中介绍的方法比较复杂，尤其是频繁输入密码。下面介绍一种简单的方法： 一定不要设置密码！！！ 在Git Workspace打开Git Bash Here 输入ssh git@github.com 回车，出现如下提示表示已经信任git@github.com站点。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.deali.cn/categories/Windows/"}],"tags":[{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"平台","slug":"平台","permalink":"http://blog.deali.cn/tags/%E5%B9%B3%E5%8F%B0/"},{"name":"版本管理","slug":"版本管理","permalink":"http://blog.deali.cn/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"}]},{"title":"在Linux上安装Windows字体","slug":"beaa0716e7a87b8c87c048cb6eca0737","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.912Z","comments":true,"path":"posts/4899c38d0c6c3884.html","link":"","permalink":"http://blog.deali.cn/posts/4899c38d0c6c3884.html","excerpt":"","text":"前言Linux系统下为安装WPS后，由于版权问题并没有自带字体，而这些字体又是平时必须使用的，下面介绍为Linux系统添加字体的方法。 操作 由于Windows系统自带了完善的字体，所以可以从安装的windows系统下拷贝。首先执行命令：1mkdir /usr/share/fonts/wps_symbol_fonts/ //创建WPS的字体目录 然后到windows字体目录下，C：/Windows/Fonts/，进入到该目录，在此打开终端，执行命令：1234cp *.ttf /usr/share/fonts/wps_symbol_fonts/cp *.TTF /usr/share/fonts/wps_symbol_fonts/cp *.otf /usr/share/fonts/wps_symbol_fonts/cp simsun.ttc /usr/share/fonts/wps_symbol_fonts/ 将ttf、otf、TTF、及simsun.ttc字体文件拷贝到linux系统下新建的wps_symbol_fonts目录下。 注意：ttc文件只拷贝simsun.ttc（宋体）这一个，全部都拷进来会使系统字体错乱，并且WPS无法输入中文，具体是哪个ttc文件导致的你可以自己挨个拷进去验证，出错了就删除即可。 添加可读可执行权限，并生成字体缓存。命令：1234567cd /usr/share/fonts/chmod 755 wps_symbol_fonts/cd /usr/share/fonts/wps_symbol_fonts/chmod 644 *mkfontscalemkfontdirfc-cache //更新字体缓存 注意：只要按照该方法即可将windows字体全部添加到linux。字体文件最好不要直接放到fonts目录下，而要放到wps_symbol_fonts下，避免与系统字体冲突，并且可能会使WPS无法输入中文。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"字体","slug":"字体","permalink":"http://blog.deali.cn/tags/%E5%AD%97%E4%BD%93/"}]},{"title":"轻松解决Linux+Windows双系统时间不一致问题","slug":"bf8bf915e16ca16ac9654cca7f982043","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.912Z","comments":true,"path":"posts/28d125318fc4f94e.html","link":"","permalink":"http://blog.deali.cn/posts/28d125318fc4f94e.html","excerpt":"","text":"前言Linux用户很多都是使用双系统的吧，毕竟很多Linux下没有的软件还是需要打开Windows。但是一直以来有个困扰，Linux下时间显示是正常的，但是回到Windows下时间就会慢了8个小时 = =这是因为Windows默认使用硬件时钟，而Linux使用网络时间，现在只需要一条命令就能搞定这个问题。 解决在Linux下打开终端，输入命令： 1timedatectl set-local-rtc 1 然后再输入 1timedatectl 进行验证。（非必要） 这样问题就解决了，超简单有木有！ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"解决","slug":"解决","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"问题","slug":"问题","permalink":"http://blog.deali.cn/tags/%E9%97%AE%E9%A2%98/"},{"name":"时间","slug":"时间","permalink":"http://blog.deali.cn/tags/%E6%97%B6%E9%97%B4/"},{"name":"双系统","slug":"双系统","permalink":"http://blog.deali.cn/tags/%E5%8F%8C%E7%B3%BB%E7%BB%9F/"}]},{"title":"开始开发一个新博客了，复古风Metro风格，顺便diss一下js","slug":"cbaf6d11993eb3481542c7fc72ea86d5","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.920Z","comments":true,"path":"posts/4198b3961eeac0c5.html","link":"","permalink":"http://blog.deali.cn/posts/4198b3961eeac0c5.html","excerpt":"","text":"emmm我原本的博客是用wordpress搭建的，当年七牛云还是免费时用它做的CDN，但是现在收费了，如果维持目前的博客流量的话每个月都要支付不少费用，于是只好把七牛云给停了= =，这也导致我博客里面很多图片都访问不了，页面布局也出问题了，不想折腾了，而且wordpress用起来总觉得不顺手，还是自己做一个吧~ 计划最近刚好在学SpringBoot啥的，本来想用springboot搭建一个博客，但是转念一想根本没必要，我博客又不怎么用数据库（基于md文件的博客就问你见过没），没错，我就是想做个类似GitPage的博客~ 所以我还是想用python做后台，毕竟好像也不需要什么后台吧，就是把markdown渲染成html，然后再用js给页面加上buff变得好看~ 所以这些和后台用啥关系不大，主要还是在前端吧= =，基于文件结构的博客目录，感觉用Java处理起来好繁琐，我还是python吧，人生苦短，我用python。（等后面做DataAcq第二版的时候再试试Java做起来怎么样） 设计语言关于页面怎么设计的我昨夜想了一个晚上，也看了很多博客模板，但是没有找到心仪的。后来转念一想，“没有设计就是最好的设计”，哈哈哈，（随便敷衍一下就行了） 然后就选了最简洁的metro设计语言啦，扁平化设计，配色是冷色调，（我好像跑去Google把他的material design的配色偷来了= =） Metro风格见下图： Metro简介：（来自Wikipedia） Metro是根据瑞士平面设计的设计原则，此设计的原则曾在Windows XP的Windows Media Center中体现，这有利于以文字为主的界面导航。2006年，Zune开始使用类似Metro的设计风格。微软的设计师计划重新设计现有用户界面、更清爽的排版和较少的重点以便于用户使用。[7]Zune的计算机端配套程序也使用了不同于以往Portable Media Center用户界面的清爽排版和设计。 设计理念： Metro 作为一种文字导向（typography-based）的设计，设计一般采用微软WP为此设计的标准字体：”Segoe WP”，它也比起其他 UI 设计风格更加注重字体，并且在持续不停进化中，原因是 Metro 的设计原则之一是”content before chrome”，翻译过来大致是“内容大于装饰”，所以这种设计风格更加注重应用内容本身（一般以文字和线描图展现），而不是在于传统设计上的“Graphic”（图形），这也是当初它搭配在 Lumia 上一出世就把大家惊艳到的主要因素。 这种基于瑞士平面设计的设计原则，有利于设计出以文字为主的导航界面。机场和地铁的指示牌给了微软设计团队灵感，其风格大量采用大字体，能吸引观众之注意力。微软认为 Metro 设计主题应该是：“光滑、快、现代”（Simple.Clean.Modern），于是现在你看到的 Metro 的图标设计也不同于 Android 和 iOS，即便它还是有不少的传统意义上的图标。 不过说实话我现在做出来的效果只是一个低配版的metro，就像win10之于win8= =。 我还是蛮喜欢Metro Design的，可惜现在微软已经放弃这个了，开始搞Fluent Design（流畅设计），见微软官网：https://www.microsoft.com/design/fluent/#/ 感觉这个Fluent有点靠拢Google的Material Design了，开始突出层次感，而且还用上了Aero风的毛玻璃~ 现在只做好了主页，不过其他页面也很快了，等做完再发一篇博客设计介绍的博客好了。 最大滴问题我觉得最大滴问题还是动效设计吧，因为最近学了很多css3动画的用法，所以就满脑子骚操作，总想做得花里胡哨的，但是又必须遵守设计规范，不能随便做动画，真令人头大啊= =。 动画方面还是收敛一点吧，别太过分了 = = diss一下js！从其他语言过来的我根本不能习惯for in是个坑这个问题，就是出了几次错我去查了一下才发现js的for in根本没啥用 = =，谁没事把对象拿来遍历啊~ 换成for of之后就舒服多了~ 关于js的四种for循环，可以看一下这篇文章：https://juejin.im/entry/5a1654e951882554b8373622 ps：溜了，只能diss一点点，再多要被打了，js还是很好用的，狗头保命（逃 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://blog.deali.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"风格","slug":"风格","permalink":"http://blog.deali.cn/tags/%E9%A3%8E%E6%A0%BC/"},{"name":"开始","slug":"开始","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%A7%8B/"}]},{"title":"Ubuntu-16-04-升级Python版本到3-6","slug":"c1ab525292c46426f7882cf8887924f3","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.916Z","comments":true,"path":"posts/377b0b8e6a651602.html","link":"","permalink":"http://blog.deali.cn/posts/377b0b8e6a651602.html","excerpt":"","text":"前言没办法，unity桌面实在是太好用了，Ubuntu18.04上安装了unity桌面毕竟不够完美，所以我昨天就降级到Ubuntu16.04，相守一波原生Unity桌面的快感。一切都OK，不过Python版本有点低，所以要用万能PPA源升级一下。 操作安装Python3.6 123sudo add-apt-repository ppa:jonathonf/python-3.6sudo apt-get updatesudo apt-get install python3.6 Python版本切换：注意！经过一段时间的测试，在这里最好不好去切换Python3的版本，继续保留3.5就可以了，因为Ubuntu很多系统软件都是依赖Python的，亲测升级到3.6后很多软件都会出现问题！ 123sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 2sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2sudo update-alternatives --config python3 验证 1python3 -V 结果： ok！ 安装pip31curl https://bootstrap.pypa.io/get-pip.py | sudo python3.6 终端打不开问题升级到Python3.6之后自带终端打不开了，这时候可以按Ctrl+Altt+F1切换到命令行，执行以下命令： 123cd /usr/lib/python3/dist-packages/gi/sudo cp _gi.cpython-35m-x86_64-linux-gnu.so _gi.cpython-36m-x86_64-linux-gnu.sosudo cp _gi_cairo.cpython-35m-x86_64-linux-gnu.so _gi_cairo.cpython-36m-x86_64-linux-gnu.so 然后再按Ctrl+Atl+F7切换回图形界面就可以了～ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"升级","slug":"升级","permalink":"http://blog.deali.cn/tags/%E5%8D%87%E7%BA%A7/"},{"name":"版本","slug":"版本","permalink":"http://blog.deali.cn/tags/%E7%89%88%E6%9C%AC/"}]},{"title":"从“热门小程序头脑王者被下架”看微信小程序环境","slug":"cb33b8927517bc9fc1fb49cf1db52819","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.920Z","comments":true,"path":"posts/45930b3431d083ae.html","link":"","permalink":"http://blog.deali.cn/posts/45930b3431d083ae.html","excerpt":"","text":"微信小程序已经推行了挺长的时间了，依托巨大的用户优势，很快吸引了一大批开发者，包括不久前刚刚上线的小游戏，微信小程序现在已经成为很多公司的选择。 前段时间，有一个微信小程序很火，就是答题PK游戏——头脑王者，本质上是个游戏，但是通过答题的方式进行竞技，给用户产生一种“玩游戏的同时还能增长知识的感觉”，而且比当下的热门手游更能利用碎片时间，很受用过户欢迎。 然而最近这个小程序却被微信官方下架了，原为是那些问题里面有很多低俗的内容。微信官方的出发点是好的，维护互联网环境，先不说微信强制下架小程序的做法是对是错，先简单比较一下微信小程序和传统App、WebApp之间有什么异同。 与传统App相同点：小程序和传统App一样可以在手机的桌面或应用抽屉里有方便的入口。在使用体验上很接近。 与H5开发的WebApp相同点：实现的技术相近，都是JavaScript开发的。通过网络直接加载，无需安装。需要通过容器运行。（小程序：微信；WebApp：手机浏览器） 与其他两种应用的区别：运行性能比原生App低。通过微信官方进行审核管理，限制比WebApp多。功能限制很多，只能作为传统App的补充。小程序运行在微信的封闭环境中，不能接入其他的应用。 通过小程序的这些特点，也不难看出它的优缺点。优点显而易见，微信的用户基数大，小程序说到底就是把之前基于微信公众号的H5页面应用做一个升级，提升一下用户体验。而且还能和公众号绑定，推广方便，用户使用也很方便，可以快速分发。而缺点也是比较明显的，任何人要发布小程序都是要经过微信官方的审核的，倒不是说审核本身有什么问题，传统App也是要经过谷歌商店/苹果商店的审核，但是，小程序的机制和App不同，小程序需要在联网状态下使用，相当于打开一个网页，而且每次启动小程序，都需要经过微信官方的允许才可以。 也就是说，假如微信把小程序下架了，那么就算你之前安装过，也是无法打开小程序的。而传统App不同，安装在手机里，即使被商店下架了，只要App的提供商没有停止服务，就仍然能正常使用这个App，并且可以通过其他渠道来安装App。 想象一下，假如你用着Windows系统，有一天上班时打开Photoshop准备P图的时候，微软提示你，Photoshop因为违反微软的某个协议已经被下架了，你已经无法在电脑上使用Photoshop了，你是什么感受。当然这里拿PS这种生产工具和一个娱乐小程序做对比不太合适，微信小程序现在就是在打造一个封闭的平台，所有的生态都围绕着微信来进行，你想做什么都绕不过微信大boss。 看到这里，你大概已经了解我对小程序是什么态度了，重申一下，我对小程序持保守态度，小程序不是不能做，微信用户量这么多，微信小程序作为一种低成本的分发渠道，不用肯定是大浪费，但是不能在一棵树上吊死，小程序只能用于正常App的补充，且互联网行业的模仿风气大都已经为人熟知，所以对于小程序运营方面的风险，也不能不考虑。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"时评","slug":"时评","permalink":"http://blog.deali.cn/categories/%E6%97%B6%E8%AF%84/"}],"tags":[{"name":"王者","slug":"王者","permalink":"http://blog.deali.cn/tags/%E7%8E%8B%E8%80%85/"},{"name":"环境","slug":"环境","permalink":"http://blog.deali.cn/tags/%E7%8E%AF%E5%A2%83/"},{"name":"微信开发","slug":"微信开发","permalink":"http://blog.deali.cn/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"},{"name":"微信","slug":"微信","permalink":"http://blog.deali.cn/tags/%E5%BE%AE%E4%BF%A1/"},{"name":"程序","slug":"程序","permalink":"http://blog.deali.cn/tags/%E7%A8%8B%E5%BA%8F/"},{"name":"下架","slug":"下架","permalink":"http://blog.deali.cn/tags/%E4%B8%8B%E6%9E%B6/"},{"name":"热门","slug":"热门","permalink":"http://blog.deali.cn/tags/%E7%83%AD%E9%97%A8/"},{"name":"头脑","slug":"头脑","permalink":"http://blog.deali.cn/tags/%E5%A4%B4%E8%84%91/"}]},{"title":"升级pip之后连pip都不能用了？简单解决方法","slug":"c26df71f736a1e21d8db2dacfaf27459","date":"2020-03-02T02:27:53.000Z","updated":"2020-03-02T03:23:43.920Z","comments":true,"path":"posts/899c84112f1c1e4a.html","link":"","permalink":"http://blog.deali.cn/posts/899c84112f1c1e4a.html","excerpt":"","text":"前言最近在服务器上部署项目的时候，用pip安装库，结果提示可以升级，那我就按照提示升级了pip，结果pip就用不了了。 错误信息如下： 1234Traceback (most recent call last): File \"/usr/bin/pip3\", line 9, in &lt;module&gt; from pip import mainImportError: cannot import name 'main' 解决方法当然是重新安装一次pip咯 1sudo python3 -m pip uninstall pip &amp;&amp; sudo apt install python3-pip --reinstall","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/categories/Python/"}],"tags":[{"name":"解决","slug":"解决","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3/"},{"name":"方法","slug":"方法","permalink":"http://blog.deali.cn/tags/%E6%96%B9%E6%B3%95/"},{"name":"网络协议","slug":"网络协议","permalink":"http://blog.deali.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"升级","slug":"升级","permalink":"http://blog.deali.cn/tags/%E5%8D%87%E7%BA%A7/"},{"name":"不能","slug":"不能","permalink":"http://blog.deali.cn/tags/%E4%B8%8D%E8%83%BD/"}]},{"title":"把爬虫放到手机上跑！Flutter爬虫框架初探~","slug":"70382942feb2b575251ffeb673b759ed","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.800Z","comments":true,"path":"posts/f69d7ad5b79263f8.html","link":"","permalink":"http://blog.deali.cn/posts/f69d7ad5b79263f8.html","excerpt":"","text":"最近做毕设需要大量数据训练模型，很多网站又要反爬机制，得爬一会停一会，所以特别慢，要是我用电脑24小时爬虫太费电了，于是想到利用手机~ 然后就想到flutter，安卓苹果旧手机都能利用起来做数据采集。 ok，然后就开始做，折腾了一天做了一个大概的框架。总算可以方便的添加爬虫任务了，集成了配置、日志、数据持久化这些基本的功能，然后封装网络请求、网页解析的功能，用起来还行。 只不过众所周知的，dart是一种单线程语言，虽说提供了isolate机制，但是不能共享内存，用起来缚手缚脚的，然后flutter还禁用了反射！谷歌团队真是牛逼，我折腾了一下午之后被这辣鸡玩意气到了，索性弃坑了。 想要实现多线程爬虫的话看来应该是要写一部分原生代码才行，那我还不如全部用原生。。。 （ps：放着好好的Android原生不用，用什么辣鸡flutter做爬虫?? 秀逗了啊，气死我了） app截图 系统架构画了几个图 SpiderTask基类，所有爬虫类都从这个类派生，SpiderTask内自己维护一个TaskConfig任务配置对象和一个日志对象。如下图： 至于数据持久化的，我用了另外一个类，采用单例模式，在app启动的时候初始化。 工作流程 在home里的任务列表中注册爬虫任务 启动app后在主页面管理各个爬虫任务 选择一个任务启动 进入详情页面会自动与爬虫任务的logging对象进行绑定，可以看到日志输出 简单的例子写一个简单的例子，运行后会爬取CN Radio网站的新闻。 12345678910111213141516171819import 'package:flutter/src/widgets/framework.dart';import 'package:flutter_spider_fx/framework/index.dart';class CNRadioNewsSpider extends SpiderTask &#123; var url = 'http://news.cnr.cn/'; CNRadioNewsSpider(BuildContext context) : super(context, 'CNRadioNewsSpider'); @override start() async &#123; super.start(); var dom = await CatHttp.getDocument(url, encoding: 'gb2312'); var links = dom.querySelectorAll('.contentPanel .lh30 a'); links.forEach((link) &#123; logging.debug(link.attributes['href']); logging.info(link.text); &#125;); &#125;&#125; 框架代码了解详情可以在GitHub查看项目代码~ 项目地址：https://github.com/Deali-Axy/flutter_spider_fx 最后提一下：辣鸡flutter，千万别迷信谷歌的技术，这玩意目前仍然是个坑，写个简单GUI实现CRUD还行，高级的玩法就不要想了。 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://blog.deali.cn/categories/Flutter/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","permalink":"http://blog.deali.cn/tags/flutter/"},{"name":"手机","slug":"手机","permalink":"http://blog.deali.cn/tags/%E6%89%8B%E6%9C%BA/"},{"name":"框架","slug":"框架","permalink":"http://blog.deali.cn/tags/%E6%A1%86%E6%9E%B6/"},{"name":"初探","slug":"初探","permalink":"http://blog.deali.cn/tags/%E5%88%9D%E6%8E%A2/"},{"name":"放到","slug":"放到","permalink":"http://blog.deali.cn/tags/%E6%94%BE%E5%88%B0/"}]},{"title":"Ubuntu-18-04-开启托盘图标点击最小化","slug":"c749d4d957b7a8868013fd1f58bc8f32","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.920Z","comments":true,"path":"posts/64e008bf9c11dd1c.html","link":"","permalink":"http://blog.deali.cn/posts/64e008bf9c11dd1c.html","excerpt":"","text":"前言Ubuntu的托盘挺好看的，美中不足的就是点击一个打开的应用图标不能像Windows那样最小化。 操作1gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize' 截图","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"开启","slug":"开启","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%90%AF/"},{"name":"图标","slug":"图标","permalink":"http://blog.deali.cn/tags/%E5%9B%BE%E6%A0%87/"},{"name":"托盘","slug":"托盘","permalink":"http://blog.deali.cn/tags/%E6%89%98%E7%9B%98/"},{"name":"点击","slug":"点击","permalink":"http://blog.deali.cn/tags/%E7%82%B9%E5%87%BB/"}]},{"title":"在Android模拟器里取得root权限","slug":"c04b310cf40076671ef99be90a30bed0","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.916Z","comments":true,"path":"posts/d6c488cd114fe5da.html","link":"","permalink":"http://blog.deali.cn/posts/d6c488cd114fe5da.html","excerpt":"","text":"前言android 开发过程中程序很多时候免不了需要对系统目录下的内容进行操作，虽然android的内核是linux系统，但是在linux中切换到root下的方式是sudo root，但是在的android中并没有提供我们su文件。So我们要向需要root的系统中添加su文件，同时改变su二进制文件的权限。 操作步骤步骤一将需要root的模拟器运行起来 步骤二在有 supersu.apk文件的目录处执行如下命令 $ adb -e install supersu.apk将super.apk 安装到模拟器中，安装好后不要急着运行此App 步骤三$ emulator.exe -avd [模拟器名字] -writable-system以可写的方式运行模拟器，你应该在你的sdk目录下的tools文件目录下使用这句命令，因为在这下面才有emulator.exe程序 步骤四将下载好的supersu.zip 文件解压，你能看到里面有很多文件夹中都包含su文件。我的模拟器模拟器是Androidx86，所以我在x86文件夹下找到su.pie文件，如果你的android版本是5.1和大于5.1版本的系统使用su.pie比su文件更合适，可以避免出现一些不必要的问题，接下来你需要如下操作 12345$ adb root$ adb remount$ adb -e push C:\\SuperSU-v2.79\\x86\\su.pie /system/xbin/su 在root状态下 adb remount 的意思是 重新挂载系统分区，使系统分区重新可写,一般情况下system下面的文件斯不允许只读的。通过push的方式将su.pie拷贝到/system/xbin/su文件中 注意 如果你android模拟器的系统版本小于5.1你需要使用的是su的二进制文件，而不是su.pie 1$ adb -e push C:\\SuperSU-v2.79\\x86\\su /system/xbin/su 步骤五现在我们需要获得通过adb去修改模拟器中su二进制文件的权限 1234567$ adb -e shell$ su root$ cd /system/xbin$ chmod 06755 su 如果你发现通过ls -l 看到你的su文件的权限是rwsr_x_x 了说明已经成功 步骤六现在我们需要安装su 二进制件（具体安装到什么地方我也不清楚，也许是安装到supersu.apk中吧? 我也不知道）同时将它设置为后台守护程序 $ su --install$ su --daemon&amp; 这一步的目的暂时我也没有仔细了解 步骤七设置SELinux的限制，主要是关闭SELinux，这个命令的具体执行位置没有具体的固定，但貌似在最后执行没有什么问题 $ setenforce 0 到这里，我的android模拟器似乎已经完成的root，重新打开android模拟器，点击运行supersu程序（也就是刚才安装到你android系统中的程序），打开和可能它会提示你更新，你可以直接忽略直接使用。然后你的系统就已经完成root了，可以做一些涉及到系统的操作了。 注意如果最后点击supersu App时提示的是找不到su文件说明，你的su文件可能是不匹配，或者是因为你在没有将su文件的设置进行完整就打开了supersu App。哈哈可以尝试一下卸载supersu App,重从头开始以上的几个步骤。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Android","slug":"Android","permalink":"http://blog.deali.cn/categories/Android/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"模拟器","slug":"模拟器","permalink":"http://blog.deali.cn/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8/"},{"name":"权限","slug":"权限","permalink":"http://blog.deali.cn/tags/%E6%9D%83%E9%99%90/"},{"name":"取得","slug":"取得","permalink":"http://blog.deali.cn/tags/%E5%8F%96%E5%BE%97/"}]},{"title":"Apache-Commons-IO-最佳实践","slug":"b9dc62668e1dace7e1ccdffc2883ed11","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.904Z","comments":true,"path":"posts/ae75f61093b6e7b4.html","link":"","permalink":"http://blog.deali.cn/posts/ae75f61093b6e7b4.html","excerpt":"","text":"本文列举了Java输入输出部分（IO area）的大量“最佳实践”（best practices）。 java.io.File通常你需要去处理文件或文件名时，有许多会出错的情况： 一个类可在Unix运行但不能在Windows运行，反之亦然。 由于双路径分隔符（path separator）或缺失路径分隔符（path separator）导致文件名无效。 (在Windows上的)符合通用命名标准（UNC）的文件名无法在开发人员开发的（home-grown）工具方法中运行 等等 上述是字符串（String）文件名不运行的准确原因。使用java.io.File类代为处理上述情况将更合适。因此我们的最佳实践（best practice）推荐使用java.io.File类代替字符串（String）处理文件名以避免依赖具体的平台（platform）。 Commons-io 1.1 包括一个专用于处理文件名的类-文件名工具类（FilenameUtils）。它处理了许多上述文件名的问题，但是我们仍然推荐，你尽可能地使用java.io.File对象来处理。 让我们看一个例子。 12345678public static String getExtension(String filename) &#123; int index = filename.lastIndexOf('.'); if (index == -1) &#123; return \"\"; &#125; else &#123; return filename.substring(index + 1); &#125; &#125; 简单吗？对，但如果开发人员传入（pass）一个全路径（full path）字符串而不仅仅是一个文件名会发生什么？考虑以下情况，传入完全符合要求的路径：&quot;C:\\Temp\\documentation.new\\README&quot;。上面定义的方法（method）可能返回（return） &quot;new\\README&quot;-完全不是你想要的结果。 请使用 java.io.File 代替字符串（String）处理文件名。该类所提供的功能是经过良好测试的（well tested）。在文件工具类（FileUtils）中你将找到关于 java.io.File 的其他有用的工具方法（function）。 例如： 123String tmpdir = \"/var/tmp\"; String tmpfile = tmpdir System.getProperty(\"file.separator\") \"test.tmp\"; InputStream in = new java.io.FileInputStream(tmpfile); 改为： 123File tmpdir = new File(\"/var/tmp\"); File tmpfile = new File(tmpdir, \"test.tmp\"); InputStream in = new java.io.FileInputStream(tmpfile); 输入输出流缓冲（Buffering streams）输入输出性能非常依赖缓冲策略（buffering strategy）。一般而言，缓冲512或1024大小字节来读取数据块（packets）是非常迅速的，因为这个大小与数据块（packets）在硬盘（harddisk）文件系统（file system）或文件缓存（file system cache）中的大小非常匹配。而且当你仅仅读取一点字节时，时间性能就会显著下降（drop）。 当读取或写入输入输出流时，特别是当访问文件的时候，确保你正确地缓冲输入输出流。只需要使用缓冲字节输入流（BufferedInputStream）修饰（decorate）你的文件字节输入流（FileInputStream）即可 译注：Java中的输入输出流采用了修饰模式，或叫装饰模式： 12345678InputStream in = new java.io.FileInputStream(myfile); try &#123; in = new java.io.BufferedInputStream(in); in.read(..... &#125; finally &#123; IOUtils.closeQuietly(in); &#125; 注意，你不能缓存一个已经缓冲了的输入输出流。一些组件，例如XML解析器（XML parser）会使用他们自己的字节输入流（InputStream）缓存修饰（decorate），你传递一个缓存输入输出流到XML解析器（XML parser）也没多大影响但会拖慢（slow down）你的代码性能。如果你用我们的复制工具类（CopyUtils）或输入输出工具类（IOUtils），你就不需要额外缓冲输入输出流，将这些代码当作已经在复制过程中缓存了即可。检查Javadoc可以获取更多信息。其他如在你写入一个字节数组输出流（ByteArrayOutputStream）到内存（memory）的情况，是不需要缓冲的。 本文由侯骏雄授权发表。翻译：侯骏雄（QQ：2442278700）博客：http://blog.csdn.net/houjx114 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.deali.cn/tags/%E8%BF%90%E7%BB%B4/"},{"name":"实践","slug":"实践","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E8%B7%B5/"}]},{"title":"Debian下SSH服务的安装与配置","slug":"b97b5caf768680ffe009ccd9bf9a9ff8","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.904Z","comments":true,"path":"posts/561461a96ca69678.html","link":"","permalink":"http://blog.deali.cn/posts/561461a96ca69678.html","excerpt":"","text":"https://cnzhx.net/blog/linux-server-ssh-key-auth-configuration/","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"JavaEE","slug":"JavaEE","permalink":"http://blog.deali.cn/tags/JavaEE/"},{"name":"服务","slug":"服务","permalink":"http://blog.deali.cn/tags/%E6%9C%8D%E5%8A%A1/"}]},{"title":"C#学习（一）委托的概念和使用","slug":"b92755654973f5d219b5a07a59aa93b1","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.904Z","comments":true,"path":"posts/df4c8411bab91fe6.html","link":"","permalink":"http://blog.deali.cn/posts/df4c8411bab91fe6.html","excerpt":"","text":"前言C#学习系列是根据我以前的笔记整理出来复习，顺便发一下文章做个记录。 先引用一个介绍： C# 中的委托（Delegate）类似于 C 或 C++ 中函数的指针。委托（Delegate） 是存有对某个方法的引用的一种引用类型变量。引用可在运行时被改变。委托（Delegate）特别用于实现事件和回调方法。所有的委托（Delegate）都派生自 System.Delegate 类。 根据使用其他语言的经验，在Python和js中，函数（方法）也是一种类型，可以赋值给变量，然后通过变量来调用。C#里也差不多是这个道理，不过C#的委托可以存入多个函数（方法），当调用这个委托的时候同时调用多个方法，这个叫做多播委托。委托具体的实现细节我还没了解，等接下来的学习中继续深入哈～ 代码例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859using System;namespace DelegateAndEvent&#123; class Program &#123; delegate void voidDelegate(); delegate int intDelegate(); static void Main(string[] args) &#123; // 定义一个多播委托 voidDelegate d1 = T1; d1 += T2; d1 += T3; d1 += T4; // 执行委托 // 会同时执行t1,t2,t3,t4四个方法 d1(); &#125; static void T1() &#123; Console.WriteLine(\"1\"); &#125; static void T2() &#123; Console.WriteLine(\"2\"); &#125; static void T3() &#123; Console.WriteLine(\"3\"); &#125; static void T4() &#123; Console.WriteLine(\"4\"); &#125; static int Q1() &#123; return 1; &#125; static int Q2() &#123; return 2; &#125; static int Q3() &#123; return 3; &#125; &#125;&#125; 一点理解要理解委托，得先理解C#的类型系统，CLR支持两种基本类型，值类型和引用类型。下面这张图就可以比较清楚的看到C#的类型系统，大部分同学都是只学过Java的，可能没有深入学过C语言或C++，C#之所以能在各种场景下保持高性能（比如游戏引擎这种计算密集场景），很大程度就是优秀的类型系统设计。 值类型和引用类型介绍值类型（Value Type），值类型实例通常分配在线程的堆栈（stack）上，并且不包含任何指向实例数据的指针，因为变量本身就包含了其实例数据。其在 MSDN 的定义为值类型直接包含它们的数据，值类型的实例要么在堆栈上，要么内联在结构中。我们由上图可知，值类型主要包括简单类型、结构体类型和枚举类型等。通常声明为以下类型：int、char、float、long、bool、double、struct、enum、short、byte、decimal、sbyte、uint、ulong、ushort 等时，该变量即为值类型。 引用类型（Reference Type），引用类型实例分配在托管堆（managed heap）上，变量保存了实例数据的内存引用。其在 MSDN 中的定义为引用类型存储对值的内存地址的引用，位于堆上。我们由上图可知，引用类型可以是自描述类型、指针类型或接口类型。而自描述类型进一步细分成数组和类类型。类类型是则可以是用户定义的类、装箱的值类型和委托。通常声明为以下类型：class、interface、delegate、object、string 以及其他的自定义引用类型时，该变量即为引用类型。 内存分配数据在内存中的分配位置，取决于该变量的数据类型。由上可知，值类型通常分配在线程的堆栈上，而引用类型通常分配在托管堆上，由 GC 来控制其回收。如下图： 我们知道，每个变量或者程序都有其堆栈，不同的变量不能共有同一个堆栈地址，因此 myStruct 和myStruct2 在堆栈中一定占用了不同的堆栈地址，尽管经过了变量的传递，实际的内存还是分配在不同的地址上，如果我们再对 myStruct2 变量改变时，显然不会影响到 myStruct 的数据。从图中我们还可以显而易见的看出，myStruct 在堆栈中包含其实例数据，而 myClass 在堆栈中只是保存了其实例数据的引用地址，实际的数据保存在托管堆中。因此，就有可能不同的变量保存了同一地址的数据引用，当数据从一个引用类型变量传递到另一个相同类型的引用类型变量时，传递的是其引用地址而不是实际的数据，因此一个变量的改变会影响另一个变量的值。从上面的分析就可以明白的知道这样一个简单的道理：值类型和引用类型在内存中的分配区别是决定其应用不同的根本原因，由此我们就可以很容易的解释为什么参数传递时，按值传递不会改变形参值，而按址传递会改变行参的值，道理正在于此。 对于内存分配的更详细位置，可以描述如下： 值类型变量做为局部变量时，该实例将被创建在堆栈上；而如果值类型变量作为类型的成员变量时，它将作为类型实例数据的一部分，同该类型的其他字段都保存在托管堆上，这点我们将在接下来的嵌套结构部分来详细说明。 引用类型变量数据保存在托管堆上，但是根据实例的大小有所区别，如下：如果实例的大小小于 85000Byte 时，则该实例将创建在 GC 堆上；而当实例大小大于等于 85000byte 时，则该实例创建在 LOH（Large Object Heap）堆上。 写在后面OK，大概就写到这里，明天继续学习～ 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/tags/C/"},{"name":".Net","slug":"Net","permalink":"http://blog.deali.cn/tags/Net/"},{"name":"委托","slug":"委托","permalink":"http://blog.deali.cn/tags/%E5%A7%94%E6%89%98/"},{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"概念","slug":"概念","permalink":"http://blog.deali.cn/tags/%E6%A6%82%E5%BF%B5/"}]},{"title":"Flutter开发：ListView手动滚动到底部","slug":"d22b0273438018177444cf5d2798ccfa","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.936Z","comments":true,"path":"posts/dbbf116173b659a4.html","link":"","permalink":"http://blog.deali.cn/posts/dbbf116173b659a4.html","excerpt":"","text":"这个问题搜了很久都没找到，国内关于flutter的研究好像还没多少，不过stackoverflow真的是万能的，这里记录一下～ 原文 Use ScrollController.jumpTo() or ScrollController.animateTo() method to achieve this.Here is code snippet (After 1 second, the ListView will scroll to the bottom)by CopsOnRoad 12345678910111213class _HomePageState extends State&lt;HomePage&gt; &#123; ScrollController _controller = ScrollController(); @override Widget build(BuildContext context) &#123; Timer(Duration(milliseconds: 1000), () =&gt; _controller.jumpTo(_controller.position.maxScrollExtent)); return ListView.builder( controller: _controller, itemCount: 50, itemBuilder: (context, index) =&gt; ListTile(title: Text(\"ListTile\"),)); &#125;&#125; 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://blog.deali.cn/categories/Flutter/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","permalink":"http://blog.deali.cn/tags/flutter/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"滚动","slug":"滚动","permalink":"http://blog.deali.cn/tags/%E6%BB%9A%E5%8A%A8/"},{"name":"手动","slug":"手动","permalink":"http://blog.deali.cn/tags/%E6%89%8B%E5%8A%A8/"}]},{"title":"Linux下查看dd命令写入进度","slug":"d356c651128846119dc612f5a7849d54","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.936Z","comments":true,"path":"posts/4809d7fb30a474de.html","link":"","permalink":"http://blog.deali.cn/posts/4809d7fb30a474de.html","excerpt":"","text":"前言Linux下有一个强力工具，dd，用来操作镜像，简直神器，唯一的不足是没有显示操作进度，不过也不是没有办法，下面介绍几个查看写入进度的方法。 status选项查看进度如果你使用的是GNU版本的dd，并且coreutils版本高于8.24，那么可以使用status选项。例如： 1sudo dd if=/dev/sda of=/dev/zero status=progress 上面命令在Mac OS X上执行会出错，因为OS X使用的是BSD版本的命令行，不是GUN。你可以在Mac OS X上安装gun coreutils，或使用下面介绍的pv命令。 pv命令12sudo pv -tpreb /dev/sda | dd of=/dev/zerosudo pv -tpreb /dev/sda | dd of=/dev/zero bs=4096 conv=notrunc,noerror 使用pv配合dialog还可以显示进度条对话框： 1(sudo pv -n /dev/sda | dd of=/dev/zero) 2&gt;&amp;1 | dialog --gauge \"dd process bar\" 10 70 0 使用pkill打印进度重新打开一个Shell，然后执行如下命令即可每秒输出一次进度信息 1watch -n 1 pkill -USR1 -x dd 参考资料http://blog.topspeedsnail.com/archives/8125http://blog.topspeedsnail.com/archives/2748http://blog.topspeedsnail.com/archives/9464https://www.mobibrw.com/2017/7677","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"查看","slug":"查看","permalink":"http://blog.deali.cn/tags/%E6%9F%A5%E7%9C%8B/"},{"name":"写入","slug":"写入","permalink":"http://blog.deali.cn/tags/%E5%86%99%E5%85%A5/"},{"name":"命令","slug":"命令","permalink":"http://blog.deali.cn/tags/%E5%91%BD%E4%BB%A4/"}]},{"title":"C#中AES加密的实现","slug":"adfbb8f51eea01efd43f5252e19af985","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.892Z","comments":true,"path":"posts/e135a7c16a5c83e2.html","link":"","permalink":"http://blog.deali.cn/posts/e135a7c16a5c83e2.html","excerpt":"","text":"AES算法简介 高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。 该算法为比利时密码学家Joan Daemen和Vincent Rijmen所设计，结合两位作者的名字，以Rijndael为名投稿高级加密标准的甄选流程。（Rijndael的发音近于”Rhine doll”） AES加密过程AES加密过程是在一个4×4的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。（Rijndael加密法因支持更大的区块，其矩阵行数可视情况增加）加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤： AddRoundKey—矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。 SubBytes—通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。 ShiftRows—将矩阵中的每个横列进行循环式移位。 MixColumns—为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。 C#代码实现定义默认密钥向量 12private static byte[] _aesKetByte = &#123; 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF &#125;;private static string _aesKeyStr = Encoding.UTF8.GetString(_aesKetByte); 随机生成密钥 12345678910111213141516171819public static byte[] GetIv(int n)&#123; char[] arrChar = new char[]&#123; 'a','b','d','c','e','f','g','h','i','j','k','l','m','n','p','r','q','s','t','u','v','w','z','y','x', '0','1','2','3','4','5','6','7','8','9', 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','Q','P','R','T','S','V','U','W','X','Y','Z' &#125;; StringBuilder num = new StringBuilder(); Random rnd = new Random(DateTime.Now.Millisecond); for (int i = 0; i &lt; n; i++) &#123; num.Append(arrChar[rnd.Next(0, arrChar.Length)].ToString()); &#125; _aesKetByte = Encoding.UTF8.GetBytes(num.ToString()); return _aesKetByte;&#125; AES加密 1234567891011121314151617181920212223242526272829303132333435363738394041424344/// &lt;summary&gt;/// AES加密/// &lt;/summary&gt;/// &lt;param name=\"Data\"&gt;被加密的明文&lt;/param&gt;/// &lt;param name=\"Key\"&gt;密钥&lt;/param&gt;/// &lt;param name=\"Vector\"&gt;向量&lt;/param&gt;/// &lt;returns&gt;密文&lt;/returns&gt;public static String AESEncrypt(String Data, String Key, String Vector)&#123; Byte[] plainBytes = Encoding.UTF8.GetBytes(Data); Byte[] bKey = new Byte[32]; Array.Copy(Encoding.UTF8.GetBytes(Key.PadRight(bKey.Length)), bKey, bKey.Length); Byte[] bVector = new Byte[16]; Array.Copy(Encoding.UTF8.GetBytes(Vector.PadRight(bVector.Length)), bVector, bVector.Length); Byte[] Cryptograph = null; // 加密后的密文 Rijndael Aes = Rijndael.Create(); try &#123; // 开辟一块内存流 using (MemoryStream Memory = new MemoryStream()) &#123; // 把内存流对象包装成加密流对象 using (CryptoStream Encryptor = new CryptoStream(Memory, Aes.CreateEncryptor(bKey, bVector), CryptoStreamMode.Write)) &#123; // 明文数据写入加密流 Encryptor.Write(plainBytes, 0, plainBytes.Length); Encryptor.FlushFinalBlock(); Cryptograph = Memory.ToArray(); &#125; &#125; &#125; catch &#123; Cryptograph = null; &#125; return Convert.ToBase64String(Cryptograph);&#125; AES解密 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/// &lt;summary&gt;/// AES解密/// &lt;/summary&gt;/// &lt;param name=\"Data\"&gt;被解密的密文&lt;/param&gt;/// &lt;param name=\"Key\"&gt;密钥&lt;/param&gt;/// &lt;param name=\"Vector\"&gt;向量&lt;/param&gt;/// &lt;returns&gt;明文&lt;/returns&gt;public static String AESDecrypt(String Data, String Key, String Vector)&#123; Byte[] encryptedBytes = Convert.FromBase64String(Data); Byte[] bKey = new Byte[32]; Array.Copy(Encoding.UTF8.GetBytes(Key.PadRight(bKey.Length)), bKey, bKey.Length); Byte[] bVector = new Byte[16]; Array.Copy(Encoding.UTF8.GetBytes(Vector.PadRight(bVector.Length)), bVector, bVector.Length); Byte[] original = null; // 解密后的明文 Rijndael Aes = Rijndael.Create(); try &#123; // 开辟一块内存流，存储密文 using (MemoryStream Memory = new MemoryStream(encryptedBytes)) &#123; // 把内存流对象包装成加密流对象 using (CryptoStream Decryptor = new CryptoStream(Memory, Aes.CreateDecryptor(bKey, bVector), CryptoStreamMode.Read)) &#123; // 明文存储区 using (MemoryStream originalMemory = new MemoryStream()) &#123; Byte[] Buffer = new Byte[1024]; Int32 readBytes = 0; while ((readBytes = Decryptor.Read(Buffer, 0, Buffer.Length)) &gt; 0) &#123; originalMemory.Write(Buffer, 0, readBytes); &#125; original = originalMemory.ToArray(); &#125; &#125; &#125; &#125; catch &#123; original = null; &#125; return Encoding.UTF8.GetString(original);&#125; 使用默认向量加解密 123456789101112131415161718192021/// &lt;summary&gt;/// AES加密(无向量)/// &lt;/summary&gt;/// &lt;param name=\"Data\"&gt;被加密的明文&lt;/param&gt;/// &lt;param name=\"Key\"&gt;密钥&lt;/param&gt;/// &lt;returns&gt;密文&lt;/returns&gt;public static string AESEncrypt(String Data, String Key)&#123; return AESEncrypt(Data, Key, _aesKeyStr);&#125;/// &lt;summary&gt;/// AES解密(无向量)/// &lt;/summary&gt;/// &lt;param name=\"Data\"&gt;被加密的明文&lt;/param&gt;/// &lt;param name=\"Key\"&gt;密钥&lt;/param&gt;/// &lt;returns&gt;明文&lt;/returns&gt;public static string AESDecrypt(String Data, String Key)&#123; return AESDecrypt(Data, Key, _aesKeyStr);&#125; About 了解更多有趣的操作请关注我的微信公众号：DealiAxy 每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/tags/C/"},{"name":".Net","slug":"Net","permalink":"http://blog.deali.cn/tags/Net/"},{"name":"实现","slug":"实现","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E7%8E%B0/"},{"name":"信息安全","slug":"信息安全","permalink":"http://blog.deali.cn/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"加密","slug":"加密","permalink":"http://blog.deali.cn/tags/%E5%8A%A0%E5%AF%86/"}]},{"title":"Linux设置系统邮件转发到指定邮箱","slug":"d3c82f3ec610a998c6d4832bb8af402c","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.936Z","comments":true,"path":"posts/9dc7e231e9159483.html","link":"","permalink":"http://blog.deali.cn/posts/9dc7e231e9159483.html","excerpt":"","text":"前言在Linux的操作中，有的时候每敲一下回车，就出来You have new mail in /var/spool/mail/root的提示，究竟是为什么呢？Linux 系统经常会自动发出一些邮件来提醒用户系统中出了哪些问题（收件箱位置：/var/mail/）。可是这些邮件都是发送给 root 用户的。出于系统安全考虑，通常不建议大家直接使用 root 帐户进行日常操作。所以要想点办法来让系统把发给 root 用户的邮件也给自己指定的外部邮箱发一份，或者是直接关闭此项服务。 关闭sendmail服务这里介绍一种不用关闭sendmail服务的方法 12echo “unset MAILCHECK” &gt;&gt; /etc/profilesource /etc/profile 关闭sendmail的功能： 123chmod 0 /usr/sbin/sendmailmv /usr/sbin/sendmail /usr/sbin/sendmail.bakln -s /var/qmail/bin/sendmail /usr/sbin/sendmail 清空 /var/spool/mail/root日志 12cat /dev/null &gt; /var/spool/mail/rootcat /dev/null&gt;;/var/spool/mail/root root邮件转发到自己的邮箱方法一修改此文件 12/etc/log.d/logwatch.conf添加 MailTo = root,xxx@xxx.com 方法二12修改 /etc/aliases添加 root: xxx@xxx.com 注意：好像如果设置成和主机同域的，好像邮件就发不成，比如本机邮件就是moper.me，那么发这个就没法发，相应的发其他邮箱就可以成功。 关于“/etc/aliases”： 当sendmail收到一个要送给xxx的信时，它会依据/etc/aliases文件中的内容送给另一个使用者。这个功能可以创造一个只有在信件系统内才有效的使用者。例如mailing list就会用到这个功能，在 mailing list 中，我们可能会创造一个叫 redlinux@link.ece.uci.edu的 mailinglist，但实际上并没有一个叫redlinux的使用者。实际 aliases档的内容是将送给这个使用者的信都收给mailing list处理程式负责分送的工作。 /etc/aliases是一个文本文档，而sendmail需要一个二进位格式的 /etc/aliases.db。newaliases的功能传是将/etc/aliases转换成一个sendmail所能了解的db文件： [root@centos ~]# newaliases 除root外的其它用的邮件可以通过在用户/home/下建立一个.forward文件实现转发://somebodyother1other2文件权限设为600,作用一样,但.forward可以由用户自行维护,而aliases则只有治理员才能修改。 设定~/.forward档案加入转寄目的即可。 参考资料http://moper.me/linux-you-have-new-mail-in.html About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"系统","slug":"系统","permalink":"http://blog.deali.cn/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"设置","slug":"设置","permalink":"http://blog.deali.cn/tags/%E8%AE%BE%E7%BD%AE/"},{"name":"指定","slug":"指定","permalink":"http://blog.deali.cn/tags/%E6%8C%87%E5%AE%9A/"},{"name":"邮件","slug":"邮件","permalink":"http://blog.deali.cn/tags/%E9%82%AE%E4%BB%B6/"},{"name":"邮箱","slug":"邮箱","permalink":"http://blog.deali.cn/tags/%E9%82%AE%E7%AE%B1/"},{"name":"转发","slug":"转发","permalink":"http://blog.deali.cn/tags/%E8%BD%AC%E5%8F%91/"}]},{"title":"记一次AndroidStudio在Linux环境上的奇葩错误，Argument-for-@NotNull-parameter-'messag","slug":"acd156247257a71faecf79ddb0a10e44","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.888Z","comments":true,"path":"posts/e707ac437147d0b4.html","link":"","permalink":"http://blog.deali.cn/posts/e707ac437147d0b4.html","excerpt":"","text":"错误信息1Argument for @NotNull parameter 'message' of com/android/tools/idea/gradle/project/sync/GradleSyncState.syncFailed must not be null java.lang.IllegalArgumentException: Argument for @NotNull parameter 'message' of com/android/tools/idea/gradle/project/sync/GradleSyncState.syncFailed must not be null at com.android.tools.idea.gradle.project.sync.GradleSyncState.$$$reportNull$$$0(GradleSyncState.java) at com.android.tools.idea.gradle.project.sync.GradleSyncState.syncFailed(GradleSyncState.java) at com.android.tools.idea.gradle.project.sync.idea.IdeaSyncPopulateProjectTask.doPopulateProject(IdeaSyncPopulateProjectTask.java:135) at com.android.tools.idea.gradle.project.sync.idea.IdeaSyncPopulateProjectTask.populate(IdeaSyncPopulateProjectTask.java:97) at com.android.tools.idea.gradle.project.sync.idea.IdeaSyncPopulateProjectTask.access$000(IdeaSyncPopulateProjectTask.java:39) at com.android.tools.idea.gradle.project.sync.idea.IdeaSyncPopulateProjectTask$1.run(IdeaSyncPopulateProjectTask.java:86) at com.intellij.openapi.progress.impl.CoreProgressManager$TaskRunnable.run(CoreProgressManager.java:750) at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:157) at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:580) at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:525) at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:85) at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:144) at com.intellij.openapi.progress.impl.CoreProgressManager$4.run(CoreProgressManager.java:395) at com.intellij.openapi.application.impl.ApplicationImpl$1.run(ApplicationImpl.java:305) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) 情境之前这几个android项目是在windows上编写的，切换到linux环境之后继续做开发。我把这个分区挂载到 /media/user/data 之后，为了方便使用，创建了一个软链接 /home/user/data/打开项目是从这个软链接打开的，结果每次都build不了，我还以为我电脑出了什么问题，Google无果。 偶然在StackOverFlow看到一个奇葩问题，# [Android Studio build error on NTFS partition](https://stackoverflow.com/questions/52721989/android-studio-build-error-on-ntfs-partition) I’m having problems building apps on Android Studio. Things work fine when the project is on my ext4 partition, but when I created a new one on my NTFS, I encountered this: The error disappeared when I restarted Android Studio, but after that I still cannot run my app (the project structure in the sidebar is not displayed properly).I’m using Android Studio 3.2 on Ubuntu 18.04.1. 下面有一个回答： I figured it out. (By mistake, to be honest…) Let’s say you have an NTFS partition mount at /mnt/ntfs, and your project is at /mnt/ntfs/projects/project. Your home partition (ext4) is mounted at /home, your home directory is /home/user and you have a symbolic link at /home/user/projects that points to /mnt/ntfs/projects. The reason I (and hopefully you too) have encountered this error is that when using Android Studio’s “Open Project…” option, I provided the symbolic link (/home/user/projects/project). When trying to provide the real path (/mnt/ntfs/projects/project) the gradle sync succeeded. So to fix this for now, simply provide the real path. However, this should probably be addressed by IntelliJ or the developers of Gradle. 解决所以就解决了呀，不要用软链接打开就行了，Gradle不支持软链接文件夹。无语 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Android开发","slug":"Android开发","permalink":"http://blog.deali.cn/categories/Android%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"错误","slug":"错误","permalink":"http://blog.deali.cn/tags/%E9%94%99%E8%AF%AF/"},{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"环境","slug":"环境","permalink":"http://blog.deali.cn/tags/%E7%8E%AF%E5%A2%83/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"},{"name":"奇葩","slug":"奇葩","permalink":"http://blog.deali.cn/tags/%E5%A5%87%E8%91%A9/"}]},{"title":"How-to-change-mouse-cursor-and-theme-","slug":"d5ac2923ea8d78ecd481738be27af408","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.940Z","comments":true,"path":"posts/84fa17a55804f5c6.html","link":"","permalink":"http://blog.deali.cn/posts/84fa17a55804f5c6.html","excerpt":"","text":"In order to get your custom cursor to work with all applications do: Download a cursor theme. Extract it to /usr/share/icons or ~/.local/share/icons Open Gnome Tweak Tool and change the cursor theme. Open a Terminal. Run this command:1sudo update-alternatives --config x-cursor-theme Select the number corresponding to your choice Log out. Log back in.","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[]},{"title":"CentOS6安装Nginx，Linux编译安装Nginx","slug":"d6a58176c5d13a4220af0fa4432ff64f","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.952Z","comments":true,"path":"posts/61e5c5529fa098b0.html","link":"","permalink":"http://blog.deali.cn/posts/61e5c5529fa098b0.html","excerpt":"","text":"前言最近笔者把一个django项目部署到一个新的服务器上，而这个服务器给的是CentOS6版本的系统，官方源很旧，yum管理器被运维搞坏了，没办法加载epel源，所以想要用nginx就只能自己编译安装咯～ 下载nginx代码首先到Nginx的官网下载安装文件。链接：http://nginx.org/我用的版本是：nginx-1.12.1.tar.gz 安装编译所需环境安装gcc安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装： 1yum install gcc-c++ 安装PCRE pcre-develPCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令： 1yum install -y pcre pcre-devel 安装zlibzlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。 1yum install -y zlib zlib-devel 安装OpenSSLOpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。 1yum install -y openssl openssl-devel 安装完成以上四项之后才可以执行安装Nginx。 安装nginx解压1tar zxvf nginx-1.12.1.tar.gz 编译1234cd nginx-1.12.1./configuremakemake install 执行完以上命令之后就完成Nginx的安装，但解压目录并不是安装目录，以下通过下面的命令进行查找安装目录，本机执行完成安装目录为：/usr/local/nginx 1whereis nginx 启动与停止nginx启动、停止nginx必须进入安装目录的sbin目录中执行，也可以外面执行，但需要写全目录 12345678# 启动/usr/local/nginx/sbin/nginx# 停止# 下面命令当于先查出nginx进程id再使用kill命令强制杀掉进程。/usr/local/nginx/sbin/nginx -s stop# 下面命令待nginx进程处理任务完毕进行停止/usr/local/nginx/sbin/nginx -s quit 重新加载配置文件重新加载配置文件，当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 ngin x再启动 nginx 即可将配置信息在 nginx 中生效 1/usr/local/nginx/sbin/nginx -s reload 推荐的重启nginx顺序：对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。 12/usr/local/nginx/sbin/nginx -s quit/usr/local/nginx/sbin/nginx PS：推荐把/usr/local/nginx/sbin/加入到环境变量里面，这样使用nginx的时候就不用输入整个目录了。 设置开机自启动编辑：/etc/rc.local增加一行：/usr/local/nginx/sbin/nginx 设置执行权限： 1chmod 755 rc.local About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"编译","slug":"编译","permalink":"http://blog.deali.cn/tags/%E7%BC%96%E8%AF%91/"},{"name":"运维","slug":"运维","permalink":"http://blog.deali.cn/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"Android开发：对Gradle的折腾记录","slug":"d924f9c44c724ed233a53ef417f57b17","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/c7126ec8fda2f1da.html","link":"","permalink":"http://blog.deali.cn/posts/c7126ec8fda2f1da.html","excerpt":"","text":"前言有点烦，最近给电脑升级一下配置，加了内存和固态硬盘，结果新内存不太兼容，导致电脑频繁死机，去找商家换了一条内存之后就好了，这也导致我贸然重装了系统 = =… 有一点资料放在系统盘忘记保存结果丢了。今天下午才把新系统配置好，所以这两天都没有办法写推文。（不得不说Chrome真是好用，这同步功能免去了很多麻烦。） 首先喷一下Gradle缺点：占用资源大，速度又慢，在国内用网络还很差。今天下午在配置环境时，这货浪费了我好久的时间。一开始是Gradle文件下载不了，手动下载之后就依赖包下载不了，醉了，各种找镜像和手动下载折腾了半天都没弄好。（没有经验）你问我为啥不用代理？？啥子，我设置了socks代理了啊，可是他根本不理我，该下载不了的地方还是下载不了，maven仓库照样不能用。更多的废话就不说了，直接说解决方法：设置代理的正确姿势应该是这样，编辑gradle.properties： 这个文件的位置：Linux/Mac系统：~/.gradle/gradle.propertiesWindows系统：C:\\Users\\你的用户名\\.gradle\\gradle.properties 设置socks代理有用算我输好吧，还有https必须要设置！ 1234systemProp.http.proxyHost=127.0.0.1systemProp.http.proxyPort=1080systemProp.https.proxyHost=127.0.0.1systemProp.https.proxyPort=1080 设置完代理之后在Project Root里输入./gradlew build，应该就没什么问题了，如果有错误再根据提示信息解决就行了，我比较喜欢用命令行操作，比IDE直观。 优化Gradle速度Gradle的性能差是众所周知的，怎么解决，堆硬件呗，不充钱你也想变强？不多说，还是编辑这个gradle.properties： 1234org.gradle.daemon=trueorg.gradle.parallel=trueorg.gradle.configureondemand=trueorg.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 并且在IDE里面设置一下： emmmm嗯，关于Gradle这个配置就是这样了，现在看到这个词就有点慌，莫名回想起被Gradle支配的恐惧。溜了~ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Android开发","slug":"Android开发","permalink":"http://blog.deali.cn/categories/Android%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"记录","slug":"记录","permalink":"http://blog.deali.cn/tags/%E8%AE%B0%E5%BD%95/"},{"name":"Build Tools","slug":"Build-Tools","permalink":"http://blog.deali.cn/tags/Build-Tools/"},{"name":"折腾","slug":"折腾","permalink":"http://blog.deali.cn/tags/%E6%8A%98%E8%85%BE/"}]},{"title":"初见Flutter！框架简单介绍以及构建可发布的签名Apk包","slug":"a33129e4df9297d7d523303caf2c3efe","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.880Z","comments":true,"path":"posts/ebcc854d4972fdca.html","link":"","permalink":"http://blog.deali.cn/posts/ebcc854d4972fdca.html","excerpt":"","text":"哈喽！好久不见，算起来我已经一个多月没更新博客了，近期刚刚完成了一个项目，正好抽出时间整理一下学到的东西并且写写博客。 关于flutter开始使用flutter还是春节后的事情，其实之前很早就想学一下flutter了，毕竟谷歌出的技术总是不会太差的，无奈一直没有时间和做app的需求，这次接触了flutter之后仿佛发现了新大陆，原来开发app还能这么方便，真的颠覆了我原来的认知啊，热更新也太好用了吧，修改后立刻显示出新的效果，根本不需要像开发原生Android那样重新编译再安装，如果一开始就是这个的话，那得节约多少生命啊～不过刚刚接触的时候，有一点点点不习惯，因为flutter用的是响应式编程，不像我们平时用的超级熟练的MVC，所以一开始会有点疑惑，不过只要跟着官网的教程走，自己写完几个小demo就基本能入门了，这响应式编程很像react（反正我没用过，做前端的大佬说很像）。然后dart语言的话，怎么说嘞，感觉是一种Java/JavaScript的混合体，据说本来是想开发出来替代js地位的….很多写法真的和js很像，例如单线程+async/await操作这些，然后它又是一个强类型语言……总之语言特性的话，还不是很熟悉，写起来感觉还可以，但是也没什么特别亮眼的地方～ 进入正题前面说了一下关于flutter的，现在进入本文的正题，如何构建签名的apk包。使用AndroidStudio开发的话，里面内置的发布apk功能是有点问题的，好像没办法通过IDE生成，所以我们用官网的方法，使用flutter命令来做。 修改AndroidManifest信息首先要编译Android的APP嘛，AndroidManifest.xml是肯定要修改的，涉及到什么权限，应用名称，应用图标，这些就先自己修改哈，本文不再赘述。 配置签名文件这个签名文件，大家做Android开发的都有的啦，没有的话，使用keytool生成一个。 1keytool -genkey -v -keystore ~/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key 参数说明： 1234567-genkey 在用户主目录中创建一个key.jks文件-v 显示密钥库中的证书详细信息-alias 产生别名-keyalg 指定密钥的算法 -keystore 指定密钥库的名称(产生的各类信息将不在.jks文件中-validity 指定创建的证书有效期多少天-keysize 指定密钥长度 配置key.properties在&lt;app dir&gt;/android/目录下，创建一个key.properties文件&lt;app dir&gt;代表工程的根目录，下同。 内容如下： 1234storePassword=keystore密码keyPassword=key密码keyAlias=密钥别名storeFile=密钥路径 配置Gradle编译Android项目，Gradle是必不可少的啦！gradle文件路径&lt;app dir&gt;/android/app/build.gradle 找到android {,在这一行上面配置key.properties信息： 123def keystorePropertiesFile = rootProject.file(\"key.properties\")def keystoreProperties = new Properties()keystoreProperties.load(new FileInputStream(keystorePropertiesFile)) 继续向下，找到buildTypes {，在上面配置signingConfigs 12345678signingConfigs &#123; release &#123; keyAlias keystoreProperties['keyAlias'] keyPassword keystoreProperties['keyPassword'] storeFile file(keystoreProperties['storeFile']) storePassword keystoreProperties['storePassword'] &#125; &#125; 修改buildTypes 12345buildTypes &#123; release &#123; signingConfig signingConfigs.release &#125; &#125; 上面的操作都正确完成了的话，就可以开始构建签名的apk包了，在APP项目目录中打开终端，输入flutter的构建命令： 1flutter build apk 构建完会提示apk包的路径，可以选择使用adb来安装，也可以直接使用flutter install来安装～ About Learn more on my WeChat Official Account：DealiAxyEvery post was in my blog：blog.deali.cn 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://blog.deali.cn/categories/Flutter/"}],"tags":[{"name":"发布","slug":"发布","permalink":"http://blog.deali.cn/tags/%E5%8F%91%E5%B8%83/"},{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","permalink":"http://blog.deali.cn/tags/flutter/"},{"name":"框架","slug":"框架","permalink":"http://blog.deali.cn/tags/%E6%A1%86%E6%9E%B6/"},{"name":"构建","slug":"构建","permalink":"http://blog.deali.cn/tags/%E6%9E%84%E5%BB%BA/"},{"name":"初见","slug":"初见","permalink":"http://blog.deali.cn/tags/%E5%88%9D%E8%A7%81/"},{"name":"签名","slug":"签名","permalink":"http://blog.deali.cn/tags/%E7%AD%BE%E5%90%8D/"},{"name":"介绍","slug":"介绍","permalink":"http://blog.deali.cn/tags/%E4%BB%8B%E7%BB%8D/"}]},{"title":"Flutter移动应用快速构建实践——状态管理、国际化、数据持久化、性能优化（二）","slug":"db7810cdbdfd1fc2d0919975e0f5b8a9","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/55a2ef4b2db1f4a8.html","link":"","permalink":"http://blog.deali.cn/posts/55a2ef4b2db1f4a8.html","excerpt":"","text":"继续上一篇：极简诗词开发背后：Flutter移动应用快速构建实践——状态管理、国际化、数据持久化、性能优化（一） 前文中说到了项目结构、状态管理和国际化的方案，本文继续聊聊数据持久化和粗略的性能优化。 数据持久化目前的话，flutter用的比较多比较成熟的数据持久化就是shared_preferences和SQFLite，一个是ini配置文件，一个是SQLite数据库，小应用我比较倾向只用前者，比较方便，Sqflite能用，但是flutter至今没有很好用的ORM框架，用起来需要写很多SQL语句就很难受了。 所以下面介绍的是shared_preferences的简单用法，详细见官网：https://pub.flutter-io.cn/packages/shared_preferences 添加依赖： 12dependencies: shared_preferences: ^0.5.6 这里的官网的简单例子： 1234SharedPreferences prefs = await SharedPreferences.getInstance();int counter = (prefs.getInt('counter') ?? 0) + 1;print('Pressed $counter times.');await prefs.setInt('counter', counter); 单纯抄一下官网的例子当然是不够的，我想说的数据持久化是这个，本项目用到的方法。 还记得上一篇写到的json model模块吗，它提供的对象序列化和反序列化在持久化中很好用，在保存数据的时候，将model类转换给json数据存在SharedPreferences配置中，例如： 12/// 持久化Profile信息static saveProfile() =&gt; _prefs.setString(\"profile\", jsonEncode(profile.toJson())); 当App启动时，从SharedPreferences中读出json数据，使用model类的json构造函数，创建（反序列化）为model对象，例子如下： 1234567891011_prefs = await SharedPreferences.getInstance();var _profile = _prefs.getString(\"profile\");if (_profile != null) &#123; try &#123; profile = Profile.fromJson(jsonDecode(_profile)); // 防止读取出来是null，用于从版本已有profile数据的升级，如果是全新安装的没有这个问题 profile.darkMode = profile.darkMode ?? false; &#125; catch (e) &#123; print(e); &#125;&#125; 这样就完成了数据持久化的工作，非常简便。 相关配置接下来先讲一点有关项目配置的，无论是flutter开发还是Android开发，那都是谷歌的技术，谷歌嘛你懂的，服务器都是被屏蔽的，而且用到的Gradle那些maven源也大多是访问不了的，所以每次编译成Android Apk的时候都很慢，我们需要设置一下国内源。 修改 android/build.gradle，把里面默认的google()和jcenter()改成下面的地址就好了。 1234567repositories &#123; // google() // jcenter() maven &#123; url 'https://maven.aliyun.com/repository/google' &#125; maven &#123; url 'https://maven.aliyun.com/repository/jcenter' &#125; maven &#123; url 'http://maven.aliyun.com/nexus/content/groups/public' &#125;&#125; 还要修改 android/gradle/wrapper/gradle-wrapper.properties文件。 123456#Wed Dec 11 15:10:31 HKT 2019distributionBase=GRADLE_USER_HOMEdistributionPath=wrapper/distszipStoreBase=GRADLE_USER_HOMEzipStorePath=wrapper/distsdistributionUrl=https\\://services.gradle.org/distributions/gradle-5.4.1-all.zip 把最后一行改成国内的服务器，如：distributionUrl=https\\://downloads.gradle-dn.com/distributions/gradle-5.1.1-all.zip，改域名就可以了。 还有一个pub.dev，dart语言的包发布网站，国内访问不了，但我们有国内镜像：https://pub.flutter-io.cn/ 感谢国内开源社区的大佬们的努力！ 还有关于迁移到AndroidX的，也是一个坑来的，可以参考：Flutter开发：迁移Flutter应用到AndroidX Flutter的“多线程”接下来聊聊有关性能优化的实践，小标题的多线程我加了双引号，dart语言是单线程的，和js差不多，在flutter里面，UI和其他操作都是放在同一个线程执行的，如果主线程里面有耗时操作的话，界面就卡住了，flutter默认是60帧显示，所以如果一个操作不能在1/60秒内完成，就会影响界面刷新，产生明显的卡顿感。 那到底怎么解决啊？dart提出了一个叫Isolate的东西，类似线程，但是和主线程之间又不能共享内存，如果要共享数据，必须通过复制内存的方式传参和获取返回值，使用起来和多线程相比还是有很多限制的。 关于Isolate的详情我就不介绍那么多了，了解详情请查看官方文档和大佬的博客。这里记录一下我的实践。 前面说到主线程和isolate之间的切换开销很大，所以为了使用多线程又需要提升性能的话，就要减少isolate的创建，所以我们可以用“线程池”做负载均衡，在代码定义一个LoadBalancer，用来存我们的isolate。 1Future&lt;LoadBalancer&gt; loadBalancer = LoadBalancer.create(4, IsolateRunner.spawn); 使用的时候通过loadbalancer创建可复用的isolate： 12final lb = await loadBalancer;lb.run(Isolate方法, 参数); isolate方法是一个静态方法，接收一个参数，因为只能一个参数，所以要传多个参数的时候就需要自己定协议了，可以自己写一个类，也可以传dict或者list，我比较习惯传dict，不要单独再定义一个类。执行完的结果通过返回值返回，我一般也是返回一个dict(map)。 注意：isolate不能访问主线程的内存，在isolate内访问其他地方的变量都是无效的，请使用传参+获取返回值的方式交换数据。 并且现在不能使用print函数打印日志，也不能通过channel访问Android的logcat输出日志，据说是flutter的bug，唯一的方法是使用官方devtools里的日志工具，参考：https://flutter.dev/docs/testing/code-debugging 未完待续不知不觉又写了很多了，还有剩下一些零碎的内容，以及更多性能优化和App体积优化的内容正在研究和总结中，下篇文章再继续更新～ 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://blog.deali.cn/categories/Flutter/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","permalink":"http://blog.deali.cn/tags/flutter/"},{"name":"构建","slug":"构建","permalink":"http://blog.deali.cn/tags/%E6%9E%84%E5%BB%BA/"},{"name":"应用","slug":"应用","permalink":"http://blog.deali.cn/tags/%E5%BA%94%E7%94%A8/"},{"name":"性能","slug":"性能","permalink":"http://blog.deali.cn/tags/%E6%80%A7%E8%83%BD/"},{"name":"实践","slug":"实践","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E8%B7%B5/"},{"name":"优化","slug":"优化","permalink":"http://blog.deali.cn/tags/%E4%BC%98%E5%8C%96/"},{"name":"移动","slug":"移动","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8/"},{"name":"状态","slug":"状态","permalink":"http://blog.deali.cn/tags/%E7%8A%B6%E6%80%81/"},{"name":"数据","slug":"数据","permalink":"http://blog.deali.cn/tags/%E6%95%B0%E6%8D%AE/"},{"name":"管理","slug":"管理","permalink":"http://blog.deali.cn/tags/%E7%AE%A1%E7%90%86/"}]},{"title":"Flutter开发：迁移Flutter应用到AndroidX","slug":"db93bb88976293e7b04208bb3f778185","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/541c2694d0227040.html","link":"","permalink":"http://blog.deali.cn/posts/541c2694d0227040.html","excerpt":"","text":"首先上官方文档：https://flutter.dev/docs/development/packages-and-plugins/androidx-compatibility 有两种方式，一种由Android studio自动完成，一种手动修改依赖配置。官方推荐第一种，不过在我这不好使，于是我用了第二种，也成功跑起来了～ 自动方式Use Android Studio to migrate your appThis requires the latest version of Android Studio. Use the following instructions: Import your Flutter app into Android Studio so that the IDE can parse the Android code following the steps in Editing Android code in Android Studio with full IDE support. Follow the instructions for Migrating to AndroidX. 手动方式Manually migrate your appSee Migrating to AndroidX for more detailed instructions on how to do this. Below are some steps that you’ll likely need to go through as part of this process, listed here for reference. However the specific things you need to do will depend on your build configuration and could differ from the example changes suggested here. In android/gradle/wrapper/gradle-wrapper.properties change the line starting with distributionUrl like this:distributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-all.zip In android/build.gradle, replace: content_copy 123dependencies &#123; classpath 'com.android.tools.build:gradle:3.2.1'&#125; by 123dependencies &#123; classpath 'com.android.tools.build:gradle:3.3.0'&#125; In android/gradle.properties, append 12android.enableJetifier=trueandroid.useAndroidX=true In android/app/build.gradle:Under android {, make sure compileSdkVersion and targetSdkVersion are at least 28. Replace all deprecated libraries with the AndroidX equivalents. For instance, if you’re using the default .gradle files make the following changes:In android/app/build.gradletestInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;bytestInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot; Finally, under dependencies {, replace 12androidTestImplementation 'com.android.support.test:runner:1.0.2'androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2' by 12androidTestImplementation 'androidx.test.runner:1.1.1'androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1' 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://blog.deali.cn/categories/Flutter/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","permalink":"http://blog.deali.cn/tags/flutter/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"应用","slug":"应用","permalink":"http://blog.deali.cn/tags/%E5%BA%94%E7%94%A8/"},{"name":"迁移","slug":"迁移","permalink":"http://blog.deali.cn/tags/%E8%BF%81%E7%A7%BB/"}]},{"title":"Android开发：解决在Linux上提示-dev-kvm-device-permission-denied问题","slug":"dda8a7a84955b006912886014ce0479c","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/2d154055be4675e7.html","link":"","permalink":"http://blog.deali.cn/posts/2d154055be4675e7.html","excerpt":"","text":"操作步骤我用的是Ubuntu系统，首先需要安装qemu-kvm： 1sudo apt install qemu-kvm 将当前用户添加到kvm用户组： 1sudo adduser $USER kvm 检查/dev/kvm所有者： 1ls -al /dev/kvm 一般结果就是所有者是root以及kvm这个组 添加完了之后检查一下kvm组里有没有你的用户名： 1grep kvm /etc/group 一般结果就是这样： 1kvm:x:数字:用户名 之后重启系统生效，如果不想重启可以运行以下命令(仍然得注销后再登录才生效)： 1udevadm control --reload-rules &amp;&amp; udevadm trigger ps：反正我选择重启 参考资料https://stackoverflow.com/questions/37300811/android-studio-dev-kvm-device-permission-denied 欢迎交流我整理了一系列的技术文章和资料，在公众号「程序设计实验室」后台回复 linux、flutter、c#、netcore、android、java、python 等可获取相关技术文章和资","categories":[{"name":"Android开发","slug":"Android开发","permalink":"http://blog.deali.cn/categories/Android%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"解决","slug":"解决","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3/"},{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"问题","slug":"问题","permalink":"http://blog.deali.cn/tags/%E9%97%AE%E9%A2%98/"},{"name":"提示","slug":"提示","permalink":"http://blog.deali.cn/tags/%E6%8F%90%E7%A4%BA/"}]},{"title":"Flutter播放音乐简单解决方案-AudioPlayers-与填坑","slug":"de792f492d36011f446bb4523e0fcb6c","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.956Z","comments":true,"path":"posts/238254ab2aff6cc0.html","link":"","permalink":"http://blog.deali.cn/posts/238254ab2aff6cc0.html","excerpt":"","text":"目前flutter播放音乐好像只搜到AudioPlayers这个解决方案，我照着他的文档来，确实是可以播放音乐的。 项目主页：https://pub.flutter-io.cn/packages/audioplayers AudioCache介绍：https://github.com/luanpotter/audioplayers/blob/master/doc/audio_cache.md Android 9之后无法访问非https地址解决：https://stackoverflow.com/questions/45940861/android-8-cleartext-http-traffic-not-permitted","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://blog.deali.cn/categories/Flutter/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","permalink":"http://blog.deali.cn/tags/flutter/"},{"name":"解决方案","slug":"解决方案","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"name":"播放","slug":"播放","permalink":"http://blog.deali.cn/tags/%E6%92%AD%E6%94%BE/"},{"name":"音乐","slug":"音乐","permalink":"http://blog.deali.cn/tags/%E9%9F%B3%E4%B9%90/"}]},{"title":"Config-Software-mirrors-source-for-OpenSuSE-42-3","slug":"99b3b9d2a833e6383a937fc75cc89c83","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.880Z","comments":true,"path":"posts/439a402881696521.html","link":"","permalink":"http://blog.deali.cn/posts/439a402881696521.html","excerpt":"","text":"I just wrote a shell file to finish it. 1234567891011121314# Disable the system sourcesudo zypper mr -da# Add aliyun mirrorssudo zypper addrepo -f http://mirrors.aliyun.com/opensuse/update/leap/42.3/non-oss/ openSUSE-42.3-Update-Non-Osssudo zypper addrepo -f http://mirrors.aliyun.com/opensuse/distribution/leap/42.3/repo/oss/ openSUSE-42.3-Osssudo zypper addrepo -f http://mirrors.aliyun.com/opensuse/distribution/leap/42.3/repo/non-oss/ openSUSE-42.3-Non-Osssudo zypper addrepo -f http://mirrors.aliyun.com/packman/openSUSE_Leap_42.3/ openSUSE-42.3-packman# refreshsudo zypper ref# Update# sudo zypper up About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"}]},{"title":"该死的应用闪退，终于解决error-while-inflating-CardView","slug":"984db13425dc24e7bb5ab44f93540ee7","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.880Z","comments":true,"path":"posts/56c89f21e1526eda.html","link":"","permalink":"http://blog.deali.cn/posts/56c89f21e1526eda.html","excerpt":"","text":"前言（先来一个微笑脸）这个问题已经困扰我好久了，之前各种搜索无果，得到的解决方案无非就是 AppCompact 和 CardView 包的版本不一样云云，然而我根本没有这个问题。（怕是不把我Gradle看在眼里？） 问题 就是这么个界面，用到了RecycleView和Cardview，但是在SDK 23以下都不行，官方已经写明这个组件是支持到SDK9还是10的，反正基本是个android手机就可以，然而，它就是不行，在SDK24以上都没问题，我自己用的手机都没问题，就是在模拟器上和几个旧版本的测试机，都闪退了。我真的想掐死这个Cardview。。 解决今天晚上花了两个小时在查资料上，翻了Google的官方文档，下载了几个官方Samples，然而并没有发现什么有价值的解决方案，然后继续在Stack Overflow上搜索，Stack Overflow真的是程序员居家出行必备的好帮手，最后终于功夫不负有心人，找到了和我一样遇到相同问题的网友。 具有参考意义的是这两个回答： https://stackoverflow.com/questions/38132148/error-while-inflating-class-android-support-v7-widget-cardview Try this it will help you remove this android:foreground=”?android:attr/selectableItemBackground” 1234567891011121314151617181920212223242526&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"android:layout_width=\"wrap_content\"android:layout_height=\"wrap_content\"xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"android:paddingLeft=\"4dp\"android:paddingRight=\"4dp\"android:paddingBottom=\"2dp\"&gt;&lt;android.support.v7.widget.CardView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:id=\"@+id/cardview\" card_view:cardBackgroundColor=\"@android:color/white\" card_view:cardElevation=\"2dp\" card_view:cardMaxElevation=\"2dp\" card_view:cardUseCompatPadding=\"true\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\"&gt;....here i have a bunch of other layout elements &lt;/RelativeLayout&gt; &lt;/android.support.v7.widget.CardView&gt;&lt;/LinearLayout&gt; 这个回答让我把 android:foreground 删掉，我照着删掉了，但是还是不行，但是确实SDK 23以下用这个有兼容性问题。 然后是这个：https://stackoverflow.com/questions/28541920/error-when-inflating-cardview From the official notes of appcompat v21 他让我去看一下官方文档： Why are there no ripples on pre-Lollipop? A lot of what allows RippleDrawable to run smoothly is Android 5.0’s new RenderThread. To optimize for performance on previous versions of Android, we’ve left RippleDrawable out for now. When trying to use ripple-drawables, you get errors on pre-lollipop (that’s why it says line 2, it’s the xml drawable). Use a different folder (drawable-v21) for ripples and use selectors in your normal drawables if you want a difference for different states. Official support is not coming soon, I believe, because lollipop has a dedicated render-thread that no other version has. 意思就是 android:stateListAnimator=&quot;@drawable/selector_elevation&quot;这个不行，在旧版本的系统上不支持。。然后还是新的支持coming soon？我不信。 所以最后，我把这两行代码都删掉了，感人的一幕出现了，终于可以了~删掉的代码，shit！ 12android:stateListAnimator=\"@drawable/selector_elevation\"android:foreground=\"?android:attr/selectableItemBackground\" About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Android开发","slug":"Android开发","permalink":"http://blog.deali.cn/categories/Android%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"解决","slug":"解决","permalink":"http://blog.deali.cn/tags/%E8%A7%A3%E5%86%B3/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"},{"name":"应用","slug":"应用","permalink":"http://blog.deali.cn/tags/%E5%BA%94%E7%94%A8/"},{"name":"闪退","slug":"闪退","permalink":"http://blog.deali.cn/tags/%E9%97%AA%E9%80%80/"},{"name":"该死","slug":"该死","permalink":"http://blog.deali.cn/tags/%E8%AF%A5%E6%AD%BB/"}]},{"title":"Debian8-stable-升级Python版本到3-6","slug":"93a9ed37982135c1a0f43c49c556adc2","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.868Z","comments":true,"path":"posts/f3573101022adff3.html","link":"","permalink":"http://blog.deali.cn/posts/f3573101022adff3.html","excerpt":"","text":"前言最近把一个Python项目部署到服务器上，然而服务器上的Python版本实在是太旧了，于是着手进行更新。 互联网上搜索到的方法都是下载Python3.6的代码之后手动编译，然而在服务器上编译安装出了点问题，于是想到了Ubuntu的ppa方式，debian和Ubuntu本属同源，理论上Ubuntu的ppa，debian也是可以用的。 操作步骤如下： 添加软件源1add-apt-repository ppa:deadsnakes/ppa 然而debian上并没有这个add-apt-repository，所以需要先安装一波。 1apt-get install software-properties-common 安装完这个就可以使用上面的命令添加ppa源了。 到这里别着急，因为ppa源本来是Ubuntu用的，debian用起来总是需要做一点小修改的。 打开ppa网站：https://launchpad.net/~jonathonf/+archive/ubuntu/python-3.6 选择Ubuntu版本 14.04 把这两行代码复制下来。 然后打开软件源的目录 1cd /etc/apt/sources.list.d 可以看到里面有这个文件 1-rw-r--r-- 1 root root 290 Jun 19 00:26 jonathonf-python-3_6-jessie.list 编辑之： 12deb http://ppa.launchpad.net/jonathonf/python-3.6/ubuntu jessie main# deb-src http://ppa.launchpad.net/jonathonf/python-3.6/ubuntu jessie main 将原来的内容替换成刚才复制下来的内容，保存。 更新软件源 &amp; 安装12apt updateapt install python3.6 安装对应版本的pip123456sucurl https://bootstrap.pypa.io/get-pip.py | python3.6(pip -V &amp;&amp; pip3 -V &amp;&amp; pip3.6 -V) | uniq# 查看版本python3.6 -m pip -V 创建软链接123cd /usr/binrm python3ln -s python3.6 python3 这样就完成了！ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"升级","slug":"升级","permalink":"http://blog.deali.cn/tags/%E5%8D%87%E7%BA%A7/"},{"name":"版本","slug":"版本","permalink":"http://blog.deali.cn/tags/%E7%89%88%E6%9C%AC/"}]},{"title":"LINUX-DESKTOP-MENU-EDITORS","slug":"92a581bec8798a6e27d9a6bf19ed404b","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.848Z","comments":true,"path":"posts/e5448dee66c12a5d.html","link":"","permalink":"http://blog.deali.cn/posts/e5448dee66c12a5d.html","excerpt":"","text":"Which application can you use when you need to modify menu with applications on your desktop? Let’s take a look.. Linux desktops (like Gnome or KDE) usually follow freedesktop.org menu specification for their hierarchical menus with desktop applications [1]. Thanks to this, you can edit the application menu manually via files stored in directories defined by the freedesktop specification [1] like $XDG_CONFIG_DIRS/menus/${XDG_MENU_PREFIX} (which will be something like /etc/xdg/menus/, /home/$USER/.config/menus/, etc. on your system). However, if you are lazy like me and prefer more easiest and comfy approach, you will choose an GUI application. The most famous one is probably an Alacarte, but I personally prefer a the one called MenuLibre. If you need to modify application menu of your desktop, now you know what to install. MenuLibreAn advanced menu editor that provides modern features in a clean, easy-to-use interface. https://smdavis.us/projects/menulibre/ AlacarteA menu editor for GNOME. https://github.com/GNOME/alacarte MeowAn application Menu Editor for GNOME written in Scala (Java). https://pnmougel.github.io/meow/ And that’s it. The whole purpose of this post is to have a post with “MenuLibre” name in it because I always keep forgetting that name when I’m configuring somebody else’s desktop and I need to look it up via google every time. [1] https://specifications.freedesktop.org/menu-spec/menu-spec-1.0.html","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"}]},{"title":"一加3升级Android9-0的刷机折腾之路","slug":"8e547f8825b8d75a38a4d2c14a70375b","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.832Z","comments":true,"path":"posts/11e6fd287559dfc0.html","link":"","permalink":"http://blog.deali.cn/posts/11e6fd287559dfc0.html","excerpt":"","text":"前言你能想象一个16年发布的手机，到现在三年了，从一开始的Android6.0到现在的Android9.0吗？这系统更新的周期，可以说是比较良心了～不过这次升级Android9.0 虽然说是官方给出的ROM包，不过还是有一些小坑的，折腾了一个下午和晚上才最终装上去，也可能是我太久没有刷机了，生疏了不少吧。 先放截图 系统镜像下载首先去官方通道下载镜像：官方的Android9.0现在出到第二个版本了，下载链接如下：http://www.oneplusbbs.com/thread-4693480-1.html 不过论坛里也有人说第二个版本不如第一个版本，所以我下载的是第一个版本，我觉得没所谓吧，用起来都是没什么大问题的，第一个版本的下载链接如下：http://www.oneplusbbs.com/thread-4676870-1.html 刷机准备首先备份数据是必须的，升级过程中很有可能会丢失数据，所以务必备份好数据。然后是准备刷机的一系列工具，这里分两种情况： 官方recovery第一种是你的手机没有解锁，用的是官方的recovery，那就不用折腾了，直接把ROM包拷贝到内部存储根目录就能升级，详细方法见官方教程。 第三方recovery第二种是你的手机解锁了，并且刷入了第三方的recovery，这个时候就有两种选择，根据官方教程，是刷回官方的recovery之后手动给手机上锁，另一种也是我用的这个，直接用第三方recovery刷入Android9.0的Rom包， 不过就需要小小的折腾一下了。接下来会记录一下我的折腾过程。 开始折腾系统安装由于我之前安装的recovery版本太低了（twrp 3.0.x），所以出了很多问题，前面那些失败的尝试我就不详细说了。 首先去 TWRP 官网下载一个比较新的recovery镜像（img格式），官网地址：https://twrp.me/这里我选择的版本是：TWRP 3.2.3-0 Released根据官网提示选择机型下载就行了。 接下来你需要adb工具和手机驱动，由于我用的是Linux系统，所以不需要手机驱动，只要adb工具就够了（其实就是Android SDK的platform-tools），作为（假的）Android开发者，折腾这个也是必备技能（逃～用Windows的小伙伴可以看看这个帖子：http://www.oneplusbbs.com/thread-4676940-1.html 然后就准备开始了 刷入新的recovery镜像手机用数据线连接电脑，开启USB调试模式。首先运行adb devices看看能不能识别到手机，能识别到才能进行下述步骤。输入以下命令： 1234567# 进入fastboot模式adb reboot bootloader# 刷入新的recovery镜像# TWRP_recovery.img可以替换成你下载的镜像名称fastboot flash recovery TWRP_recovery.img# 重启进入recovery模式fastboot boot TWRP_recovery.img 完成以上步骤就刷入新的recovery了，好像必须3.2.0以上的twrp才可以刷Android9.0包（猜测而已，没有实测）。 进入twrp之后就选择安装刷机包根据提示操作就行了～反正有中文界面的，很简单～刷机完成之后第一次进入系统可能提示解密失败，那就得清除全部数据了，所以我在上面说一定要备份好数据！！！ 附 一加手机工程模式 指令 代码大全 一加三官方论坛：OnePlus 3","categories":[{"name":"Android","slug":"Android","permalink":"http://blog.deali.cn/categories/Android/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"刷机","slug":"刷机","permalink":"http://blog.deali.cn/tags/%E5%88%B7%E6%9C%BA/"},{"name":"折腾","slug":"折腾","permalink":"http://blog.deali.cn/tags/%E6%8A%98%E8%85%BE/"},{"name":"升级","slug":"升级","permalink":"http://blog.deali.cn/tags/%E5%8D%87%E7%BA%A7/"}]},{"title":"梦想家装平台开发记录，Asp-Net-Core上手实践","slug":"8bd16602995274608d773b31e187f621","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.832Z","comments":true,"path":"posts/08698edee1f26e06.html","link":"","permalink":"http://blog.deali.cn/posts/08698edee1f26e06.html","excerpt":"","text":"DreamingHomeDreaming Home 梦想家，家装平台 EF Core概念 Model: 数据模型，一个普通的C#类 DbContext: 与数据库沟通的桥梁，一个数据库对应一个DbContext 注册EF Core服务12services.AddEntityFrameworkSqlite() .AddDbContext&lt;MainContext&gt;(options =&gt; options.UseSqlite(Configuration[\"database:connection\"])); 数据库上下文 DbContext123456789101112public class MainContext : DbContext&#123; public MainContext() &#123; &#125; public MainContext(DbContextOptions&lt;MainContext&gt; options) : base(options) &#123; &#125; protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) &#123; var builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile(\"appsettings.json\"); var configuration = builder.Build(); optionsBuilder.UseSqlite(configuration[\"database:connection\"]); &#125;&#125; 这里我遇到一个很奇怪的问题，单纯在Startup.cs里面注册EFCore根本不行，运行的时候老是提示我No database provider，只能在DbContext里面再重写这个OnConfiguring，重新配置一遍数据库= =… 数据库迁移创建数据库迁移： 1dotnet ef migrations add InitialCreate -v 查看状态： 1dotnet ef migrations list 应用迁移来更新数据库： 1dotnet ef database update -v 引入Swagger支持安装依赖1Install-Package Swashbuckle.AspNetCore 配置中间件12345678using Swashbuckle.AspNetCore.Swagger;// 在Startup.ConfigureServices中配置服务services.AddSwaggerGen(c =&gt; &#123; c.SwaggerDoc(\"v1\", new OpenApiInfo &#123;Title = \"My Api\", Version = \"v1\"&#125;); &#125;);// 在Startup.Configure中配置中间件app.UseSwagger();app.UseSwaggerUI(c =&gt; &#123; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\"); &#125;); 把应用的根路径设置为Swagger UI，如下： 12345app.UseSwaggerUI(c =&gt;&#123; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\"); c.RoutePrefix = string.Empty;&#125;); 启动测试启动应用，并导航到http://localhost:&lt;port&gt;/swagger/v1/swagger.json，生成的描述终结点的文档显示如下json格式。 可在 http://localhost:&lt;port&gt;/swagger 找到 Swagger UI。 通过 Swagger UI 浏览 API文档。 注意 每一个Controller的方法都需要标注出具体的Http方法，不然会报错 Swagger会自动读取每个接口函数的C#文档，但是前提是要生成xml文档才可以 自定义以及扩展修改之前配置的Swagger服务： 12345678910111213141516171819202122services.AddSwaggerGen(c =&gt;&#123; c.SwaggerDoc(\"v1\", info: new OpenApiInfo &#123; Version = \"v1\", Title = \"Dreaming Home 智能家装平台\", Description = \"智能家装平台 Api 文档\", TermsOfService = new Uri(\"http://blog.deali.cn\"), Contact = new OpenApiContact &#123; Name = \"DealiAxy\", Email = \"dealiaxy@gmail.com\", Url = new Uri(\"https://zhuanlan.zhihu.com/deali\"), &#125;, License = new OpenApiLicense &#123; Name = \"GNU GENERAL PUBLIC LICENSE Version 2\", Url = new Uri(\"https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\"), &#125; &#125;);&#125;); 显示接口的xml文档要先生成，然后在services.AddSwaggerGen里面设置才行。 12345// 为 Swagger JSON and UI设置xml文档注释路径//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）var basePath = Path.GetDirectoryName(typeof(Program).Assembly.Location);var xmlPath = Path.Combine(basePath, \"Doc\", \"DreamingHome.xml\");c.IncludeXmlComments(xmlPath); 小结通过上面的操作可以总结出，Swagger UI 显示上述注释代码的 &lt;summary&gt; 元素的内部文本作为api大的注释！ 当然你还可以将 remarks 元素添加到 Get 操作方法文档。 它可以补充 &lt;summary&gt; 元素中指定的信息，并提供更可靠的 Swagger UI。 &lt;remarks&gt; 元素内容可包含文本、JSON 或 XML。 代码如下： 1234567891011121314/// &lt;summary&gt;/// 这是一个带参数的get请求/// &lt;/summary&gt;/// &lt;remarks&gt;/// 例子:/// Get api/Values/1/// &lt;/remarks&gt;/// &lt;param name=\"id\"&gt;主键&lt;/param&gt;/// &lt;returns&gt;测试字符串&lt;/returns&gt; [HttpGet(\"&#123;id&#125;\")]public ActionResult&lt;string&gt; Get(int id)&#123; return $\"你请求的 id 是 &#123;id&#125;\";&#125; 描述响应类型 摘录自：https://www.cnblogs.com/yanbigfeg/p/9232844.html 接口使用者最关心的就是接口的返回内容和响应类型啦。下面展示一下201和400状态码的一个简单例子： 我们需要在我们的方法上添加： 12[ProducesResponseType(201)][ProducesResponseType(400)] 然后添加相应的状态说明：返回value字符串如果id为空 最终代码应该是这个样子： 12345678910111213141516171819 /// &lt;summary&gt; /// 这是一个带参数的get请求 /// &lt;/summary&gt; /// &lt;remarks&gt; /// 例子: /// Get api/Values/1 /// &lt;/remarks&gt; /// &lt;param name=\"id\"&gt;主键&lt;/param&gt; /// &lt;returns&gt;测试字符串&lt;/returns&gt; /// &lt;response code=\"201\"&gt;返回value字符串&lt;/response&gt;/// &lt;response code=\"400\"&gt;如果id为空&lt;/response&gt; // GET api/values/2[HttpGet(\"&#123;id&#125;\")][ProducesResponseType(201)][ProducesResponseType(400)]public ActionResult&lt;string&gt; Get(int id)&#123; return $\"你请求的 id 是 &#123;id&#125;\";&#125; 运行效果 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"记录","slug":"记录","permalink":"http://blog.deali.cn/tags/%E8%AE%B0%E5%BD%95/"},{"name":"家装","slug":"家装","permalink":"http://blog.deali.cn/tags/%E5%AE%B6%E8%A3%85/"},{"name":"上手","slug":"上手","permalink":"http://blog.deali.cn/tags/%E4%B8%8A%E6%89%8B/"},{"name":"梦想","slug":"梦想","permalink":"http://blog.deali.cn/tags/%E6%A2%A6%E6%83%B3/"},{"name":"实践","slug":"实践","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E8%B7%B5/"},{"name":"平台","slug":"平台","permalink":"http://blog.deali.cn/tags/%E5%B9%B3%E5%8F%B0/"}]},{"title":"Spring-Boot：创建第一个应用","slug":"7dd97b67fa7d8760317f61b07f2b80a8","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.816Z","comments":true,"path":"posts/21d2f8a511e8c64f.html","link":"","permalink":"http://blog.deali.cn/posts/21d2f8a511e8c64f.html","excerpt":"","text":"简介Spring Boot 是一个轻量级框架，可以完成基于 Spring 的应用程序的大部分配置工作。在本教程中，将学习如何使用 Spring Boot 的 starter、特性和可执行 JAR 文件结构，快速创建能直接运行的基于 Spring 的应用程序。本文使用IDEA作为开发工具，Gradle作为构建工具，创建一个简单的SpringBoot应用，暂时不涉及数据库的配置。 使用IDEA创建新建项目，选择 Spring Initializr 下一步 配置依赖我选择的依赖都显示在右边。Web的选择了Rest支持，这样可以很方便写Rest应用，直接mapping就行。数据库的选择了，JDBC和MySQL驱动。（不过第一个应用里面不会用到的。） 再下一步就是选择保存项目的文件夹了，这里就不截图了哈~最后点击完成按钮，Gradle就开始构建项目，这个过程比较久，请耐心等待。 编写代码等待Gradle构建完成之后就可以开始写Rest接口了。代码如下。 123456789101112131415161718192021222324252627package cn.deali.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController// 排除引入数据源配置类@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)public class DemoApplication &#123; @RequestMapping(\"/\") String index() &#123; return \"hello world\"; &#125; @RequestMapping(\"hello\") String hello() &#123; return \"hello\"; &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125; 运行 &amp; 测试点击 Run - Run DemoApplication 运行Spring Boot项目。 一切正常的话，看看Run窗口的输出。 这个时候打开浏览器输入http://127.0.0.1:8080或者http://127.0.0.1:8080/hello就可以查看运行效果了 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"JavaEE","slug":"JavaEE","permalink":"http://blog.deali.cn/tags/JavaEE/"},{"name":"创建","slug":"创建","permalink":"http://blog.deali.cn/tags/%E5%88%9B%E5%BB%BA/"},{"name":"应用","slug":"应用","permalink":"http://blog.deali.cn/tags/%E5%BA%94%E7%94%A8/"}]},{"title":"Linux安装zsh并使用oh-my-zsh配置","slug":"7abc61160cc3e9a38d3f1016d6d89b29","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.808Z","comments":true,"path":"posts/bc44fbbadbf8c430.html","link":"","permalink":"http://blog.deali.cn/posts/bc44fbbadbf8c430.html","excerpt":"","text":"安装zsh1sudo apt install zsh 配置 oh my zshcurl 1sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" wget 1sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" 配置终端主题主题列表：https://github.com/robbyrussell/oh-my-zsh/wiki/Themes编辑~/.zshrc文件。修改主题配置：theme_name换成你想要的主题名称即可 1ZSH_THEME=\"theme_name\" About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"}]},{"title":"试一下用DotNetCore来做机器学习，ML-Net框架跑起来","slug":"7ab6498c41fc6bba836ff05647ecd23e","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.804Z","comments":true,"path":"posts/7094298509b5adfe.html","link":"","permalink":"http://blog.deali.cn/posts/7094298509b5adfe.html","excerpt":"","text":"ML.Net简介官网：https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet 官方介绍：The ML.NET command line interface (CLI), provides tools for building machine learning models with ML.NET. ML.NET 是面向.NET开发人员的开源和跨平台机器学习框架。 ML.NET 还包括Model Builder （一个简单的UI工具）和 CLI ，使用自动机器学习（AutoML）构建自定义机器学习（ML）模型变得非常容易。 首先安装.NetCore，这个是必备的～ 安装ML.Net1dotnet tool install -g mlnet 下载训练集下面这个而是wiki百科上面的用户评论数据，请自行下载 https://raw.githubusercontent.com/dotnet/machinelearning/master/test/data/wikipedia-detox-250-line-data.tsv 下载之后命名为wikipedia-data.tsv～ 训练模型1mlnet auto-train --task binary-classification --dataset \"wikipedia-data.tsv\" --label-column-index 0 --has-header true --max-exploration-time 10 训练成功会显示结果，如下： 并且会在目录下生成代码 模型代码我们来看看ML.Net自动生成的模型代码： ModelInput.cs 12345678910111213using Microsoft.ML.Data;namespace SampleBinaryClassification.Model.DataModels&#123; public class ModelInput &#123; [ColumnName(\"Sentiment\"), LoadColumn(0)] public bool Sentiment &#123; get; set; &#125; [ColumnName(\"SentimentText\"), LoadColumn(1)] public string SentimentText &#123; get; set; &#125; &#125;&#125; ModelOutput.cs 123456789101112131415using System;using Microsoft.ML.Data;namespace SampleBinaryClassification.Model.DataModels&#123; public class ModelOutput &#123; // ColumnName attribute is used to change the column name from // its default value, which is the name of the field. [ColumnName(\"PredictedLabel\")] public bool Prediction &#123; get; set; &#125; public float Score &#123; get; set; &#125; &#125;&#125; 挖个坑先挖个坑，明天继续研究。 参考资料 .NET机器学习 ML.NET 1.4预览版和模型生成器更新","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"框架","slug":"框架","permalink":"http://blog.deali.cn/tags/%E6%A1%86%E6%9E%B6/"},{"name":"机器学习","slug":"机器学习","permalink":"http://blog.deali.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"试一下","slug":"试一下","permalink":"http://blog.deali.cn/tags/%E8%AF%95%E4%B8%80%E4%B8%8B/"},{"name":"机器","slug":"机器","permalink":"http://blog.deali.cn/tags/%E6%9C%BA%E5%99%A8/"},{"name":"起来","slug":"起来","permalink":"http://blog.deali.cn/tags/%E8%B5%B7%E6%9D%A5/"}]},{"title":"Debian系Linux：获取指定应用的快捷方式文件地址","slug":"72e328735f786520f601c2ec7c896894","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.804Z","comments":true,"path":"posts/6ffb0f263b86724d.html","link":"","permalink":"http://blog.deali.cn/posts/6ffb0f263b86724d.html","excerpt":"","text":"快捷方式就是 *.desktop 文件咯 1dpkg -L application-name | grep desktop","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"文件","slug":"文件","permalink":"http://blog.deali.cn/tags/%E6%96%87%E4%BB%B6/"},{"name":"快捷方式","slug":"快捷方式","permalink":"http://blog.deali.cn/tags/%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"},{"name":"地址","slug":"地址","permalink":"http://blog.deali.cn/tags/%E5%9C%B0%E5%9D%80/"},{"name":"获取","slug":"获取","permalink":"http://blog.deali.cn/tags/%E8%8E%B7%E5%8F%96/"},{"name":"指定","slug":"指定","permalink":"http://blog.deali.cn/tags/%E6%8C%87%E5%AE%9A/"},{"name":"应用","slug":"应用","permalink":"http://blog.deali.cn/tags/%E5%BA%94%E7%94%A8/"}]},{"title":"Asp-Net-Core学习笔记：（四）Blazor-WebAssembly入门","slug":"c1d16590fe54f749c2dbd04b15952121","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.916Z","comments":true,"path":"posts/e815708c596875a3.html","link":"","permalink":"http://blog.deali.cn/posts/e815708c596875a3.html","excerpt":"","text":"本来今天开始是有其他的安排了，也没办法抽出那么多时间来学NetCore，不过我想做事情有始有终吧，除了gRPC还没跑起来之外，Blazor这部分也了解了一点，官网地址：https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor 目前来说还不是很完善，真正的离线单页应用还处于预览版阶段。 Blazor目前有两种运行模式，一种是服务器端部署，一种是客户端部署，后者可以完全脱离服务器，也就是标题写的WebAssembly，不过目前处于预览版（有点标题党了）。 官方文档：https://docs.microsoft.com/zh-cn/aspnet/core/blazor/get-started?view=aspnetcore-3.1&amp;tabs=visual-studio 项目文件结构 主要的文件夹就是这个Pages和Shared。里面包含了mvc页面(cshtml结尾)和razor组件(razor结尾)。 然后再看看wwwroot文件夹： 可以看到只有css，没有js文件夹，因为blazor要做的事情就是要把js代码换成C#代码，其实就是让后端开发去做前端开发。（PS：node就是让前端去做后端，历史总是惊人的相似hhh） 先看看它的代码是怎么写的，后面再具体介绍。 例子代码这是官方的例子，点击按钮之后可以计算点击次数。 1234567891011@page \"/counter\"&lt;h1&gt;Counter&lt;/h1&gt;&lt;p&gt;Current count: @_currentCount&lt;/p&gt;&lt;button class=\"btn btn-primary\" @onclick=\"IncrementCount\"&gt;Click me&lt;/button&gt;@code &#123; private int _currentCount = 0; private void IncrementCount() &#123; _currentCount++; &#125;&#125; 我感觉项目的具体代码应该放在最后面，还是继续介绍一下原理什么的吧~ 托管模型就是前文提到的服务器和客户端两种模式。 客户端模型 Blazor 的主体宿主模型在 WebAssembly 上的浏览器中运行客户端。 将 Blazor 应用、其依赖项以及 .NET 运行时下载到浏览器。 应用将在浏览器线程中直接执行。 UI 更新和事件处理发生在同一进程中。 应用的资产将作为静态文件部署到 web 服务器或可为客户端提供静态内容的服务。 服务端模型 使用 Blazor 服务器托管模型，可在服务器上从 ASP.NET Core 应用中执行应用。 UI 更新、事件处理和 JavaScript 调用是通过 SignalR 连接进行处理。 又出现SignalR了，真的好用，关于SignalR的可以看看我上一篇：Asp.Net Core学习笔记：（三）使用SignalR实时通信框架开发聊天室 Blazor Server 宿主模型具有以下几个优点： 下载大小明显小于 Blazor WebAssembly 应用，且应用加载速度快得多。 应用充分利用服务器功能，包括使用任何与 .NET Core 兼容的 Api。 服务器上的 .NET Core 用于运行应用程序，因此现有的 .NET 工具（如调试）可按预期方式工作。 支持瘦客户端。 例如，Blazor Server apps 适用于不支持 WebAssembly 的浏览器以及资源受限设备上的浏览器。 应用程序的 .NET/C#代码库（包括应用程序的组件代码）不会提供给客户端。 Blazor Server 宿主有一些缺点： 通常存在较高的延迟。 每个用户交互都涉及网络跃点。 无脱机支持。 如果客户端连接失败，应用将停止工作。 对于包含多个用户的应用而言，可伸缩性非常困难。 服务器必须管理多个客户端连接并处理客户端状态。 为应用提供服务需要 ASP.NET Core 服务器。 不可能的无服务器部署方案（例如，通过 CDN 为应用提供服务）。 项目配置首先是从一个普通的AspNetCore项目开始，进行以下配置： 1234567891011121314151617181920212223242526272829303132// 注册服务public void ConfigureServices(IServiceCollection services)&#123; services.AddRazorPages(); services.AddServerSideBlazor(); services.AddSingleton&lt;WeatherForecastService&gt;();&#125;// 配置中间件public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; else &#123; // 配置生产环境的错误页面 app.UseExceptionHandler(\"/Error\"); app.UseHsts(); &#125; app.UseStaticFiles(); app.UseRouting(); app.UseEndpoints(endpoints =&gt; &#123; // 相当于一个Blazor版的SignalR endpoints.MapBlazorHub(); endpoints.MapFallbackToPage(\"/_Host\"); &#125;);&#125; 编写Razor组件Blazor从名字看就和AspNetCore原有的Razor相似，所以他们俩的很多语法是接近的，比如说TagHelper。 先写App.razor： 12345678910&lt;Router AppAssembly=\"@typeof(Program).Assembly\"&gt; &lt;Found Context=\"routeData\"&gt; &lt;RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" /&gt; &lt;/Found&gt; &lt;NotFound&gt; &lt;LayoutView Layout=\"@typeof(MainLayout)\"&gt; &lt;p&gt;Sorry, there's nothing at this address.&lt;/p&gt; &lt;/LayoutView&gt; &lt;/NotFound&gt;&lt;/Router&gt; 之前在中间件那里配置了endpoints.MapFallbackToPage(&quot;/_Host&quot;);，可以理解为默认页面吧。 内容如下： 123456789101112131415161718192021222324252627282930313233343536@page \"/\"@namespace BlazorOne.Pages@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers@&#123; Layout = null;&#125;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;BlazorOne&lt;/title&gt; &lt;base href=\"~/\" /&gt; &lt;link rel=\"stylesheet\" href=\"css/bootstrap/bootstrap.min.css\" /&gt; &lt;link href=\"css/site.css\" rel=\"stylesheet\" /&gt;&lt;/head&gt;&lt;body&gt; &lt;app&gt; &lt;component type=\"typeof(App)\" render-mode=\"ServerPrerendered\" /&gt; &lt;/app&gt; &lt;div id=\"blazor-error-ui\"&gt; &lt;environment include=\"Staging,Production\"&gt; An error has occurred. This application may no longer respond until reloaded. &lt;/environment&gt; &lt;environment include=\"Development\"&gt; An unhandled exception has occurred. See browser dev tools for details. &lt;/environment&gt; &lt;a href=\"\" class=\"reload\"&gt;Reload&lt;/a&gt; &lt;a class=\"dismiss\"&gt;🗙&lt;/a&gt; &lt;/div&gt; &lt;script src=\"_framework/blazor.server.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 可以看到就是一个普通的AspNetCore的MVC页面的写法，不过body里面有app节点，可以渲染其他Razor组件。 效果这是官方例子跑起来的效果，我也没想出来拿这个做什么好，所以就单纯跑一下官方例子好了（懒） 我发现微软的官方文档还是不错的，虽然好像有点像是机翻的，但是看起来还挺通顺，也很详细。 官方文档：https://docs.microsoft.com/zh-cn/aspnet/core/blazor/hosting-models?view=aspnetcore-3.1 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"入门","slug":"入门","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E9%97%A8/"},{"name":"Web技术","slug":"Web技术","permalink":"http://blog.deali.cn/tags/Web%E6%8A%80%E6%9C%AF/"},{"name":"笔记","slug":"笔记","permalink":"http://blog.deali.cn/tags/%E7%AC%94%E8%AE%B0/"},{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"方便的C#-Json库：Json-Net","slug":"6ba75caa61d1d1600513593ab21d329b","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.788Z","comments":true,"path":"posts/c3a0941d8ee55d28.html","link":"","permalink":"http://blog.deali.cn/posts/c3a0941d8ee55d28.html","excerpt":"","text":"官网Json.Net用法很简单，本文也只是搬运了一下官网的例子，更多用法可以查看官网，一分钟就能上手。https://www.newtonsoft.com/json 使用例子对象序列化12345678910111213Product product = new Product();product.Name = \"Apple\";product.Expiry = new DateTime(2008, 12, 28);product.Sizes = new string[] &#123; \"Small\" &#125;;string json = JsonConvert.SerializeObject(product);// &#123;// \"Name\": \"Apple\",// \"Expiry\": \"2008-12-28T00:00:00\",// \"Sizes\": [// \"Small\"// ]// &#125; 反序列化12345678910111213string json = @\"&#123; 'Name': 'Bad Boys', 'ReleaseDate': '1995-4-7T00:00:00', 'Genres': [ 'Action', 'Comedy' ]&#125;\";Movie m = JsonConvert.DeserializeObject&lt;Movie&gt;(json);string name = m.Name;// Bad Boys Linq to Json1234567891011121314JArray array = new JArray();array.Add(\"Manual text\");array.Add(new DateTime(2000, 5, 23));JObject o = new JObject();o[\"MyArray\"] = array;string json = o.ToString();// &#123;// \"MyArray\": [// \"Manual text\",// \"2000-05-23T00:00:00\"// ]// &#125; 安装方法使用Nuget安装 1Install-Package Newtonsoft.Json About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/tags/C/"},{"name":".Net","slug":"Net","permalink":"http://blog.deali.cn/tags/Net/"},{"name":"前端","slug":"前端","permalink":"http://blog.deali.cn/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Android-x86-7-1-稳定版初体验","slug":"6874d094ac80d2aa8ec08692eb61734d","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.780Z","comments":true,"path":"posts/ed595875ca930568.html","link":"","permalink":"http://blog.deali.cn/posts/ed595875ca930568.html","excerpt":"","text":"前言最近Android x86发布了7.1的稳定版本，作为一名伪极客，自然是要安装体验一下。关于在电脑上可以用的Android系统，可能大部分人了解的都是 Remix OS 和 Phoenix OS 这两个。不过这两个也是基于Android x86的nightly版本构建的，还是原版的才原汁原味呐。 这里不得不吐槽一下，这个Android x86项目的官网真是简陋，只有这么一个捐赠的海报做的还比较像样，其他的截图什么的都是n年前的，惨不忍睹 … http://www.android-x86.org/","categories":[{"name":"Android","slug":"Android","permalink":"http://blog.deali.cn/categories/Android/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"初体验","slug":"初体验","permalink":"http://blog.deali.cn/tags/%E5%88%9D%E4%BD%93%E9%AA%8C/"},{"name":"稳定版","slug":"稳定版","permalink":"http://blog.deali.cn/tags/%E7%A8%B3%E5%AE%9A%E7%89%88/"}]},{"title":"JavaWeb开发---使用IDEA创建Servlet程序","slug":"673dcad1e779d074225aefe059c0ddd6","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.776Z","comments":true,"path":"posts/6b13381b19c88d71.html","link":"","permalink":"http://blog.deali.cn/posts/6b13381b19c88d71.html","excerpt":"","text":"前言最近做项目需要，从之前熟悉的PHP和Python转到了JavaWeb，所以就有了这个笔记。资源图片都是来自网上的资源，根据自己的实际操作应用，做了总结归纳。 所需工具 JDK Tomcat IDEA 创建工程 设置工程名字： 创建完成后工程结构如下： 上面的图片是在网络上复制的，好像我用的IDEA 2017.3.2没有这个Create web.xml的选项，我也不知道为啥，难道是IDEA越更新功能越退步了？如下图： 所以这里就要自己配置IDEA添加web.xml。步骤：打开Project Structure，在facets中选中次级的web或者在Modules中选中web，在deployment Descriptors面板里，点击 +号选择web.xml以及版本号。然后在弹出的对话框中修改xml默认的目录，加上web就可以了。 然后确定，就有web.xml文件了。如图： Web工程设置创建classes、lib目录在WEB-INF 目录下点击右键，New –&gt; Directory，创建 classes 和 lib 两个目录 classes目录用于存放编译后的class文件，lib用于存放依赖的jar包 classes目录配置File –&gt; Project Structure…，进入 Project Structure窗口，点击 Modules –&gt; 选中项目“JavaWeb” –&gt; 切换到 Paths 选项卡 –&gt; 勾选 “Use module compile output path”，将 “Output path” 和 “Test output path” 都改为之前创建的classes目录 即将后面编译的class文件默认生成到classes目录下 lib目录配置还是在这个Project Structure这个窗口。点击 Modules –&gt; 选中项目“JavaWeb” –&gt; 切换到 Dependencies 选项卡 –&gt; 点击右边的“+”，选择 “JARs or directories…”，选择创建的lib目录。 选择Jar Directory 配置打包方式Artifacts点击 Artifacts选项卡，IDEA会为该项目自动创建一个名为“JavaWeb:war exploded”的打包方式，表示 打包成war包，并且是文件展开性的，输出路径为当前项目下的 out 文件夹，保持默认即可。另外勾选下“Build on make”，表示编译的时候就打包部署，勾选“Show content of elements”，表示显示详细的内容列表。 Tomcat配置创建Tomcat容器Run -&gt; Edit Configurations，进入“Run Configurations”窗口，点击”+”-&gt; Tomcat Server -&gt; Local，创建一个新的Tomcat容器。 配置服务器名称路径在”Name”处输入新的服务名，点击“Application server”后面的“Configure…”，弹出Tomcat Server窗口，选择本地安装的Tomcat目录 -&gt; OK 运行配置在“Run Configurations”窗口的“Server”选项板中，去掉勾选“After launch”，设置“HTTP port”和“JMX port”，点击 Apply -&gt; OK，至此Tomcat配置完成。 JavaWeb测试运行配置Run -&gt; Edit Configurations，进入“Run Configurations”窗口，选择之前配置好的Tomcat，点击“Deployment”选项卡，点击“+” -&gt; “Artifact”-&gt; 选择创建的web项目的Artifact…修改“Application context”-&gt; Apply -&gt; OK 说明：此处的Application context是指定本工程的根目录。就是你访问服务器的路径，比如这里设置了JavaWeb，那么访问服务器的地址就是http://localhost:8080/JavaWeb。 编辑Jsp文件在index.jsp文件中的body之间添加要显示的内容，然后点击“运行”的绿色三角 打开浏览器，输入：localhost:8080/JavaWeb 至此，intellij idea创建并设置javaweb工程全部完成，下面是在其中编写并运行Servlet。 Servlet实现接下来记录一下怎么编写一个Servlet程序，到Servlet程序运行起来的全过程。 引入Servlet相关包我感觉IDEA还是有点不太智能，明明配置了Tomcat了，都不给我自动引入Servlet包，导致在IDEA中建立Servlet使用javax.servlet.http.HttpServlet等类时，出现了如下错误： 原因：IntelliJ IDEA 没有导入 servlet-api.jar 这个.jar包，需要手动导入。 导入步骤如下：选中项目，右击选择“Open Modules Settings”，选择“Libraries”，点击“+”，选“Java”；在弹出的窗口中选择tomcat所在的目录，在lib目录下找到servlet-api.jar这个jar包导入完成即可。 编写Servlet源文件在src目录下新建HelloWorld.java，并编写一下代码并进行编译：代码如下： 123456789101112131415161718192021222324252627282930import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; public class HelloWorld extends HttpServlet &#123; private String message; @Override public void init() throws ServletException &#123; message = \"Hello world, this message is from servlet!\"; &#125; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; //设置响应内容类型 resp.setContentType(\"text/html\"); //设置逻辑实现 PrintWriter out = resp.getWriter(); out.println(\"&lt;h1&gt;\" + message + \"&lt;/h1&gt;\"); &#125; @Override public void destroy() &#123; super.destroy(); &#125; &#125; 编译后会发现在classes目录下生成了HelloWorld.class文件 部署servlet方法1在WEB-INF目录下web.xml文件的标签中添加如下内容： 123456789&lt;servlet&gt; &lt;servlet-name&gt;HelloWorld&lt;/servlet-name&gt; &lt;servlet-class&gt;HelloWorld&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;HelloWorld&lt;/servlet-name&gt; &lt;url-pattern&gt;/HelloWorld&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 方法2（反正我自己测试是没有成功的）在HelloWorld文件的类前面加上：@WebServlet(“/HelloWorld”) 运行Servlet点击运行按钮 控制台出现successfully则tomcat服务启动成功！打开浏览器输入：localhost:8080/JavaWeb/HelloWorld即可查看servlet运行状态了. 后记作为一个写习惯了PHP和Python的人来说，刚刚转到Java还是有各种不适应的，还好Java和我最喜欢写的C#语法很相近，所以上手也不是很难，就是各种环境配置好麻烦= =… About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"JavaEE","slug":"JavaEE","permalink":"http://blog.deali.cn/tags/JavaEE/"},{"name":"Web技术","slug":"Web技术","permalink":"http://blog.deali.cn/tags/Web%E6%8A%80%E6%9C%AF/"},{"name":"程序","slug":"程序","permalink":"http://blog.deali.cn/tags/%E7%A8%8B%E5%BA%8F/"},{"name":"创建","slug":"创建","permalink":"http://blog.deali.cn/tags/%E5%88%9B%E5%BB%BA/"}]},{"title":"C#学习（三）深入理解委托、匿名方法和-Lambda-表达式","slug":"20f1dea67fa2e0e87c4d1c95d91d8938","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.648Z","comments":true,"path":"posts/9f45470b37bbda91.html","link":"","permalink":"http://blog.deali.cn/posts/9f45470b37bbda91.html","excerpt":"","text":"前言lambda的概念建立在委托的基础上，委托，实现了类型安全的回调方法。在.NET 中回调无处不在，所以委托也无处不在，事件模型建立在委托机制上，Lambda 表达式本质上就是一种匿名委托。本文中将完成一次关于委托的旅行，全面阐述委托及其核心话题，逐一梳理委托、委托链、事件、匿名方法和 Lambda 表达式。 委托的定义了解委托，从其定义开始，通常一个委托被声明为： 1public delegate void CalculateDelegate(Int32 x, Int32 y); 关键字 delegate 用于声明一个委托类型 CalculateDelegate，可以对其添加访问修饰符，默认其返回值类型为 void，接受两个 Int32 型参数 x 和 y，但是委托并不等同与方法，而是一个引用类型，类似于 C++中的函数指针，稍后在委托本质里将对此有所交代。 下面的示例将介绍如何通过委托来实现一个计算器模拟程序，在此基础上来了解关于委托的定义、创建和应用： 123456789101112131415161718192021222324252627using System;namespace DelegateAndEvent&#123; public class DeepInto &#123; //声明一个委托 public delegate void CalculateDelegate(Int32 x, Int32 y); //创建与委托关联的方法，二者具有相同的返回值类型和参数列表 public static void Add(Int32 x, Int32 y) &#123; Console.WriteLine(x + y); &#125; //定义委托类型变量 private static CalculateDelegate myDelegate; public static void Run() &#123; //进行委托绑定 myDelegate = new CalculateDelegate(Add); //回调 Add 方法 myDelegate(100, 200); &#125; &#125;&#125; 上述示例，在类 DelegateEx 内部声明了一个 CalculateDelegate 委托类型，它具有和关联方法Add 完全相同的返回值类型和参数列表，否则将导致编译时错误。将方法 Add 传递给 CalculateDelegate 构造器，也就是将方法 Add 指派给 CalculateDelegate 委托，并将该引用赋给 myDelegate 变量，也就表示 myDeleage 变量保存了指向 Add 方法的引用，以此实现对 Add 的回调。 由此可见，委托表示了对其回调方法的签名，可以将方法当作参数进行传递，并根据传入的方法来动态的改变方法调用。只要为委托提供相同签名的方法，就可以与委托绑定，例如： 123public static void Subtract(Int32 x, Int32 y) &#123; Console.WriteLine(x - y);&#125; 同样，可以将方法 Subtract 分配给委托，通过参数传递实现方法回调，例如： 123456public static void Main()&#123; //进行委托绑定 myDelegate = new CalculateDelegate(Subtract); myDelegate(100, 200);&#125; 多播委托和委托链在上述委托实现中，Add 方法和 Subtract 可以绑定于同一个委托类型 myDelegate，由此可以很容易想到将多个方法绑定到一个委托变量，在调用一个方法时，可以依次执行其绑定的所有方法，这种技术称为多播委托。在.NET 中提供了相当简洁的语法来创建委托链，以+=和-=操作符分别进行绑定和解除绑定的操作，多个方法绑定到一个委托变量就形成一个委托链，对其调用时，将会依次调用所有绑定的回调方法。例如： 1234myDelegate = new CalculateDelegate(Add);myDelegate += new CalculateDelegate(Subtract);myDelegate += new CalculateDelegate(Multiply);myDelegate(100, 200); 上述执行将在控制台依次输出 300、-100 和 20000 三个结果，可见多播委托按照委托链顺序调用所有绑定的方法，同样以-=操作可以解除委托链上的绑定，例如： 12myDelegate -= new CalculateDelegate(Add);myDelegate(100, 200); 结果将只有-100 和 20000 被输出，可见通过-=操作解除了 Add 方法。事实上，+=和-=操作分别调用了 Deleagate.Combine 和 Deleagate.Remove 方法，由对应的 IL 可知： 12345678910111213141516171819202122.method public hidebysig static void Main() cil managed&#123;.entrypoint// 代码大小 151 (0x97).maxstack 4IL_0000: nopIL_0001: ldnullIL_0002: ldftn void InsideDotNet.NewFeature.CSharp3.DelegateEx::Add(int32, int32)//部分省略……IL_0023: call class [mscorlib]System.Delegate [mscorlib]System.Delegate:: Combine(class [mscorlib]System.Delegate, class [mscorlib]System.Delegate)//部分省略……IL_0043: call class [mscorlib]System.Delegate [mscorlib]System.Delegate:: Combine(class [mscorlib]System.Delegate, class [mscorlib]System.Delegate)//部分省略……IL_0075: call class [mscorlib]System.Delegate [mscorlib]System.Delegate:: Remove(class [mscorlib]System.Delegate, class [mscorlib]System.Delegate)//部分省略……IL_0095: nopIL_0096: ret&#125; // end of method DelegateEx::Main 所以，上述操作实际等效于： 123456789public static void Main()&#123; myDelegate = (CalculateDelegate)Delegate.Combine(new CalculateDelegate(Add), new CalculateDelegate(Subtract), new CalculateDelegate(Multiply)); myDelegate(100, 200); myDelegate = (CalculateDelegate)Delegate.Remove(myDelegate, new CalculateDelegate(Add)); myDelegate(100, 200);&#125; 另外，多播委托返回值一般为 void，委托类型为非 void 类型时，多播委托将返回最后一个调用的方法的执行结果，所以在实际的应用中不被推荐。 委托的本质委托在本质上仍然是一个类，如此简洁的语法正是因为 CLR 和编译器在后台完成了一系列操作，将上述 CalculateDelegate 委托编译为 IL，你将会看得更加明白，如图： 所以，委托本质上仍旧是一个类，该类继承自 System.MulticastDelegate 类，该类维护一个带有链接的委托列表，在调用多播委托时，将按照委托列表的委托顺序而调用的。还包括一个接受两个参数的构造函数和 3 个重要方法：BeginInvoke、EndInvoke 和 Invoke。 首先来了解 CalculateDelegate 的构造函数，它包括了两个参数：第一个参数表示一个对象引用，它指向了当前委托调用回调函数的实例，在本例中即指向一个 DelegateEx 对象；第二个参数标识了回调方法，也就是 Add 方法。因此，在创建一个委托类型实例时，将会为其初始化一个指向对象的引用和一个标识回调方法的整数，这是由编译器完成的。那么一个回调方法是如何被执行的，继续以 IL 代码来分析委托的调用，即可显露端倪（在此仅分析委托关联 Add 方法时的情况）： 12345678910111213141516171819202122.method public hidebysig static void Main() cil managed&#123;.entrypoint&#x2F;&#x2F; 代码大小 37 (0x25).maxstack 8IL_0000: nopIL_0001: ldnullIL_0002: ldftn void InsideDotNet.NewFeature.CSharp3.DelegateEx::Add(int32, int32)IL_0008: newobj instance void InsideDotNet.NewFeature.CSharp3.DelegateEx&#x2F; CalculateDelegate::.ctor(object, native int)IL_000d: stsfld class InsideDotNet.NewFeature.CSharp3.DelegateEx&#x2F; CalculateDelegate InsideDotNet.NewFeature.CSharp3.DelegateEx::myDelegateIL_0012: ldsfld class InsideDotNet.NewFeature.CSharp3.DelegateEx&#x2F;Calculate Delegate InsideDotNet.NewFeature.CSharp3.DelegateEx::myDelegateIL_0017: ldc.i4.s 100IL_0019: ldc.i4 0xc8IL_001e: callvirt instance void InsideDotNet.NewFeature.CSharp3.DelegateEx&#x2F; CalculateDelegate::Invoke(int32, int32)IL_0023: nopIL_0024: ret&#125; &#x2F;&#x2F; end of method DelegateEx::Main 在 IL 代码中可见，首先调用 CalculateDelegate 的构造函数来创建一个 myDelegate 实例，然后通过 CalculateDelegate::Invoke 执行回调方法调用，可见真正执行调用的是 Invoke 方法。因此，你也可以通过 Invoke 在代码中显示调用，例如： 1myDelegate.Invoke(100, 200 其执行过程和隐式调用是一样的，注意在.NET 1.0 中 C#编译器是不允许显示调用的，以后的版本中修正了这一限制。 另外，Invoke 方法直接对当前线程调用回调方法，在异步编程环境中，除了 Invoke 方法，也会生成 BeginInvoke 和 EndInvoke 方法来完成一定的工作。这也就是委托类中另外两个方法的作用。 委托和事件.NET 的事件模型建立在委托机制之上，透彻的了解了委托才能明白的分析事件。可以说，事件是对委托的封装，从委托的示例中可知，在客户端可以随意对委托进行操作，一定程度上破坏了面向的对象的封装机制，因此事件实现了对委托的封装。下面，通过将委托的示例进行改造，来完成一个事件的定义过程： 12345678910111213141516171819202122232425262728293031323334353637383940414243using System;namespace DelegateAndEvent&#123; public class Calculator &#123; //定义一个 CalculateEventArgs， //用于存放事件引发时向处理程序传递的状态信息 public class CalculateEventArgs : EventArgs &#123; public readonly Int32 x, y; public CalculateEventArgs(Int32 x, Int32 y) &#123; this.x = x; this.y = y; &#125; &#125; //声明事件委托 public delegate void CalculateEventHandler(object sender, CalculateEventArgs e); //定义事件成员，提供外部绑定 public event CalculateEventHandler MyCalculate; //提供受保护的虚方法，可以由子类覆写来拒绝监视 protected virtual void OnCalculate(CalculateEventArgs e) &#123; if (MyCalculate != null) &#123; MyCalculate(this, e); &#125; &#125; //进行计算，调用该方法表示有新的计算发生 public void Calculate(Int32 x, Int32 y) &#123; CalculateEventArgs e = new CalculateEventArgs(x, y); //通知所有的事件的注册者 OnCalculate(e); &#125; &#125;&#125; 示例中，对计算器模拟程序做了简要的修改，从二者的对比中可以体会事件的完整定义过程，主要包括： 定义一个内部事件参数类型，用于存放事件引发时向事件处理程序传递的状态信息，EventArgs是事件数据类的基类。 声明事件委托，主要包括两个参数：一个表示事件发送者对象，一个表示事件参数类对象。 定义事件成员。 定义负责通知事件引发的方法，它被实现为 protected virtual 方法，目的是可以在派生类中覆写该方法来拒绝监视事件。 定义一个触发事件的方法，例如 Calculate 被调用时，表示有新的计算发生。 一个事件的完整程序就这样定义好了。然后，还需要定义一个事件触发程序，用来监听事件： 1234567891011121314//定义事件触发者public class CalculatorManager&#123; //定义消息通知方法 public void Add(object sender, Calculator.CalculateEventArgs e) &#123; Console.WriteLine(e.x + e.y); &#125; public void Substract(object sender, Calculator.CalculateEventArgs e) &#123; Console.WriteLine(e.x - e.y); &#125;&#125; 最后，实现一个事件的处理程序： 1234567891011121314151617public class Test_Calculator&#123; public static void Run() &#123; Calculator calculator = new Calculator(); //事件触发者 CalculatorManager cm = new CalculatorManager(); //事件绑定 calculator.MyCalculate += cm.Add; calculator.Calculate(100, 200); calculator.MyCalculate += cm.Substract; calculator.Calculate(100, 200); //事件注销 calculator.MyCalculate -= cm.Add; calculator.Calculate(100, 200); &#125;&#125; 如果对设计模式有所了解，上述实现过程实质是 Observer 模式在委托中的应用，在.NET 中对Observer 模式的应用严格的遵守了相关的规范。在 Windows Form 程序开发中，对一个Button 的Click 就对应了事件的响应，例如： 1this.button1.Click += new System.EventHandler(this.button1_Clic 用于将 button1_Click 方法绑定到 button1 的 Click 事件上，当有按钮被按下时，将会触发执行button1_Click 方法： 1private void button1_Click(object sender, EventArgs e) &#123; &#125; 匿名方法匿名方法以内联方式放入委托对象的使用位置，而避免创建一个委托来关联回调方法，也就是由委托调用了匿名的方法，将方法代码和委托实例直接关联，在语法上有简洁和直观的好处。例如以匿名方法来绑定 Click 事件将变得非常简单： 1234button1.Click += delegate&#123; MessageBox.Show(\"Hello world.\");&#125;; 因此，有必要以匿名方法来实现本节开始的委托示例，了解其实现过程和底层实质，例如： 123456789101112class AnonymousMethodEx&#123; delegate void CalculateDelegate(Int32 x, Int32 y); public static void Run() &#123; //匿名方法 CalculateDelegate mySubstractDelegate = delegate(Int32 x, Int32 y) &#123; Console.WriteLine(x - y); &#125;; CalculateDelegate myAddDelegate = delegate(Int32 x, Int32 y) &#123; Console.WriteLine(x + y); &#125;; mySubstractDelegate(100, 200); &#125;&#125; 事实上，匿名方法和委托在 IL 层是等效的，编译器为匿名方法增加了两个静态成员和静态方法，如图： 由编译器生成的两个静态成员和静态方法，辅助实现了委托调用一样的语法结构，这正是匿名方法在底层的真相。 Lambda表达式Lambda 表达式是 Functional Programming 的核心概念，现在 C# 3.0 中也引入了 Lambda 表达式来实现更加简洁的语法，并且为 LINQ 提供了语法基础，这些将在本书第 12 章有所交代。再次应用 Lambda 表达式来实现相同的过程，其代码为： 123456789101112131415using System;namespace Lambda&#123; public class LambdaExpressionEx &#123; delegate void CalculateDelegate(Int32 x, Int32 y); public static void Run() &#123; CalculateDelegate myDelegate = (x, y) =&gt; Console.WriteLine(x - y); myDelegate(100, 200); &#125; &#125;&#125; 分析 Lambda 表达式的 IL 代码，可知编译器同样自动生成了相应的静态成员和静态方法，Lambda 表达式在本质上仍然是一个委托。带来这一切便利的是编译器，在此对 IL 上的细节不再做进一步分析。 规则 委托实现了面向对象的，类型安全的方法回调机制。 以 Delegate 作为委托类型的后缀，以 EventHandle 作为事件委托的后缀，是规范的命名规则。 多播委托返回值一般为 void，不推荐在多播委托中返回非 void 的类型。 匿名方法和 Lambda 表达式提供了更为简洁的语法表现，而这些新的特性主要是基于编译器而实现的，在 IL 上并没有本质的变化。 .NET 的事件是 Observer 模式在委托中的应用，并且基于.NET 规范而实现，体现了更好的耦合性和灵活性。 结论从委托到 Lambda 表达式的逐层演化，我们可以看到.NET 在语言上的不断进化和发展，也正是这些进步促成了技术的向前发展，使得.NET 在语言上更加地兼容和优化。对于技术开发人员而言，这种进步也正是我们所期望的。然而，从根本上了解委托、认识委托才是一切的基础，否则语法上的进化只能使得理解更加迷惑。本节的讨论，意在为理解这些内容提供基础，建立一个较为全面的概念。 写在后面注：本文是对微软C# MVP王涛大佬的教程搬运和重新排版本文很好的介绍了委托、匿名方法和lambda表达式，也是对前面两篇笔记的总结。 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"表达式","slug":"表达式","permalink":"http://blog.deali.cn/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"方法","slug":"方法","permalink":"http://blog.deali.cn/tags/%E6%96%B9%E6%B3%95/"},{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/tags/C/"},{"name":".Net","slug":"Net","permalink":"http://blog.deali.cn/tags/Net/"},{"name":"匿名","slug":"匿名","permalink":"http://blog.deali.cn/tags/%E5%8C%BF%E5%90%8D/"},{"name":"委托","slug":"委托","permalink":"http://blog.deali.cn/tags/%E5%A7%94%E6%89%98/"},{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"深入","slug":"深入","permalink":"http://blog.deali.cn/tags/%E6%B7%B1%E5%85%A5/"},{"name":"理解","slug":"理解","permalink":"http://blog.deali.cn/tags/%E7%90%86%E8%A7%A3/"}]},{"title":"Android-ORM-框架：GreenDao入门","slug":"276dd9091d27756763c21885c9759719","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.656Z","comments":true,"path":"posts/32c1a1d50771278d.html","link":"","permalink":"http://blog.deali.cn/posts/32c1a1d50771278d.html","excerpt":"","text":"GreenDao 简介 GreenDAO 是一款开源的面向 Android 的轻便、快捷的 ORM 框架，将 Java 对象映射到 SQLite 数据库中，我们操作数据库的时候，不在需要编写复杂的 SQL语句， 在性能方面，GreenDAO 针对 Android 进行了高度优化， 最小的内存开销 、依赖体积小 同时还是支持数据库加密。 GreenDAO 官网地址：http://greenrobot.org/greendao/ GreenDao 特征1、对象映射（ ORM） GreenDAO 是ORM 框架，可以非常便捷的将Java 对象映射到 SQLite 数据库中保存。 2、高性能 ORM 框架有很多，比较著名的有 OrmLite ， ActiveAndroid , Realm 等，性能也不一样，下图是 GreenDao 官方给出的性能对比。 3、支持加密 GreenDao 是支持加密的，可以安全的保存用户数据。 4、轻量级 GreenDao 核心库小于100k ，所以我们并不会担心添加 GreenDao 后 APK 大小会变的是否庞大。 5、支持 protocol buffer(protobuf) 协议 GreenDao 支持 protocol buffer(protobuf) 协议数据的直接存储，如果你通过 protobuf 协议与服务器交互，将不需要任何的映射。 6，代码生成 greenDAO 会根据配置信息自动生成核心管理类以及 DAO 对象 7，开源 greenDAO 是开源的，我们可以在github 上下载源码，学习。github 地址：https://github.com/greenrobot/greenDAO 核心类介绍DaoMaster：使用 greenDAO 的入口点。DaoMaster 负责管理数据库对象(SQLiteDatabase)和 DAO 类(对象)，我们可以通过它内部类 OpenHelper 和 DevOpenHelper SQLiteOpenHelper 创建不同模式的 SQLite 数据库。 DaoSession :管理指定模式下的所有 DAO 对象，DaoSession提供了一些通用的持久性方法比如插入、负载、更新、更新和删除实体。 XxxDAO :每个实体类 greenDAO 多会生成一个与之对应DAO对象，如：User 实体，则会生成一个一个UserDao 类 Entities可持久化对象。通常, 实体对象代表一个数据库行使用标准 Java 属性(如一个POJO 或 JavaBean )。 核心类之间的关系 集成 GreenDAO设置仓库与插件（Project： build.gradle）12345678910buildscript &#123; repositories &#123; jcenter() mavenCentral() // add repository &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:2.3.2' classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2' // add plugin &#125;&#125; 配置依赖 ( Module:app build.gradle )123456789apply plugin: 'com.android.application'apply plugin: 'org.greenrobot.greendao' // apply plugindependencies &#123; compile 'org.greenrobot:greendao:3.2.2' // add library // This is only needed if you want to use encrypted databases compile 'net.zetetic:android-database-sqlcipher:3.5.6'//加密库依赖（可选项）&#125; 配置数据库相关信息 ( Module:app build.gradle )12345greendao &#123; schemaVersion 1 //数据库版本号 daoPackage 'com.speedystone.greendaodemo.db'// 设置DaoMaster、DaoSession、Dao 包名 targetGenDir 'src/main/java'//设置DaoMaster、DaoSession、Dao目录&#125; 快速入门我们写一个简单的实体类（User），测试一下 1234567891011121314151617181920package com.speedystone.greendaodemo.model;import org.greenrobot.greendao.annotation.Entity;import org.greenrobot.greendao.annotation.Id;/** * Created by Speedy on 2017/6/30. */@Entitypublic class User &#123; @Id private long id; private String name; private int age; //此处省略了getter,setter 方法&#125; 点击 Make Project（或者 Make Moudle ‘App’） 编译一下工程 。如果配置正确，会在配置的包目录下自动会生成 DaoMaster，DaoSession 和 UserDao 类 。 初始化 GreenDao ( 通常初始化代码写在我们的 Application 类中) 获取 UserDao123MyApp myApp = (MyApp) getApplication();DaoSession daoSession = myApp.getDaoSession();UserDao userDao = daoSession.getUserDao(); 保存记录123456User user = new User();user.setUserId(1);user.setName(\"小明\");user.setAge(16);userDao.insert(user); 1234567User user = new User();user.setUserId(1);user.setName(\"小明\");user.setAge(16);//插入或者替换userDao.insertOrReplace(user); 删除记录1234567public void delete(User user)&#123; userDao.delete(user);&#125;public void deleteByUserId(long userid)&#123; userDao.deleteByKey(1L);&#125; 更新记录123public void update(User user)&#123; userDao.update(user);&#125; 查询记录1234567891011121314151617public List&lt;User&gt; query()&#123; return userDao.loadAll();// 查询所有记录&#125;public User query2()&#123; return userDao.loadByRowId(1);//根据ID查询&#125;public List&lt;User&gt; query2()&#123; return userDao.queryRaw(\"where AGE&gt;?\",\"10\");//查询年龄大于10的用户&#125;//查询年龄大于10的用户public List&lt;User&gt; query4()&#123; QueryBuilder&lt;User&gt; builder = userDao.queryBuilder(); return builder.where(UserDao.Properties.Age.gt(10)).build().list();&#125; 注解详解@Entity表明这个实体类会在数据库中生成一个与之相对应的表 属性： schema：告知GreenDao当前实体属于哪个 schema schema active：标记一个实体处于活跃状态，活动实体有更新、删除和刷新方法 nameInDb：在数据库中使用的别名，默认使用的是实体的类名， indexes：定义索引，可以跨越多个列 createInDb：标记创建数据库表（默认：true） generateConstructors 自动创建全参构造方法（同时会生成一个无参构造方法）（默认：true） generateGettersSetters 自动生成 getters and setters 方法（默认：true） 1234567891011121314@Entity( schema = \"myschema\", active = true, nameInDb = \"AWESOME_USERS\"， indexes = &#123; @Index(value = \"name DESC\", unique = true) &#125;, createInDb = true, generateConstructors = false, generateGettersSetters = true)public class User &#123; ...&#125; @Id对应数据表中的 Id 字段 @Index使用@Index作为一个属性来创建一个索引，默认是使用字段名 12345678@Entitypublic class User &#123; @Id private Long id; @Index(unique = true) private String name;&#125; @Property设置一个非默认关系映射所对应的列名，默认是使用字段名,例如：@Property(nameInDb = “userName”) @NotNull设置数据库表当前列不能为空 @Transient添加此标记后不会生成数据库表的列 @Unique表名该属性在数据库中只能有唯一值 1234567@Entitypublic class User &#123; @Id private Long id; @Unique private String name;&#125; @OrderBy更加某一字段排序 ，例如：@OrderBy(“date ASC”) @ToOne表示一对一关系 12345678910111213141516@Entitypublic class Order &#123; @Id private Long id; private long customerId; @ToOne(joinProperty = \"customerId\") private Customer customer;&#125;@Entitypublic class Customer &#123; @Id private Long id;&#125; @ToMany定义一对多个实体对象的关系 123456789101112131415@Entitypublic class Customer &#123; @Id private Long id; @ToMany(referencedJoinProperty = \"customerId\") @OrderBy(\"date ASC\") private List&lt;Order&gt; orders;&#125;@Entitypublic class Order &#123; @Id private Long id; private Date date; private long customerId;&#125; 参考资料 http://greenrobot.org/greendao/ https://juejin.im/post/5959b5bcf265da6c4d1bb245 https://www.jianshu.com/p/1ceea4b3f94f https://www.cnblogs.com/whoislcj/p/5651396.html https://blog.csdn.net/speedystone/article/details/72769793 https://github.com/greenrobot/greenDAO About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Android开发","slug":"Android开发","permalink":"http://blog.deali.cn/categories/Android%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"入门","slug":"入门","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E9%97%A8/"},{"name":"框架","slug":"框架","permalink":"http://blog.deali.cn/tags/%E6%A1%86%E6%9E%B6/"}]},{"title":"电脑上的安卓系统——PhoenixOS浅度体验","slug":"60a6df3e61103db125d8a125203a1d8d","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.728Z","comments":true,"path":"posts/0182051828b9ab13.html","link":"","permalink":"http://blog.deali.cn/posts/0182051828b9ab13.html","excerpt":"","text":"前言其实这篇关于PhoenixOS的浅度评测在几个月前就准备发了，当时是刚看到新闻说Android 7.0 x86的正式版刚刚发布，于是就下载来安装一番，结果…..体验极差= =，只能用这4个字来形容，不过既然体验Android x86，就不能扫兴而归，所以就把国产基于Android x86深度定制而颇有名气的PhoenixOS安装体验一番。 本文不涉及如何安装，因为安装过程很简单，如果有需要的话我再写一篇安装教程。 浅度体验开机引导。PhoenixOS和其他Linux发行版一样使用Grub 开机界面 好久没开机，一开机就提示我更新系统 图库 桌面还是挺好看的，整体风格类似Windows 通知栏有点模仿Win10通知中心的味道。 设置界面PhoenixOS重写了安卓的原生设置，不过在设置界面的右上角提供了切换按钮，不过我就不截图了，因为原生的设置界面真的有点丑。 游戏助手玩游戏应该是PhoenixOS的一大特色，比起一大票安卓模拟器，这个原生系统在电脑上玩起游戏来应该是更有优势的。 应用中心不多说，国内各个安卓模拟器也都有，方便安装应用和游戏。 内置的文本编辑器界面设计得不错，很符合电脑用户的操作习惯，个人感觉有点像是超卓编辑器。 文件管理器这个必须点赞，界面很好看。和普通的Linux发行版上那些文件管理器界面有些相似，我觉得这个与Gnome的文件管理器更接近。 日历显示比较小，全屏好像有一点显示问题，不多评价。 应用分屏功能和Windows之类的桌面系统类似，也是把窗口拖到左右边缘就可以分屏，很舒服。 多窗口模式你可以把PhoenixOS当成桌面系统来使用，多窗口切换毫无压力。 菜单/抽屉 输入法切换和Windows、Linux很像，切换输入法很方便，不过适配了键盘的输入法应该不多。 帮助中心帮助中心居然还带有搜索功能，不错。 全屏之后的菜单/抽屉毛玻璃效果挺好看的 内置的浏览器这个浏览器很好，针对电脑操作应该是下功夫优化过的，使用起来和桌面系统的体验相近，不过还有一些小小的不足，由于本文是浅度体验，所以就不深入分析了。 最后是电源菜单感觉和MIUI好像，背景依然是毛玻璃效果，不错。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Android","slug":"Android","permalink":"http://blog.deali.cn/categories/Android/"}],"tags":[{"name":"系统","slug":"系统","permalink":"http://blog.deali.cn/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"体验","slug":"体验","permalink":"http://blog.deali.cn/tags/%E4%BD%93%E9%AA%8C/"},{"name":"浅度","slug":"浅度","permalink":"http://blog.deali.cn/tags/%E6%B5%85%E5%BA%A6/"},{"name":"电脑","slug":"电脑","permalink":"http://blog.deali.cn/tags/%E7%94%B5%E8%84%91/"}]},{"title":"深入Jar包：Gradle构建可执行jar包与访问jar包中文件夹与文件","slug":"5b56a11d9db81b4ad796e6b21b6b4ac5","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.728Z","comments":true,"path":"posts/d1d557de607bf836.html","link":"","permalink":"http://blog.deali.cn/posts/d1d557de607bf836.html","excerpt":"","text":"前言Java的跨平台功能听起来很诱人可口，号称“Write Once，Run Everywhere”，实际上是“Run Once，Debug Everywh”… 在实际开发过程中还是会遇到各种各样的坑的，刚刚解决了一系列问题，特地写个文章总结一下。 使用Gradle构建Jar包感谢万能的Gradle，极大提高了Java开发的生产力～在Gradle中生成jar包可以使用官方的插件：application 来简单生成Jar包，同时还有多种不同的配置可以自定义，了解详情请参照Gradle官方文档。 我这里使用的是一个叫做 shadow 的Gradle插件，把构建jar包的配置都安排得明明白白了，非常的方便！官方文档：https://imperceptiblethoughts.com/shadow/configuration/#configuring-output-name 下面是 build.gradle 配置参考： 1234567891011121314151617181920212223plugins &#123; id 'com.github.johnrengelman.shadow' version '4.0.3' // Apply the java plugin to add support for Java id 'java' // Apply the application plugin to add support for building an application id 'application'&#125;dependencies &#123; implementation 'com.github.jengelman.gradle.plugins:shadow:4.0.3'&#125;// Output to build/libs/name.jarshadowJar &#123; baseName = 'name' classifier = null version = null&#125;apply plugin: 'com.github.johnrengelman.shadow'apply plugin: 'java' 具体的配置要依照项目的实际需要来配置～设置完 shadow 插件之后，执行 gradle build 就可以在 build/libs/ 文件夹下面生成你的可执行jar包了，超级方便。需要更多功能可以查看shadow官网文档，写的很清楚。 访问jar包中的资源虽然jar包中有各种目录结构，但是jar包本质仍然是一个文件，所以不可以用传统的方法去访问，像 File 类，Class 对象的 getResouce 方法都不行的。应该使用 ClassLoader 的 getResourceStream 方法直接获取资源文件的输入流。例如： 12InputStream is=this.getClass().getResourceAsStream(\"/resource/res.txt\");InputStream is=this.getClass().getClassLoader().getResourceStream(\"/resource/res.txt\"); 注意：Class对象和ClassLoader对象的getResourceStream方法也是有不同的，具体的不同可以查看这个笔记：正确获取Java项目资源 访问Jar包中的文件夹当jar包中的资源文件很多的时候，不可能一个个输入名字去获取，这也太hack了吧，肯定要用自动化的方式来提高生产力。事实上，访问jar包中的文件夹是挺麻烦的，不过还是找到了取巧的方法，试了一下还是挺好用的。（不过最好做一下缓存） 代码如下： 123456789String path = getClass().getProtectionDomain().getCodeSource().getLocation().getPath();JarFile localJarFile = new JarFile(new File(path));Enumeration&lt;JarEntry&gt; entries = localJarFile.entries();while (entries.hasMoreElements()) &#123; JarEntry jarEntry = entries.nextElement(); String innerPath = jarEntry.getName(); System.out.println(innerPath);&#125; 使用getClass().getProtectionDomain().getCodeSource().getLocation().getPath(); 来获取当前jar包的路径，如果代码不在jar包中运行的话，获取到的就是当前class文件所在路径。所以在使用之前最好做一下判断，看看程序是否在jar包中运行。 关于JavaFX的Media资源问题JavaFX可以播放音乐，但是和其他Image、Font资源不同的是，Media对象的构造函数只能接受一个String参数（即文件URL），所以没办法使用getResourceStream方法把文件输入流传入对象。 我查了一下官网，找到了解决办法，把文件URL换成JarURL就可以了，文档：https://docs.oracle.com/javase/6/docs/api/java/net/JarURLConnection.html。 简单示例： 12String path = String.format(\"jar:file:%s!/%s\", jarPath, relativePath);Media media = new Media(path); 注意：relativePath的形式是 media/hello.wav 这样的。 About Learn more on my WeChat Official Account：DealiAxyEvery post was in my blog：blog.deali.cn","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"Build Tools","slug":"Build-Tools","permalink":"http://blog.deali.cn/tags/Build-Tools/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"},{"name":"包与","slug":"包与","permalink":"http://blog.deali.cn/tags/%E5%8C%85%E4%B8%8E/"},{"name":"包中","slug":"包中","permalink":"http://blog.deali.cn/tags/%E5%8C%85%E4%B8%AD/"},{"name":"文件夹","slug":"文件夹","permalink":"http://blog.deali.cn/tags/%E6%96%87%E4%BB%B6%E5%A4%B9/"},{"name":"构建","slug":"构建","permalink":"http://blog.deali.cn/tags/%E6%9E%84%E5%BB%BA/"},{"name":"访问","slug":"访问","permalink":"http://blog.deali.cn/tags/%E8%AE%BF%E9%97%AE/"},{"name":"深入","slug":"深入","permalink":"http://blog.deali.cn/tags/%E6%B7%B1%E5%85%A5/"},{"name":"文件","slug":"文件","permalink":"http://blog.deali.cn/tags/%E6%96%87%E4%BB%B6/"},{"name":"执行","slug":"执行","permalink":"http://blog.deali.cn/tags/%E6%89%A7%E8%A1%8C/"}]},{"title":"在Linux-Ubuntu上配置开发JavaFx程序-(更新)","slug":"5292e9389b8f256ccd7a58f110e24401","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.704Z","comments":true,"path":"posts/29b5d89db19e5ef4.html","link":"","permalink":"http://blog.deali.cn/posts/29b5d89db19e5ef4.html","excerpt":"","text":"前言不清楚什么原因，网络上关于JavaFx的中文资料很少，并且都很老，所以建议大家有兴趣学习JavaFx还是看官方文档比较好，而且貌似部分人不看好JavaFx。关于Swing的资料倒是要多很多。我觉得挺奇怪的，从设计上来将，还是JavaFx高明一些嘛。 PS：经过近一周的折腾和探索，发现OpenJDK使用JavaFX真的好多坑～OpenJDK 和 Oracle JDK的配置是有差别的，这里推荐大家使用OracleJDK以免遇到奇怪的坑～ 附上安装OracleJDK的方法123$ sudo add-apt-repository ppa:webupd8team/java$ sudo apt-get update$ sudo apt-get install oracle-java8-installer OpenJDK需要多一步操作因为OpenJDK8默认是没有javafx包的，需要先安装 OpenJFX。 配置打开Idea，在一个普通的Java项目里面，导入javafx包是找不到的。Idea 在创建Java项目的时候默认不导入JavaFx包，所以需要我们自己找到路劲并且导入。 打开 Project Structure，选择SDKs，可以看到JDK路径。 点击旁边的 “+” 号，然后在 jdk 目录下，/lib/ext文件夹里找到 jfxrt.jar 这个包，并且导入，就OK啦～ HelloWorld第一个程序从HelloWorld开始！ 12345678910111213141516171819202122232425262728293031package lin.Learning.JavaFx;import javafx.application.Application;import javafx.scene.Scene;import javafx.scene.layout.StackPane;import javafx.stage.Stage;import javafx.scene.control.Label;public class HelloWorld extends Application &#123; public static void main(String[] args) &#123; launch(args); &#125; @Override public void start(Stage primaryStage) &#123; Label label = new Label(\"the first label\"); // 创建面板作为根节点 StackPane rootNode=new StackPane(); // 将label控件添加到根节点上 rootNode.getChildren().add(label); // 创建场景对象，指定根节点对象和大小 Scene scene=new Scene(rootNode,200,60); primaryStage.setTitle(\"Hello JavaFx\"); // 将场景添加到舞台中 primaryStage.setScene(scene); // 显示舞台 primaryStage.show(); &#125;&#125; 运行效果： 这样就完成了在Linux系统上的第一个JavaFx程序开发了。 安装 Scene BuilderJavaFx特色就是 View 和 Controller 分离，使用 fxml 写界面布局，并且 Oracle 提供了一款所见即所得的界面设计工具，不过要自己去安装。 下载地址：https://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-1x-archive-2199384.html#javafx-scenebuilder-2.0-oth-JPR 选择对应系统的版本下载就行了，这里我选择的是Debian的deb安装包。 关于 Scene Builder 的安装，可以参照 oracle 的文档：https://docs.oracle.com/javase/8/scene-builder-2/installation-guide/preface.htm#sthref2 这里摘一段文档，关于在Linux平台安装 Scene Builder的： (Linux platform) Extract the Scene Builder 2.0 files from the javafx_scenebuilder-2_0-linux-.tar.gz to a directory on your local file system, or double-click the javafx_scenebuilder-2_0-linux-.deb file to open it with Ubuntu Software Center, where is either x64 or i586. By default, the Scene Builder application is installed at /opt/JavaFXSceneBuilder2.0/. 可以看到，Scene Builder的安装目录是：/opt/JavaFXSceneBuilder2.0/ 那么，接下来就要在IDEA中配置了。 IDEA配置打开设置 配置路径 然后在我们的项目里面添加一个 FXML 文件。右键就可以通过 Scene Builder 打开啦，这个界面还不错。 About Learn more on my WeChat Official Account：DealiAxyEvery post was in my blog：blog.deali.cn","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"程序","slug":"程序","permalink":"http://blog.deali.cn/tags/%E7%A8%8B%E5%BA%8F/"}]},{"title":"NetCore爬虫：CatSpider#-开发笔记","slug":"4a14bcae198ced57dd926a41aa40c3a6","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.672Z","comments":true,"path":"posts/0ae6b5e94c214bb8.html","link":"","permalink":"http://blog.deali.cn/posts/0ae6b5e94c214bb8.html","excerpt":"","text":"（PS：我这里用了#号代替了Sharp这个单词） CatSpider是毕设里的数据采集模块，本来爬虫类的应用肯定使用python来开发嘛，不过用request_html做解析的时候，python的动态类型真的把我恶心到了，而且感觉这个库也不是很成熟，html5lib也不好用，也没心思去深入了，之前看到有大佬用.net core平台做爬虫，于是我也来试试，没想到效果贼好，特别是配合LinqPad，写个代码段然后直接Dump做数据展示超级方便。 代码测试没问题之后直接写到项目里面，用了轻量级的ORM写入数据库，美滋滋。不过有些网站的采集比较麻烦，有反爬机制，这方面就不如python了，因为python的轮子很多，我直接找别人做的整合一下就好了，毕竟爬虫不是本项目的主要内容，不能浪费太多时间和精力。那么怎么把C#和python的模块整合在一起呢，emmm当然是RPC了，不过在python爬虫里面加个Flask来调用也行，不过数据交换性能就要打很大折扣了。 有点偏题了，继续记录.net core爬虫~ 网络请求如果是python的话，那么我觉得requests库是唯一最佳选择，在NetCore里面，现在有个很好用的库HttpClient，和requests不同，这个是官方的，做得非常好用，调用是全部异步的。 官方推荐使用单例模式，所以我做了个HttpHelper静态类来使用~ 123456789101112131415public static class HttpHelper&#123; private static readonly HttpClientHandler handler; private static readonly HttpClient client; public static HttpClientHandler Handler &#123; get =&gt; handler; &#125; public static HttpClient Client &#123; get =&gt; client; &#125; static HttpHelper() &#123; handler = new HttpClientHandler(); client = new HttpClient(handler); client.DefaultRequestHeaders.Add(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\"); &#125;&#125; 使用起来很简单： 1var data = await HttpHelper.Client.GetStringAsync(\"http://example.com\"); 解析html文档解析同样很方便，通过AngleSharp库，可以像CSS选择器那样快速定位网页元素，比python常用的BeautifulSoup好用很多。 为了使用方便，我封装了一个方法快速解析文档： 12345678910111213public static async Task&lt;IHtmlDocument&gt; GetHtmlDocument(string url)&#123; var html = await client.GetStringAsync(url); return new HtmlParser().ParseDocument(html);&#125;public static async Task&lt;IHtmlDocument&gt; GetHtmlDocument(string url, string charset)&#123; var res = await client.GetAsync(url); var resBytes = await res.Content.ReadAsByteArrayAsync(); var resStr = Encoding.GetEncoding(charset).GetString(resBytes); return new HtmlParser().ParseDocument(resStr);&#125; 第二个方法带有一个charset参数，可以指定文档的编码，有些国内老的网站不是用utf-8，也不标明什么编码，这样下载下来中文都是乱码的，得处理一下。 开始采集数据这里放一些简单的例子，爬取列表： 用了linq感觉世界真美好，哈哈哈 1234567891011public static async Task&lt;List&lt;ListArticle&gt;&gt; CrawlHotList()&#123; var dom = await HttpHelper.GetHtmlDocument(\"https://www.com/\"); var links = dom.QuerySelectorAll(\".hot-list ul li a\"); var hotList = links.Select((elem, result) =&gt; new ListArticle&#123; Title = elem.TextContent, Link = elem.GetAttribute(\"href\"), Source = \"来源\"&#125;); return new List&lt;ListArticle&gt;(hotList);&#125; 采集文章内容，代码特别简单： 123456789101112131415public static async Task&lt;Article&gt; CrawlArticle(string url)&#123; var dom = await HttpHelper.GetHtmlDocument(url); var data = new Article &#123; Title = dom.QuerySelector(\"#cb_post_title_url\").TextContent, Source = \"来源\", Content = dom.QuerySelector(\".postBody\").TextContent, Link = url, PublishTime = DateTime.Parse(dom.QuerySelector(\"#post-date\").TextContent), AddTime = DateTime.Now, Author = dom.QuerySelector(\".postDesc a\").TextContent &#125;; return data;&#125; 还有遇到大量数据的时候怎么办呀，这时候就要上并行任务了，C#对比python高性能的优势就体现出来了，上代码： 12345678910111213141516171819202122public static async Task&lt;List&lt;CnBlogListArticle&gt;&gt; CrawlList2(int page = 10)&#123; var http = HttpHelper.Client; var parser = new HtmlParser(); var data = await Task.WhenAny( Enumerable.Range(1, page) .Select(async page =&gt; &#123; string pageData = await http.GetStringAsync($\"https://www.cnblogs.com/sitehome/p/&#123;page&#125;\"); IHtmlDocument doc = await parser.ParseDocumentAsync(pageData); return doc.QuerySelectorAll(\".post_item\").Select(tag =&gt; new CnBlogListArticle &#123; Title = tag.QuerySelector(\".titlelnk\").TextContent, Page = page, UserName = tag.QuerySelector(\".post_item_foot .lightblue\").TextContent, PublishTime = DateTime.Parse(Regex.Match(tag.QuerySelector(\".post_item_foot\").ChildNodes[2].TextContent, @\"(\\d&#123;4&#125;\\-\\d&#123;2&#125;\\-\\d&#123;2&#125;\\s\\d&#123;2&#125;:\\d&#123;2&#125;)\", RegexOptions.None).Value), CommentCount = int.Parse(tag.QuerySelector(\".post_item_foot .article_comment\").TextContent.Trim()[3..^1]), ViewCount = int.Parse(tag.QuerySelector(\".post_item_foot .article_view\").TextContent[3..^1]), BriefContent = tag.QuerySelector(\".post_item_summary\").TextContent.Trim(), &#125;);&#125;)).ConfigureAwait(true); return new List&lt;CnBlogListArticle&gt;(await data);&#125; 还可以利用IEnumerable的AsParallel()方法将LINQ并行化。不展开了。 数据持久化数据持久化这能搞，.net core平台有很多好用的ORM，比如微软官方的EF Core，比如SqlSugar，比如Dapper这些，不过EF Core感觉比较重，而且我做这个的时候，还没学怎么单独使用。 然后我找了个国人做的轻量级ORM，Chloe，看文档使用很简单，于是就试试，模型代码： 12345678910[Table(\"ListArticles\")]public class ListArticle&#123; [Column(\"Id\", IsPrimaryKey = true)] [AutoIncrement] public int Id &#123; get; set; &#125; public string Title &#123; get; set; &#125; public string Source &#123; get; set; &#125; public string Link &#123; get; set; &#125;&#125; 这个orm需要在模型类上加上属性，定义主键和表名什么的。EF Core这种就不用，完全按照约定来的，这点不如EF Core方便。 而且它不能自动生成表，我只好手动创建表，差评。 接下来常规操作，创建DBContext，大部分ORM都差不多： 1234567891011121314151617181920public class SQLiteConnectionFactory : IDbConnectionFactory&#123; /// &lt;summary&gt; /// 数据库连接字符串，如下 /// Data Source=dapperTest.db /// &lt;/summary&gt; string _connString = null; public SQLiteConnectionFactory(string connString) &#123; this._connString = connString; &#125; public IDbConnection CreateConnection() &#123; // 得先安装Sqlite的驱动 // Microsoft.Data.Sqlite // System.Data.Sqlite SQLiteConnection conn = new SQLiteConnection(_connString); return conn; &#125;&#125; 对了，要先配置连接： 12345678public static class SQLiteContextFactory&#123; public static SQLiteContext GetContext() &#123; string connString = \"Data Source=CatSpider.db\"; return new SQLiteContext(new SQLiteConnectionFactory(connString)); &#125;&#125; 使用很简单： 12var context = SQLiteContextFactory.GetContext();obj = context.Insert(obj); 更多操作看文档去，本文就不展开了 提供HTTP接口基本功能实现了，之前考虑到和其他语言或者模块的互操作，觉得可以用HTTP接口来交互，（虽然现在觉得不是最佳方案） 这个很简单，只要找一个轻量级的服务器框架就行了，我找到一个叫Nancy的，听起来像人名，结果居然是Web框架。 使用很简单，直接启动： 1234567891011121314151617181920private string host = \"http://localhost\";private int port = 50010;private NancyHost nancy;public Program()&#123; var uri = new Uri($\"&#123;host&#125;:&#123;port&#125;/\"); nancy = new NancyHost(uri);&#125;public void Start()&#123; nancy.Start(); logger.Debug($\"nancy server started at &#123;host&#125;:&#123;port&#125;\"); Console.ReadKey(); nancy.Stop();&#125;static void Main(string[] args)&#123; new Program().Start();&#125; 定义接口这个框架有个Module的概念，就和Controller差不多吧，定义很简单，我放测试代码上来，业务代码暂时不放出来： 123456789101112131415public class MainModule : NancyModule&#123; public MainModule() &#123; Get(\"/\", _ =&gt; \"hello\"); Get(\"404\", _ =&gt; HttpStatusCode.NotFound); Get(\"test\", _ =&gt; &#123; var response = (Response)JsonConvert.SerializeObject(new int[] &#123; 1, 2, 3 &#125;); response.ContentType = \"application/json\"; return response; &#125;); Get(\"test2\", _ =&gt; JsonConvert.SerializeObject(new int[] &#123; 1, 2, 3 &#125;)); &#125;&#125; 日志记录最后说一下日志，我这里用了nlog这个轻量级日志引擎。 首先要配置，NLog.config，设置生成时自动复制到目标文件夹： 123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" throwConfigExceptions=\"true\"&gt; &lt;targets&gt; &lt;!-- 配置说明：https://github.com/NLog/NLog/wiki/ColoredConsole-target --&gt; &lt;target name=\"f1\" xsi:type=\"File\" fileName=\"CatSpiderLog.txt\"/&gt; &lt;target name=\"n1\" xsi:type=\"Network\" address=\"tcp://localhost:4001\"/&gt; &lt;target name=\"c1\" xsi:type=\"Console\" encoding=\"utf-8\" error=\"true\" detectConsoleAvailable=\"true\" /&gt; &lt;target name=\"c2\" xsi:type=\"ColoredConsole\" encoding=\"utf-8\" useDefaultRowHighlightingRules=\"true\" errorStream=\"true\" enableAnsiOutput=\"true\" detectConsoleAvailable=\"true\" DetectOutputRedirected=\"true\"&gt; &lt;/target&gt; &lt;/targets&gt; &lt;rules&gt; &lt;logger name=\"*\" maxLevel=\"Debug\" writeTo=\"c2\" /&gt; &lt;logger name=\"*\" maxLevel=\"Debug\" writeTo=\"f1\" /&gt; &lt;!--&lt;logger name=\"*\" minLevel=\"Info\" writeTo=\"f1\" /&gt;--&gt; &lt;/rules&gt;&lt;/nlog&gt; 官方推荐每个类用一个logger实例： 1private static Logger logger = LogManager.GetCurrentClassLogger(); 使用： 1logger.Debug($\"列表：&#123;obj&#125;\"); 很方便。 大概就这，有空继续写其他的~ 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"笔记","slug":"笔记","permalink":"http://blog.deali.cn/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Asp-Net-Core学习笔记：（三）使用SignalR实时通信框架开发聊天室","slug":"52657d28e84cc879d63dd581dd59589b","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.700Z","comments":true,"path":"posts/44ccd6ffbfcbed47.html","link":"","permalink":"http://blog.deali.cn/posts/44ccd6ffbfcbed47.html","excerpt":"","text":"SignalR牛刀小试在MVP杨老师的博客里看到这么个东西，我还以为是NetCore3才推出的新玩意，原来是已经有很多年的历史了，那看来还是比较成熟的一个技术了。 简介 SignalR是一个.NET Core/.NET Framework的开源实时框架，SignalR的可使用Web Socket, Server Sent Events 和 Long Polling作为底层传输方式。 SignalR基于这三种技术构建，抽象于它们之上，它让你更好的关注业务问题而不是底层传输技术问题。 以上介绍来自博客，SignalR分为客户端和服务端，服务端运行在AspNetCore上，客户端支持前端、桌面端和移动端，我去查了一下，连Flutter也有相应的支持库。 几个概念回落机制SignalR支持三种底层传输技术，根据客户端的兼容性可以自动协商传输类型。如图 Web Socket是最好的最有效的传输方式，如果浏览器或Web服务器不支持它的话，就会降级使用SSE，实在不行就用Long Polling。 RPC不用解释太多，Remote Procedure Call，SignalR采用RPC范式来进行服务端和客户端之间的通信。 Hub Hub是SignalR的一个组件，运行在服务端，它是一个通信用的组件， Hub使用RPC接受从客户端发来的消息，也能把消息发送给客户端 。 关于横向扩展SignalR针对多种底层通信方式有了 Sticky Sessions (粘性会话) 这种解决方案，可以保证一个客户端在一次会话中的请求都分配给同一个服务器，具体以后需要的时候再研究。 开始使用我要做的是一个聊天室，所以只需要写一个简单的服务就可以了。 首先要创建AspNetCore项目，注册SignalR服务： 12345public void ConfigureServices(IServiceCollection services)&#123; services.AddControllers(); services.AddSignalR();&#125; 创建ChatService类： 1234567891011public class ChatService&#123; private readonly List&lt;ChatMessage&gt; _messages; private readonly IHubContext&lt;ChatHub&gt; _context; public List&lt;ChatMessage&gt; Messages &#123; get =&gt; _messages; &#125; public ChatService(IHubContext&lt;ChatHub&gt; context) &#123; _context = context; _messages = new List&lt;ChatMessage&gt;(); &#125;&#125; 消息实体类： 1234567public class ChatMessage&#123; public string UserName &#123; get; set; &#125; public string Content &#123; get; set; &#125; public DateTime SendedTime &#123; get; set; &#125; public string ClientName &#123; get; set; &#125;&#125; 关键的来了，编写Hub： 使用SendAsync可以进行远程调用 12345678910111213141516171819202122232425public class ChatHub : Hub &#123; private readonly ChatService _chatService; public ChatHub(ChatService chatService) &#123; _chatService = chatService; &#125; public async Task GetMessages(string connectionId) &#123; var data = _chatService.Messages; await Clients.Client(connectionId). SendAsync(\"GetMessages\", data); &#125; public async Task SendMessage(string userName, string content, string clientName) &#123; var msg = new Models.ChatMessage &#123; UserName = userName, Content = content, SendedTime = DateTime.Now, ClientName = clientName &#125;; _chatService.Messages.Add(msg); await Clients.All.SendAsync(\"SendMessage\", msg); &#125; public override Task OnConnectedAsync() &#123; GetMessages(Context.ConnectionId); return base.OnConnectedAsync(); &#125;&#125; 注册依赖注入和中间件依赖注入 1234567public void ConfigureServices(IServiceCollection services)&#123; services.AddControllers(); services.AddSignalR(); services.AddSingleton&lt;CountService&gt;(); services.AddSingleton&lt;ChatService&gt;();&#125; 中间件 123456789public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#123; app.UseStaticFiles(); app.UseRouting(); app.UseEndpoints(endpoints =&gt;&#123; endpoints.MapControllers(); endpoints.MapHub&lt;ChatHub&gt;(\"/chat\"); &#125;);&#125; 客户端为了方便我就用网页来做。 首先写个简单的聊天界面布局，这里就不贴代码了没啥技术含量，效果大概这样： 首先要安装signalr.js，通过npm安装即可。 然后需要编写js： 1234567891011121314151617181920212223242526function setupConnection() &#123; connection = new signalR.HubConnectionBuilder() .withUrl(\"/chat\") .build(); connection.on(\"SendMessage\", message =&gt; &#123; console.log(message); addMsg(message.userName, message.sendedTimeStr, message.content, message.clientName); &#125;); connection.on(\"GetMessages\", data =&gt; &#123; console.log(data); for (var i = 0; i &lt; data.length; i++) &#123; let message = data[i]; addMsg(message.userName, message.sendedTimeStr, message.content, message.clientName); &#125; &#125;); connection.on(\"Finished\", () =&gt; &#123; connection.stop(); console.log(\"finished.\") &#125;); connection.start() .catch(err =&gt; console.error(err.toString()));&#125; 通过以下代码可以远程调用服务器的方法： 1connection.invoke(\"SendMessage\", username, content, '网页客户端'); 然后就可以打开多个浏览器测试了。这是我在手机上的截图 PS：为了把这个部署到服务器，我还买了个新的阿里云服务器。。 参考资料 杨老师博客：https://www.cnblogs.com/cgzl/p/9515516.html https://juejin.im/post/5c1c7b9c6fb9a049d23606a8 AspNetCore应用部署：https://article.itxueyuan.com/dX28oy 启动配置：https://www.cnblogs.com/Hai–D/p/5842842.html 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"笔记","slug":"笔记","permalink":"http://blog.deali.cn/tags/%E7%AC%94%E8%AE%B0/"},{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"框架","slug":"框架","permalink":"http://blog.deali.cn/tags/%E6%A1%86%E6%9E%B6/"}]},{"title":"Java开发：JDK安装和环境配置","slug":"3f9bf2df92ca4632134f0eb582be8451","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.668Z","comments":true,"path":"posts/39d775dc7c0105a6.html","link":"","permalink":"http://blog.deali.cn/posts/39d775dc7c0105a6.html","excerpt":"","text":"前言环境配置是开发中最基础的部分，不过最近有很多新入坑的同学，都在问怎么安装JDK和配置环境，索性写一篇。这里要注意一下，在Windows平台和Linux平台下做开发是不同的，Windows平台开发Java需要自己手动配置JDK的环境变量，而大多数Linux都是不需要的，安装了OpenJDK就可以了（可能很多发行版都自带了OpenJDK），这点是比较方便的。 下载Java JDKWindows平台打开甲骨文的JDK网站：http://www.oracle.com/technetwork/java/javase/downloads/index.html网站是这样的。注意下载的时候看清楚版本。 本文选择的版本是JDK8 点击下载按钮下载。下载完成之后打开进行安装就行了。划重点：记得把安装目录记下来！！后面有用 Linux平台Linux平台可以选择OpenJDK也可以用甲骨文提供的JDK。这两者是有区别的。这里再贴一下OpenJDK和JDK的不同。(以下内容引用自知乎Aloys寒风) 历史上的原因是，OpenJDK是JDK的开放原始码版本，以GPL(General Public License)协议的形式放出(题&gt;主提到的open就是指的开源)。在JDK7的时候，OpenJDK已经作为JDK7的主干开发，SUN JDK7是在OpenJDK7的基础上发布的，其大部分原始码都相同，只有少部分原始码被替换掉。使用JRL(JavaResearch License，Java研究授权协议)发布。至于OpenJDK6则更是有其复杂的一面，首先是OpenJDK6是JDK7的一个分支，并且尽量去除Java SE7的新特性，使其尽量的符合Java6的标准。关于JDK和OpenJDK的区别，可以归纳为以下几点： 授权协议的不同：OpenJDK采用GPL V2协议放出，而SUN JDK则采用JRL放出。两者协议虽然都是开放源代码的，但是在使用上的不同在于GPL V2允许在商业上使用，而JRL只允许个人研究使用。OpenJDK不包含Deployment（部署）功能：部署的功能包括：Browser Plugin、Java Web Start、以及Java控制面板，这些功能在OpenJDK中是找不到的。 OpenJDK源代码不完整：这个很容易想到，在采用GPL协议的OpenJDK中，SUN JDK的一部分源代码因为产权的问题无法开放给OpenJDK使用，其中最主要的部份就是JMX中的可选元件SNMP部份的代码。因此这些不能开放的源代码 将它作成plug，以供OpenJDK编译时使用，你也可以选择不要使用plug。而Icedtea则为这些不完整的部分开发了相同功能的源代码 (OpenJDK6)，促使OpenJDK更加完整。 部分源代码用开源代码替换：由于产权的问题，很多产权不是SUN的源代码被替换成一些功能相同的开源代码，比如说字体栅格化引擎，使用Free Type代替。 OpenIDK只包含最精简的JDK：OpenJDK不包含其他的软件包，比如Rhino Java DB JAXP……，并且可以分离的软件包也都是尽量的分离，但是这大多数都是自由软件，你可以自己下载加入。不能使用Java商标：这个很容易理解，在安装OpenJDK的机器上，输入java -version显示的是OpenJDK，但是如果是使用Icedtea补丁的OpenJDK，显示的是java。 总之，在Java体系中，还是有很多不自由的成分，源代码的开发不够彻底。 所以，Linux平台下到底要JDK还是OpenJDK？？我觉得OpenJDK完全够用啊，安装也方便。在软件包管理器里输入jdk进行安装，装下来的就是OpenJDK。 Debian系安装：sudo apt install jdk Rehat系安装：yum apt install jdk SUSE安装：sudo zypper in jdk 如果非要用甲骨文的JDK。那么就去甲骨文官网下载。下载地址在上面有。然后安装方法，各个Linux发行版略微有差别，能折腾Linux的同学安装个软件应该不是问题。 Path配置好吧。我承认Java最烦人的东西就是需要配置环境变量，特别是Windows上，你就不能安装完直接配置好吗？！人家Python都能这么方便就你不行 = = Windows平台配置首先打开上面安装完成之后记下来的路径。 然后按Win+R键打开运行。 输入：control 打开控制面板 我用的是英文版系统，但是大家对照着图片来操作是一样的。选择“系统”。 选择”高级系统设置” 环境变量 这样就打开了环境变量编辑器 首先创建一个 JAVA_HOME 的环境变量。内容就是刚才JDK安装的位置。 接着添加 CLASSPATH 变量。内容： .;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; 最后在系统的 Path 里添加 javahome 和 classpath 。 点击”添加“。 添加下面两个路径。%JAVA_HOME%\\bin%JAVA_HOME%\\jre\\bin如果不是win10，没有这个Path编辑器的话，就在Path变量原来的基础上加：;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin 注意前面有个分号然后点击”确定“就行了。 测试打开控制台，输入 jave -version 配置成功完成！ About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"环境","slug":"环境","permalink":"http://blog.deali.cn/tags/%E7%8E%AF%E5%A2%83/"}]},{"title":"Linux编译安装Python3-6，理论上各个发行版通用","slug":"3d5b4c2c435a4d1207404abbfb1853ec","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.668Z","comments":true,"path":"posts/fefdbae3eb7f0e9f.html","link":"","permalink":"http://blog.deali.cn/posts/fefdbae3eb7f0e9f.html","excerpt":"","text":"前言最近笔者把一个django项目部署到一个新的服务器上，而这个服务器给的是CentOS6版本的系统，官方源很旧，还被运维把源搞坏了，没办法通过源安装Python3.6以及pip，所以只好用最原始的方法，编译安装！ 注意如果本机安装了python2，尽量不要管他，使用python3运行python脚本就好，因为可能有程序依赖目前的python2环境，不要动现有的python2环境！官网下载的Python源码包已经附带了pip工具了，如果安装还是没有的话参照文末的方法手动安装pip！ 安装依赖环境安装依赖从代码编译也是需要依赖一些库的，这些都是需要安装的。 1yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 下载Python3.6代码包访问：https://www.python.org/downloads/ 查看你需要的安装的版本，我这里是3.6. 1wget https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tgz 创建安装目录我个人习惯安装在/usr/local/python3（具体安装位置看个人喜好）创建目录： 1mkdir -p /usr/local/python3 解压代码解压下载好的Python-3.x.x.tgz包 具体包名因你下载的Python具体版本不不同⽽而不不同，如：我下载的是Python3.6.7.那我这里就是Python-3.6.7.tgz 1tar -zxvf Python-3.6.7.tgz 编译代码进入解压后的目录，编译安装。 1234cd Python-3.6.7./configure --prefix=/usr/local/python3makemake install 建立python3的软链接1ln -s /usr/local/python3/bin/python3 /usr/bin/python3 并将/usr/local/python3/bin加入PATH编辑 .bash_profile 文件 1nano ~/.bash_profile 修改内容： 1234567# Get the aliases and functionsif [ -f ~/.bashrc ]; then. ~/.bashrcfi# User specific environment and startup programsPATH=$PATH:$HOME/bin:/usr/local/python3/binexport PATH 修改完记得执行行下面的命令，让上一步的修改生效： 1source ~/.bash_profile 检查Python3及pip3是否正常可用： 12python3 -Vpip3 -V pip访问不到的话在再建一下pip3的软链接 1ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 手动安装pip以及setuptools安装pip前需要前置安装setuptools具体下载的版本请自行到官网复制最新版的下载链接。 12345wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26tar -zxvf setuptools-19.6.tar.gzcd setuptools-19.6python3 setup.py buildpython3 setup.py install 如果前面没配置好环境的话，就要苦逼一下了：报错： RuntimeError: Compression requires the (missing) zlib module我们需要在linux中安装zlib-devel包，进行支持。 1yum install zlib-devel 需要对python3.6进行重新编译安装。 12cd python3.6.7make &amp;&amp; make install 又是漫长的编译安装过程。 重新安装setuptools: 12python3 setup.py buildpython3 setup.py install 安装pip具体下载链接以及版本以官网上提供的为准。 12345wget --no-check-certificate https://pypi.python.org/packages/source/p/pip/pip-8.0.2.tar.gz#md5=3a73c4188f8dbad6a1e6f6d44d117eebtar -zxvf pip-8.0.2.tar.gzcd pip-8.0.2python3 setup.py buildpython3 setup.py install 如果遇到这个错误： 1pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available. 需要安装依赖： 12yum install opensslyum install openssl-devel 然后重新编译Python3.6 12cd python3.6.7make &amp;&amp; make install About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.deali.cn/tags/Python/"},{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"发行版","slug":"发行版","permalink":"http://blog.deali.cn/tags/%E5%8F%91%E8%A1%8C%E7%89%88/"},{"name":"编译","slug":"编译","permalink":"http://blog.deali.cn/tags/%E7%BC%96%E8%AF%91/"},{"name":"通用","slug":"通用","permalink":"http://blog.deali.cn/tags/%E9%80%9A%E7%94%A8/"},{"name":"理论","slug":"理论","permalink":"http://blog.deali.cn/tags/%E7%90%86%E8%AE%BA/"}]},{"title":"Asp-Net-Core学习笔记：入门篇","slug":"81f01d6464b91d605c4dfbd50719a0e7","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.832Z","comments":true,"path":"posts/dd05dff98812be5b.html","link":"","permalink":"http://blog.deali.cn/posts/dd05dff98812be5b.html","excerpt":"","text":"# Asp.Net Core 学习 基于.Net Core 2.2版本的学习笔记。 常识像Django那样自动检查代码更新，自动重载服务器（太方便了） 1dotnet watch run 托管设置设置项目文件的AspNetCoreHostingModel属性。 1234&lt;PropertyGroup&gt; &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt; &lt;AspNetCoreHostingModel&gt;InProcess&lt;/AspNetCoreHostingModel&gt;&lt;/PropertyGroup&gt; InProcess：使用IIS服务器托管 OutOfProcess：使用自带Kestrel服务器托管 中间件入门 可同时被访问和请求 可以处理请求后，将请求传递给下一个中间件 可以处理请求后，使管道短路 可以传出响应 中间件是按照添加顺序执行的 通过在Configure中添加参数ILogger&lt;Startup&gt; logger引入Asp.Net Core自带的日志组件。 12345678910111213141516171819202122232425262728293031323334353637public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILogger&lt;Startup&gt; logger)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseStaticFiles(); app.Use(async (context, next) =&gt; &#123; context.Response.ContentType = \"text/plain;charset=utf-8\"; //await context.Response.WriteAsync(\"Hello!\"); logger.LogDebug(\"M1: 传入请求\"); await next(); logger.LogDebug(\"M1: 传出响应\"); &#125;); app.Use(async (context, next) =&gt; &#123; context.Response.ContentType = \"text/plain;charset=utf-8\"; logger.LogDebug(\"M2: 传入请求\"); await next(); logger.LogDebug(\"M2: 传出响应\"); &#125;); app.Run(async (context) =&gt; &#123; //await context.Response.WriteAsync(\"你好！\"); await context.Response.WriteAsync(\"M3: 处理请求，生成响应\"); logger.LogDebug(\"M3: 处理请求，生成响应\"); &#125;);&#125; 输出日志：(可以看到三个中间件的执行过程) 12345678910111213Microsoft.AspNetCore.Hosting.Internal.WebHost:Information: Request starting HTTP/2.0 GET https://localhost:44383/ StudyManagement.Startup:Debug: M1: 传入请求StudyManagement.Startup:Debug: M2: 传入请求StudyManagement.Startup:Debug: M3: 处理请求，生成响应StudyManagement.Startup:Debug: M2: 传出响应StudyManagement.Startup:Debug: M1: 传出响应Microsoft.AspNetCore.Hosting.Internal.WebHost:Information: Request finished in 52.8954ms 200 text/plain;charset=utf-8StudyManagement.Startup:Debug: M1: 传入请求StudyManagement.Startup:Debug: M2: 传入请求StudyManagement.Startup:Debug: M3: 处理请求，生成响应StudyManagement.Startup:Debug: M2: 传出响应StudyManagement.Startup:Debug: M1: 传出响应Microsoft.AspNetCore.Hosting.Internal.WebHost:Information: Request finished in 34.3387ms 200 text/plain;charset=utf-8 静态文件支持所有静态文件都在目录wwwroot下 首先1234567891011// 设置默认文件// 不设置的话，默认就是index.html/default.html这几个var defaultFileOpinions = new DefaultFilesOptions();defaultFileOpinions.DefaultFileNames.Clear();defaultFileOpinions.DefaultFileNames.Add(\"test.html\");// 添加默认文件中间件，必须在UseStaticFiles之前注册app.UseDefaultFiles(defaultFileOpinions);// 添加静态文件中间件app.UseStaticFiles(); DirectoryBrowser 中间件可以在浏览器浏览 wwwroot 下的内容。不推荐在生产环境中使用。 1app.UseDirectoryBrowser(); FileServer 中间件集成了UseDefaultFiles, UseStaticFiles, UseDirectoryBrowser三个中间件的功能。同样不推荐在生产环境中使用。 12345var fileServerOpinions = new FileServerOptions();fileServerOpinions.DefaultFilesOptions.DefaultFileNames.Clear();fileServerOpinions.DefaultFilesOptions.DefaultFileNames.Add(\"test.html\");app.UseFileServer(fileServerOpinions); 开发者异常页面123456789101112if (env.IsDevelopment())&#123; var developerExceptionPageOptions = new DeveloperExceptionPageOptions(); // 显示代码行数 developerExceptionPageOptions.SourceCodeLineCount = 10; app.UseDeveloperExceptionPage();&#125;app.Run(async (context) =&gt;&#123; throw new Exception(\"自己抛出的异常\");&#125;); 开发环境变量 Development：开发环境 Staging：演示（模拟、临时）环境 Production：正式（生产）环境 Ops: 使用ASPNETCORE_ENVIRONMENT环境变量设置开发环境。 在开发机上，在launchSettings.json文件中设置环境变量。 在Staging和Production环境时，尽量在操作系统设置环境变量。 使用IHostEnvironment服务访问运行时环境 除了标准环境之外还支持自定义环境（UAT、QA等） 引入MVC框架首先添加MVC服务。1234567public void ConfigureServices(IServiceCollection services)&#123; // 单纯引入核心MVC服务，只有核心功能 services.AddMvcCore(); // 一般用这个，功能多 services.AddMvc();&#125; 添加中间件12345678910111213public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILogger&lt;Startup&gt; logger)&#123; if (env.IsDevelopment()) &#123; var developerExceptionPageOptions = new DeveloperExceptionPageOptions(); // 显示代码行数 developerExceptionPageOptions.SourceCodeLineCount = 10; app.UseDeveloperExceptionPage(); &#125; app.UseStaticFiles(); app.UseMvcWithDefaultRoute();&#125; MVC路由规则：/控制器名称/方法名称，（不区分大小写） 例如下面例子的路由是：/home/index HomeController代码：1234567public class HomeController : Controller&#123; public string Index() &#123; return \"home controller\"; &#125;&#125; 初步了解模型和依赖注入定义模型1234567public class Student&#123; public int Id &#123; get; set; &#125; public string Name &#123; get; set; &#125; public string ClassName &#123; get; set; &#125; public string Email &#123; get; set; &#125;&#125; 定义接口12345public interface IStudentRepository&#123; Student GetById(int id); void Save(Student student);&#125; 实现接口目前还没接入数据库，定义一个假数据的类 123456789101112131415161718192021public class MockStudentRepository : IStudentRepository&#123; private List&lt;Student&gt; _students; public MockStudentRepository() &#123; _students = new List&lt;Student&gt; &#123; new Student &#123; Id=1, Name=\"小米\", ClassName=\"红米\", Email=\"hello1@deali.cn\" &#125;, new Student &#123; Id=2, Name=\"华为\", ClassName=\"荣耀\", Email=\"hello2@deali.cn\" &#125;, new Student &#123; Id=3, Name=\"oppo\", ClassName=\"vivo\", Email=\"hello3@deali.cn\" &#125;, &#125;; &#125; public Student GetById(int id) &#123; return _students.FirstOrDefault(a =&gt; a.Id == id); &#125; public void Save(Student student) =&gt; throw new NotImplementedException();&#125; 注册依赖注入Asp.Net Core依赖注入容器注册服务有三种 AddSingleton AddTransient AddScoped 依赖注入的优点 低耦合 高测试性，更加方便进行单元测试 123456public void ConfigureServices(IServiceCollection services)&#123; services.AddMvc(); // 注册依赖注入，将实现类与接口绑定 services.AddSingleton&lt;IStudentRepository, MockStudentRepository&gt;();&#125; 在模型中使用依赖注入12345678910111213141516public class StudentController : Controller&#123; private readonly IStudentRepository _studentRepository; // 通过构造函数注入的方式注入 IStudentRepository public StudentController(IStudentRepository studentRepository) &#123; _studentRepository = studentRepository; &#125; public JsonResult Index(int id) &#123; return Json(_studentRepository.GetById(id)); &#125;&#125; 控制器入门内容格式协商在控制器方法中使用 ObjectResult 返回类型，支持内容协商，根据请求头参数返回数据， 12345// 支持内容格式协商public ObjectResult Details(int id)&#123; return new ObjectResult(_studentRepository.GetById(id));&#125; 如： 1Accept: application/xml 将返回xml格式。注：还要添加xml序列化器。 123456public void ConfigureServices(IServiceCollection services)&#123; services.AddMvc() // 注册XML序列化器 .AddXmlSerializerFormatters();&#125; 视图入门将数据从控制器传递到视图的方法前两种都是弱类型的 ViewData ViewBag 强类型视图 ViewData 弱类型字典对象 使用string类型的键值，存储和chaxun 运行时动态解析 没有智能感知，编译时也没有类型检查 使用方法： 12ViewData[\"Title\"] = \"学生视图\";ViewData[\"Model\"] = model; cshtml代码： 12345678910111213&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;@ViewData[\"Title\"]&lt;/h1&gt; @&#123; var student = ViewData[\"model\"] as StudyManagement.Models.Student; &#125; &lt;div&gt;姓名：@student.Name&lt;/div&gt; &lt;div&gt;班级：@student.ClassName&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ViewBag123// 直接给动态属性赋值ViewBag.PageTitle = \"ViewBag标题\";ViewBag.Student = model; cshtml使用： 123&lt;h1&gt;@ViewBag.PageTitle&lt;/h1&gt;&lt;div&gt;姓名：@ViewBag.Student.Name&lt;/div&gt;&lt;div&gt;班级：@ViewBag.Student.ClassName&lt;/div&gt; 强类型视图在控制器中传给View()模型 12345public IActionResult GetView()&#123; var model = _studentRepository.GetById(1); return View(model);&#125; 在cshtml中指定模型类型 12345678910111213141516@model StudyManagement.Models.Student&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;强类型模型&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;@Model.Id&lt;/li&gt; &lt;li&gt;@Model.Name&lt;/li&gt; &lt;li&gt;@Model.ClassName&lt;/li&gt; &lt;li&gt;@Model.Email&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; ViewModel 视图模型类似于DTO（数据传输对象） 定义ViewModel12345public class StudentDetailsViewModel&#123; public Student Student &#123; get; set; &#125; public string PageTitle &#123; get; set; &#125;&#125; 修改控制器12345678910public IActionResult Details()&#123; var model = _studentRepository.GetById(1); var viewModel = new StudentDetailsViewModel &#123; Student = model, PageTitle = \"viewmodel里的页面标题\" &#125;; return View(viewModel);&#125; 在View中使用1234567891011121314151617&lt;!-- 这里注册的模型改成了ViewModel了 --&gt;@model StudyManagement.ViewModels.StudentDetailsViewModel&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;强类型模型&lt;/h1&gt; &lt;h2&gt;@Model.PageTitle&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;@Model.Student.Id&lt;/li&gt; &lt;li&gt;@Model.Student.Name&lt;/li&gt; &lt;li&gt;@Model.Student.ClassName&lt;/li&gt; &lt;li&gt;@Model.Student.Email&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; View中使用循环12345678910111213141516171819202122232425@model IEnumerable&lt;StudyManagement.Models.Student&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt;Id&lt;/td&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;班级&lt;/td&gt; &lt;td&gt;邮箱&lt;/td&gt; &lt;/tr&gt; @foreach (var student in Model) &#123; &lt;tr&gt; &lt;td&gt;@student.Id&lt;/td&gt; &lt;td&gt;@student.Name&lt;/td&gt; &lt;td&gt;@student.ClassName&lt;/td&gt; &lt;td&gt;@student.Email&lt;/td&gt; &lt;/tr&gt; &#125; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 布局视图 LayoutView创建布局视图123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt; &lt;title&gt;@ViewBag.Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; @RenderBody() &lt;/div&gt; @RenderSection(\"Scripts\", required: false)&lt;/body&gt;&lt;/html&gt; 渲染视图123456@model IEnumerable&lt;StudyManagement.Models.Student&gt;@&#123; Layout = \"~/Views/Shared/_Layout.cshtml\"; ViewBag.Title = \"首页 学生列表\";&#125;&lt;div&gt;&lt;/div&gt; 视图节点 Section在布局视图里渲染节点 1@RenderSection(\"Scripts\", required: false) 在普通视图里定义节点 12345@section Scripts&#123; &lt;script&gt; document.write(\"hello\"); &lt;/script&gt;&#125; 视图开始 ViewStart我的理解就是_ViewStart.cshtml文件所在目录下的每个视图文件开始渲染先执行这个文件的内容。一般直接放在Views目录下，全局生效，可以放在各个子文件夹下，这样可以覆盖全局的_ViewStart.cshtml。 123@&#123; Layout = \"_Layout\";&#125; 视图导入 ViewImports用来导入命名空间、注册模型等等n多种操作。 生效机制和ViewStart差不多。 路由 常规路由（传统路由） 属性路由 常规路由在MapRoute方法中传入就好了。 123// 自定义路由app.UseMvc(route =&gt;route.MapRoute(\"default\", \"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\")); 属性路由比传统路由更加灵活，可以搭配传统路由使用。 即在控制器方法上添加路由注解，一个方法可以同时映射多个路由。 12345[Route(\"Home/Index\")]public IActionResult Index()&#123; return View(_studentRepository.GetAll());&#125; 路由中也可以指定参数 1234567891011[Route(\"test/&#123;id?&#125;\")]public IActionResult Details(int id = 1)&#123; var model = _studentRepository.GetById(id); var viewModel = new StudentDetailsViewModel &#123; Student = model, PageTitle = \"viewmodel里的页面标题\" &#125;; return View(viewModel);&#125; 可以直接在控制器类上加注解，[controller]/[action]。 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://blog.deali.cn/tags/%E7%AC%94%E8%AE%B0/"},{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"入门篇","slug":"入门篇","permalink":"http://blog.deali.cn/tags/%E5%85%A5%E9%97%A8%E7%AF%87/"}]},{"title":"JavaWeb开发---Servlet的生命周期实验","slug":"8c6f47c7834a75357aa8802962deffda","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.832Z","comments":true,"path":"posts/22429d851fd8998f.html","link":"","permalink":"http://blog.deali.cn/posts/22429d851fd8998f.html","excerpt":"","text":"前言Servlet是运行在服务器端的程序，它的运行状态由Servlet容器（简称容器）来维护。 通常，在容器收到客户对Servlet的请求时，容器会判断这个Servlet是否为第一次被访问，如果是第一次被访问，则会创建一个Servlet实例同时调用该实例的init()方法，进行初始化。 每个Servlet只会被创建一个实例，同时也只会被初始化一次。然后将这个实例一直保存在内存中，对所有的请求进行处理。默认的服务功能是调用与HTTP请求方法相应的do功能。同时，HttpServlet.service()方法会检查请求方法是否调用了适当的处理方法。 最后，当服务器关闭时，容器将会调用Servlet的destroy()方法清除Servlet实例。 我们下面用实验看一下这个过程： 编写测试用jsp首先，我们写一个很简单的JSP程序，我们通过JSP页面来调用Servlet方法。我们在Tomcat安装目录下的webapps文件夹下新建一个ServletLife文件夹，进入该文件夹，写一个index.jsp文件，代码如下： index.jsp 123456789101112&lt;%@ page contentType=\"text/html;charset=GBK\" language=\"java\" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Show servlet life cycle&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;form action=\"ShowLifeCycle\" name=form\"&gt; &lt;input type=\"submit\" value=\"SUBMIT\"&gt;&lt;/form&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; 这是一段很简单的JSP程序，只为说明问题，整个程序只有一个提交表单的submit。 代码第8行指定表单提交给ShowLifeCycle 代码第9行创建一个“提交” 然后我们在我们创建的/ServletLife目录下新建一个WEB-INF文件夹，进入WEB-INF文件夹，再创建一个classes文件夹。 编写Servlet程序Servlet.java 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.*;public class Servlet extends HttpServlet &#123; private ServletConfig config; private static int counter = 0; public Servlet() &#123; super(); System.out.println(\"=== \" + ++counter + \" instances ===\"); &#125; //初始化servlet @Override public void init(ServletConfig config) throws ServletException &#123; super.init(config); this.config = config; System.out.println(\"=== invoke init() ===\" + new Date().toString()); &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; System.out.println(\"=== invoke doPost ===\" + new Date().toString()); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; System.out.println(\"=== invoke doGet() ===\" + new Date().toString()); &#125; @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; super.service(req, resp); System.out.println(\"=== invoke service ===\"); &#125; @Override public void destroy() &#123; System.out.println(\"=== invoke destroy() ===\" + new Date().toString()); &#125;&#125; 代码说明 11行，定义一个类变量，用来记录一共创建了几个实例。 13~16行，显式地写出构造函数，是为了打印出一共创建了多少个实例。 18~24行，初始化函数。每次调用显示”=== invoke init() ===”以及当前时间。 26~28行，在doPost()方法中打印”=== invoke doPost ===”以及当前时间。 30~32行，在doGet()方法中打印”=== invoke doGet ===”以及当前时间。 34~38行，这里我们重写service()方法，只是为了在调用此方法的时候打印出””’ invoke service ===”以及当前时间。 40~43行，在调用destroy()方法时，打印”=== invoke destroy() ===”以及当前时间。 将该java文件编译后的Servlet.class放到/WEB-INF/classes文件夹下。 编写web.xml配置然后在/WEB-INF文件夹下创建一个配置文件web.xml： 123456789101112131415&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"&gt; &lt;servlet&gt; &lt;servlet-name&gt;LifeCycle&lt;/servlet-name&gt; &lt;servlet-class&gt;Servlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;LifeCycle&lt;/servlet-name&gt; &lt;url-pattern&gt;/ShowLifeCycle&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 这个文件主要来配置Servlet的。 运行Tomcat接下来运行Tomcat，查看控制台日志，里面会有一行刚刚打印的文字： 113-Jan-2018 10:26:21.214 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 108 ms 说明Tomcat服务器正常启动。 然后我们在浏览器地址栏输入以下网址： 1http://localhost:8080/ServletOne/ 页面上只有一个submit按钮 分析日志测试点击该按钮，此时Servlet被请求，查看控制台输出，此时内容如下: 1234&#x3D;&#x3D;&#x3D; 1 instances &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; invoke init() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:26:30 CST 2018&#x3D;&#x3D;&#x3D; invoke doGet() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:26:30 CST 2018&#x3D;&#x3D;&#x3D; invoke service &#x3D;&#x3D;&#x3D; 第2行，当第一次收到该Servlet请求时，会调用该Servlet的实例方法，并创建1个实例。”=== 1 instances ===”; -第3行，创建该实例后，调用Servlet的init()方法进行初始化操作； 第4行，通过doGet()方法处理请求响应； 第5行，在service()方法最后一行打印出”=== invoke service ===”,实际上，doGet()方法是由service()方法调用的。 接下来我们重新创建一个Servlet请求，打开浏览器，重复以上过程，找到localhost/8080/ServletLife/index.jsp页面，点击submit，然后重新打开刚才的文本文档，内容如下： 12345678&#x3D;&#x3D;&#x3D; 1 instances &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; invoke init() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:26:30 CST 2018&#x3D;&#x3D;&#x3D; invoke doGet() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:26:30 CST 2018&#x3D;&#x3D;&#x3D; invoke service &#x3D;&#x3D;&#x3D;13-Jan-2018 10:26:31.202 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [C:\\Program Files\\Apache Software Foundation\\Tomcat 8.5\\webapps\\manager]13-Jan-2018 10:26:31.272 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [C:\\Program Files\\Apache Software Foundation\\Tomcat 8.5\\webapps\\manager] has finished in [70] ms&#x3D;&#x3D;&#x3D; invoke doGet() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:33:10 CST 2018&#x3D;&#x3D;&#x3D; invoke service &#x3D;&#x3D;&#x3D; 新增加了6、7两行。再次请求Servlet，并没有新建一个Servlet实例，也没有init过程，直接使用上次创建的实例来处理请求响应，doGet()方法被调用。 然后我们关闭Tomcat服务器。查看控制台日志，内容如下： 123456789&#x3D;&#x3D;&#x3D; 1 instances &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; invoke init() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:26:30 CST 2018&#x3D;&#x3D;&#x3D; invoke doGet() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:26:30 CST 2018&#x3D;&#x3D;&#x3D; invoke service &#x3D;&#x3D;&#x3D;13-Jan-2018 10:26:31.202 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [C:\\Program Files\\Apache Software Foundation\\Tomcat 8.5\\webapps\\manager]13-Jan-2018 10:26:31.272 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [C:\\Program Files\\Apache Software Foundation\\Tomcat 8.5\\webapps\\manager] has finished in [70] ms&#x3D;&#x3D;&#x3D; invoke doGet() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:33:10 CST 2018&#x3D;&#x3D;&#x3D; invoke service &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; invoke destroy() &#x3D;&#x3D;&#x3D;Sat Jan 13 10:33:20 CST 2018 可以看到destroy()方法被调用，清除Servlet实例。 总结Servlet的生命周期 浏览器向Servlet提交请求，Servlet实例化 Servlet执行init方法，持续相应HTTP请求 浏览器/页面 关闭，Servlet实例析构 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"JavaEE","slug":"JavaEE","permalink":"http://blog.deali.cn/tags/JavaEE/"},{"name":"Web技术","slug":"Web技术","permalink":"http://blog.deali.cn/tags/Web%E6%8A%80%E6%9C%AF/"},{"name":"生命周期","slug":"生命周期","permalink":"http://blog.deali.cn/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"name":"实验","slug":"实验","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E9%AA%8C/"}]},{"title":"Android开发：使用CardView实现卡片式设计","slug":"a6a878fb8c916316d5314ddbc8e9385c","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.884Z","comments":true,"path":"posts/456edb84dd6571cf.html","link":"","permalink":"http://blog.deali.cn/posts/456edb84dd6571cf.html","excerpt":"","text":"开头引用一段官网的介绍 A FrameLayout with a rounded corner background and shadow. CardView uses elevation property on Lollipop for shadows and falls back to a custom emulated shadow implementation on older platforms. Due to expensive nature of rounded corner clipping, on platforms before Lollipop, CardView does not clip its children that intersect with rounded corners. Instead, it adds padding to avoid such intersection (See setPreventCornerOverlap(boolean) to change this behavior). Before Lollipop, CardView adds padding to its content and draws shadows to that area. This padding amount is equal to maxCardElevation + (1 - cos45) * cornerRadius on the sides and maxCardElevation * 1.5 + (1 - cos45) * cornerRadius on top and bottom. Since padding is used to offset content for shadows, you cannot set padding on CardView. Instead, you can use content padding attributes in XML or setContentPadding(int, int, int, int) in code to set the padding between the edges of the CardView and children of CardView. Note that, if you specify exact dimensions for the CardView, because of the shadows, its content area will be different between platforms before Lollipop and after Lollipop. By using api version specific resource values, you can avoid these changes. Alternatively, If you want CardView to add inner padding on platforms Lollipop and after as well, you can callsetUseCompatPadding(boolean) and pass true. To change CardView’s elevation in a backward compatible way, use setCardElevation(float). CardView will use elevation API on Lollipop and before Lollipop, it will change the shadow size. To avoid moving the View while shadow size is changing, shadow size is clamped by getMaxCardElevation(). If you want to change elevation dynamically, you should call setMaxCardElevation(float) when CardView is initialized. 简单的效果图： 简略版介绍 Apps often need to display data in similarly styled containers. These containers are often used in lists to hold each item’s information. The system provides the CardView API as an easy way for you show information inside cards that have a consistent look across the platform. These cards have a default elevation above their containing view group, so the system draws shadows below them. Cards provide an easy way to contain a group of views while providing a consistent style for the container. 开始使用 Add the dependencies The CardView widget is part of the v7 Support Libraries. To use it in your project, add the following dependency to your app module’s build.gradle file: Cardview 是Android 5.0 才引入的，所以需要导入这个依赖包。 123dependencies &#123; implementation 'com.android.support:cardview-v7:27.1.1'&#125; Create Cards In order to use the CardView you need to add it to your layout file. Use it as a view group to contain other views. In this example, the CardView contains a single TextView to display some information to the user. XML代码就是前面分析的那个，这里不再重复了。 The cards are drawn to the screen with a default elevation, which causes the system to draw a shadow underneath them. You can provide a custom elevation for a card with the card_view:cardElevation attribute. This will draw a more pronounced shadow with a larger elevation, and a lower elevation will result in a lighter shadow. CardView uses real elevation and dynamic shadows on Android 5.0 (API level 21) and above and falls back to a programmatic shadow implementation on earlier versions. Use these properties to customize the appearance of the CardView widget: To set the corner radius in your layouts, use the card_view:cardCornerRadius attribute. To set the corner radius in your code, use the CardView.setRadius method. To set the background color of a card, use the card_view:cardBackgroundColor attribute. For more information, see the API reference for CardView. 关于Cards的设计规范可以参考官网介绍：https://material.google.com/components/cards.html# 为了更好地实现这种 Cards UI 的设计，Google在v7包中引进了一种全新的控件：CardVew，本文将从开发的角度介绍CardView的一些常见使用细节。 Google用一句话介绍了CardView：一个带圆角和阴影背景的FrameLayout。CardView在Android Lollipop（API 21）及以上版本的系统中适配较好，本文我们以一个具体的例子来学习CardView的基本使用和注意事项，效果图如下： 这是一个list列表，列表中的item使用了卡片式设计，主要利用CardView控件实现，下面来分析一下布局文件的核心代码。 12345678910111213141516171819&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" xmlns:card_view=\"http://schemas.android.com/apk/res-auto\" ... &gt; &lt;!-- A CardView that contains a TextView --&gt; &lt;android.support.v7.widget.CardView xmlns:card_view=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/card_view\" android:layout_gravity=\"center\" android:layout_width=\"200dp\" android:layout_height=\"200dp\" card_view:cardCornerRadius=\"4dp\"&gt; &lt;TextView android:id=\"@+id/info_text\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /&gt; &lt;/android.support.v7.widget.CardView&gt;&lt;/LinearLayout&gt; 可以看出，核心部分在于CardView的属性使用，下面我们针对几个特殊的属性逐一分析，深化了解。 关于Z轴Android5.0 引入了Z轴的概念，可以让组件呈现3D效果. 排版技巧前面我们说过，CardView从本质上属于FrameLayout，而CardView通常包含了较多的内容元素，为了方便地排版布局中的各个元素，一般借助于其他基本布局容器，比如这里我们使用了一个RelativeLayout作为CardView的唯一Child。 Shadow Padding在Android Lollipop之前的系统，CardView会自动添加一些额外的padding空间来绘制阴影部分，这也导致了以Lollipop为分界线的不同系统上CardView的尺寸大小不同。为了解决这个问题，有两种方法：第一种，使用不同API版本的dimension资源适配（也就是借助values和values-21文件夹中不同的dimens.xml文件）；第二种，就是使用cardUseCompatPadding属性，设置为true（默认值为false），让CardView在不同系统中使用相同的padding值。 圆角覆盖这也是一个解决系统兼容的问题。在pre-Lollipop平台（API 21版本之前）上，CardView不会裁剪内容元素以满足圆角需求，而是使用添加padding的替代方案，从而使内容元素不会覆盖CardView的圆角。而控制这个行为的属性就是cardPreventCornerOverlap，默认值为true。在本例中我们设置了该属性为false。这里我们看一下，在pre-Lollipop平台中，不同cardPreventCornerOverlap值的效果对比图（左false，右true）： 显然，默认值下自动添加padding的方式不可取，所以需要设置该属性值为false。需要注意的一点是，该属性的设置在Lollipop及以上版本的系统中没有任何影响，除非cardUseCompatPadding的值为true。 Ripple效果Cards一般都是可点击的，为此我们使用了foreground属性并使用系统的selectableItemBackground值，同时设置clickable为true（如果在java代码中使用了cardView.setOnClickListener，就可以不用写clickable属性了），从而达到在Lollipop及以上版本系统中实现点击时的涟漪效果（Ripple）。在pre-Lollipop版本中，则是一个普通的点击变暗的效果。 lift-on-touch根据官网Material motion部分对交互动作规范的指导，Cards、Button等视图应该有一个触摸抬起（lift-on-touch）的交互效果，也就是在三维立体空间上的Z轴发生位移，从而产生一个阴影加深的效果，与Ripple效果共同使用，官网给了一个很好的示例图： 在实现这个效果也很简单，可以在res/drawable目录下建立一个lift_on_touch.xml文件，内容如下： 123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;!-- animate the translationZ property of a view when pressed --&gt;&lt;selector xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:state_enabled=\"true\" android:state_pressed=\"true\"&gt; &lt;set&gt; &lt;objectAnimator android:duration=\"@android:integer/config_shortAnimTime\" android:propertyName=\"translationZ\" android:valueTo=\"6dp\" android:valueType=\"floatType\"/&gt; &lt;/set&gt; &lt;/item&gt; &lt;item&gt; &lt;set&gt; &lt;objectAnimator android:duration=\"@android:integer/config_shortAnimTime\" android:propertyName=\"translationZ\" android:valueTo=\"0\" android:valueType=\"floatType\"/&gt; &lt;/set&gt; &lt;/item&gt;&lt;/selector&gt; 即通过属性动画动态改变translationZ值，沿着Z轴，从0dp到6dp变化。这里的6dp值也是有出处的，参考Google I/O 2014 app和Assign Elevation to Your Views。然后将其赋值给android:stateListAnimator属性即可。由于stateListAnimator属性只适用于Lollipop及以上版本，为了隐藏xml中的版本警告，可以指定tools:targetApi=&quot;lollipop&quot;。 关于这个功能，需要补充说明一点。这里的lift_on_touch.xml，严格意义上来讲，属于anim资源，同时适用于API 21及以上版本，所以按道理上来讲应该将其放置在res/anim-v21目录下，然后使用@anim/lift_on_touch赋值给stateListAnimator属性，而不是例子中的@drawable/lift_on_touch方法。但是放置在res/anim-v21目录下会产生一个“错误”提示： 1&lt;selector style=\"box-sizing: border-box;\"&gt;XML file should be in either “animator” or “drawable”,not “anim”&lt;/selector&gt; 虽然这个“错误”不影响编译运行，但是对于追求完美主义的程序员们来说还是碍眼，所以本例中我选择将其放在了res/drawable目录下，大家可以自行斟酌使用。 关于对lift-on-touch效果的理解，YouToBe网站有个视频解说，感兴趣的话可以参看看，地址如下：DesignBytes: Paper and Ink: The Materials that Matter 总结说明CardView还有一些其他属性可供使用，比如cardElevation设置阴影大小，contentPadding代替普通android:padding属性等，比较基础，本文就不一一介绍了，大家可以在官网上参考学习。从上面的介绍可以看出，在使用CardView时基本上都会用到一些标准配置的属性，我们可以借助style属性，将其封装到styles.xml文件中，统一管理，比如： 1234567&lt;style name=\"AppCardView\" parent=\"@style/CardView.Light\"&gt; &lt;item name=\"cardPreventCornerOverlap\"&gt;false&lt;/item&gt; &lt;item name=\"cardUseCompatPadding\"&gt;true&lt;/item&gt; &lt;item name=\"android:foreground\"&gt;?attr/selectableItemBackground&lt;/item&gt; &lt;item name=\"android:stateListAnimator\" tools:targetApi=\"lollipop\"&gt;@anim/lift_up&lt;/item&gt; ......&lt;/style&gt; 参考资料 谷歌官方文档 https://developer.android.com/reference/android/support/v7/widget/CardView 谷歌官方文档 https://developer.android.com/guide/topics/ui/layout/cardview http://yifeng.studio/2016/10/18/android-cardview/ https://www.jianshu.com/p/b105019028b6 http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1025/3621.html 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Android开发","slug":"Android开发","permalink":"http://blog.deali.cn/categories/Android%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"产品","slug":"产品","permalink":"http://blog.deali.cn/tags/%E4%BA%A7%E5%93%81/"},{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"AR","slug":"AR","permalink":"http://blog.deali.cn/tags/AR/"},{"name":"实现","slug":"实现","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E7%8E%B0/"},{"name":"设计","slug":"设计","permalink":"http://blog.deali.cn/tags/%E8%AE%BE%E8%AE%A1/"}]},{"title":"How-to-Convert-OpenSSH-keys-to-Putty-(-ppk)-on-Linux","slug":"377ff2cf30a933c2d07a11a1553f58af","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.664Z","comments":true,"path":"posts/e0461c801e4fdf92.html","link":"","permalink":"http://blog.deali.cn/posts/e0461c801e4fdf92.html","excerpt":"","text":"On Arch Linux1pacman -S putty Then cd to path of key(s): 1puttygen keyname -o keyname.ppk On Debian/Ubuntu12apt-get install putty-toolsputtygen keyname -o keyname.ppk Notice!replace the “keyname” with your private key filename! About Learn more on my WeChat Official Account：DealiAxyEvery post was in my blog：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"JavaEE","slug":"JavaEE","permalink":"http://blog.deali.cn/tags/JavaEE/"}]},{"title":"C#学习（二）匿名方法和委托的多种使用方式","slug":"3765fb512803fd580d032362d9fecd94","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.664Z","comments":true,"path":"posts/1ff9aa047902dc82.html","link":"","permalink":"http://blog.deali.cn/posts/1ff9aa047902dc82.html","excerpt":"","text":"前言上次简单介绍了委托的概念和使用，今天继续，并且引入匿名方法的概念，匿名方法在很多语言里面都有，比如Python、js、java8，尤其js，前端小伙伴可能深受js回调地狱之苦，这里面匿名方法功不可没。 js的匿名方法就像这样：这还没用lambda，因为我想下篇再介绍lambda。 1document.querySelector('.btn').onclick = function () &#123; &#125;; Python的大概这样： 1max = lambda a : a + 1 几个概念实例委托一旦声明了委托类型，委托对象必须使用 new 关键字来创建，且与一个特定的方法有关。当创建委托时，传递到 new 语句的参数就像方法调用一样书写，但是不带有参数。 多播委托委托对象可使用 “+” 运算符进行合并。一个合并委托调用它所合并的两个委托。只有相同类型的委托可被合并。”-“ 运算符可用于从合并的委托中移除组件委托。使用委托的这个有用的特点，您可以创建一个委托被调用时要调用的方法的调用列表。这被称为委托的 多播（multicasting），也叫组播。 事件事件（Event） 基本上说是一个用户操作，如按键、点击、鼠标移动等等，或者是一些提示信息，如系统生成的通知。应用程序需要在事件发生时响应事件。例如，中断。C# 中使用事件机制实现线程间的通信。 事件在类中声明且生成，且通过使用同一个类或其他类中的委托与事件处理程序关联。包含事件的类用于发布事件。这被称为 发布器（publisher） 类。其他接受该事件的类被称为 订阅器（subscriber） 类。事件使用 发布-订阅（publisher-subscriber） 模型。 发布器（publisher）是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。发布器（publisher）类的对象调用这个事件，并通知其他的对象。 订阅器（subscriber） 是一个接受事件并提供事件处理程序的对象。在发布器（publisher）类中的委托调用订阅器（subscriber）类中的方法（事件处理程序）。 关于事件的详细使用我会在后面的笔记上记录。 上代码先上笔记代码，里面有详细的注释： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697using System;namespace DelegateAndEvent&#123; class Program &#123; delegate void voidDelegate(); delegate int intDelegate(); delegate int doubleParamsDelegate(int num1, int num2); static void Main(string[] args) &#123; // 定义一个多播委托 voidDelegate d1 = T1; d1 += T2; d1 += T3; d1 += T4; // 执行委托 // 会同时执行t1,t2,t3,t4四个方法 d1(); intDelegate d2 = Q1; d2 += Q2; d2 += Q3; Console.WriteLine(\"\"); Console.WriteLine(\"\"); // 执行 // 会得到最后一个返回值， Console.WriteLine(d2()); // 两种委托赋值方式 d1 = T1; d1 = new voidDelegate(T1); // 利用委托将函数作为参数传递 Func(T1); Func(T2); // 匿名方法 // 定义匿名方法委托 voidDelegate anonymousMethod = delegate &#123; Console.WriteLine(\"hello\"); &#125;; // 作为参数传递 Func(anonymousMethod); // 定义有参数和返回值的匿名方法 doubleParamsDelegate max = delegate(int num1, int num2) &#123; return num1 &gt; num2 ? num1 : num2; &#125;; // 换成lambda表达式 max = (a, b) =&gt; a &gt; b ? a : b; max(1, 2); &#125; static void T1() &#123; Console.WriteLine(\"1\"); &#125; static void T2() &#123; Console.WriteLine(\"2\"); &#125; static void T3() &#123; Console.WriteLine(\"3\"); &#125; static void T4() &#123; Console.WriteLine(\"4\"); &#125; static int Q1() &#123; return 1; &#125; static int Q2() &#123; return 2; &#125; static int Q3() &#123; return 3; &#125; static void Func(voidDelegate func) &#123; func(); &#125; &#125;&#125; 就这样，C#的匿名方法就是new一个委托，不过基本没人用这个，因为远古版本的C#就已经支持lambda表达式了，lambda就是定义匿名方法的简便方式，而且又优雅，下篇我再记录lambda表达式的使用。 本文主要记录委托的多种使用方法，如传值、事件、传递函数参数等。 还有更多练习代码等我整理出来放到github上。 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"方法","slug":"方法","permalink":"http://blog.deali.cn/tags/%E6%96%B9%E6%B3%95/"},{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/tags/C/"},{"name":".Net","slug":"Net","permalink":"http://blog.deali.cn/tags/Net/"},{"name":"匿名","slug":"匿名","permalink":"http://blog.deali.cn/tags/%E5%8C%BF%E5%90%8D/"},{"name":"委托","slug":"委托","permalink":"http://blog.deali.cn/tags/%E5%A7%94%E6%89%98/"},{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"方式","slug":"方式","permalink":"http://blog.deali.cn/tags/%E6%96%B9%E5%BC%8F/"}]},{"title":"“极简诗词”app开发背后：Flutter移动应用快速构建实践——状态管理、国际化、数据持久化、性能优化（一）","slug":"d61067dbbe18cfbd189ad3e08e4f2b15","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.940Z","comments":true,"path":"posts/7ee0cec54be14a77.html","link":"","permalink":"http://blog.deali.cn/posts/7ee0cec54be14a77.html","excerpt":"","text":"前言在开始之前的提示：虽然Flutter背靠Google这棵大树，但是毕竟还是一个年轻的技术，项目还处于初期阶段，更新非常快，问题也不是一般的多，使用Flutter的话就意味着必须忍受各种奇怪的bug和没有丰富中文资料的头疼，本文不是安利同学们入坑，只是对“极简诗词”app的开发过程进行记录。 另外app已经上架，有兴趣的同学可以下载试试：https://www.coolapk.com/apk/251155 主要界面截图：| 主页 | 暗黑版主页 | 诗集 | 诗集浏览 || —– | —— | —— | —— || | | | || 诗集详情 | 作者列表 | 作者详情 | 字体选择 || | | | 和Django快速开发实践的文章一样，本文不讲废话，直接上步骤。 项目文件结构先设计好项目文件结构，不同的项目有不同的需求，按照自己的实际需要来设计结构就好了，以下是我的项目结构，仅供参考： 1234567lib├── common├── i10n├── models├── routes├── states└── widgets 文件夹 作用 common 一些工具类，如通用方法类、网络接口类、保存全局变量的静态类等 i10n 存放国际化相关代码 models 通过json to models生成的model类文件都存在这里 routes 存放项目的所有页面代码 states 保存app中需要跨组件共享的状态类 widgets 存放自定义widget 定义好models在本项目中，我使用json to models来自动生成models类，为什么使用这个呢？原因很简单，减少工作量，用json定义好app中使用到的模型，生成model类之后可以很方便序列化成json数据进行持久化和或者从配置文件中读取json数据反序列化成model对象，还可以直接根据后台接口返回的json数据生成model类，非常方便。 使用json定义model，例子如下： 在项目根目录下创建json文件夹，添加要进行转换的json文件，内容大概像这样。poem.json 12345678910111213141516171819202122232425262728293031323334353637383940&#123; \"strains\": [ \"平平平仄仄，平仄仄平平。\", \"仄仄平平仄，平平仄仄平。\", \"平平平仄仄，平仄仄平平。\", \"平仄仄平仄，平平仄仄平。\" ], \"author\": \"作者名称\", \"authorObj\": \"$author\", \"paragraphs\": [ \"秦川雄帝宅，函谷壯皇居。\", \"綺殿千尋起，離宮百雉餘。\", \"連甍遙接漢，飛觀迥凌虛。\", \"雲日隱層闕，風煙出綺疎。\" ], \"tags\": [ \"战争\", \"生活\", \"冬天\", \"爱国\", \"边塞\" ], \"chapter\": \"国风\", \"section\": \"周南\", \"rhythmic\": \"玉楼春\", \"title\": \"帝京篇十首 一\", \"content\": \"经传宜独坐读，史鉴宜与友共读。\", \"comment\": [ \"孙恺似曰：深得此中真趣，固难为不知者道。\", \"王景州曰：如无好友，即红友亦可。\" ], \"notes\": [ \"1.小山--写女子的隔夜残妆。小山：女子画眉的式样之一。小山重叠：眉晕褪色。金：额黄，在额上涂黄色。金明灭：褪色的额黄明暗不匀。\", \"2.鬓云欲度--鬓发撩乱如云，低垂下来。香腮雪：洁白如雪的香腮。\", \"3.照花--对镜簪花。用前镜、后镜对照以瞻顾后影。\", \"4.双双--罗襦上用金线绣的成双的鹧鸪鸟。反衬自身孤独。\" ], \"anthology\": \"所属诗集名称\", \"id\": \"08e41396-2809-423d-9bbc-1e6fb24c0ca1\"&#125; 添加依赖： 1234dev_dependencies: json_model: ^0.0.2 build_runner: ^1.0.0 json_serializable: ^2.0.0 好了之后运行： 1flutter packages pub run json_model 这样就会自动在lib/models文件夹下面生成models类啦。 有个坑爹的地方是这个json_model库只能支持很老版本的build_runner和json_serializable，这和我后面要用到的intl就冲突了啊，每次用这两个库的时候我都要不断注释切换依赖的版本，真的麻烦 = =…. 状态管理状态管理是app中最重要的一部分，也是后面主题切换和国际化的基础。本文是快速开发实践，不过多深入Flutter的状态管理，想了解的同学可以看看大佬写的Flutter教程：https://book.flutterchina.club/chapter7/provider.html 我是使用Provider这个组件来管理app的状态的，它基于InheritedWidget实现，用起来挺方便。 先添加依赖： 12dependencies: provider: ^3.2.0 在lib/states文件夹下添加共享状态的models，例如： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import 'package:flutter/material.dart';import 'package:minimal_poem/common/global.dart';import 'package:minimal_poem/models/index.dart';import 'notifier.dart';class ProfileChangeNotifier extends ChangeNotifier &#123; Profile get profile =&gt; Global.profile; @override void notifyListeners() &#123; // 保存Profile变更 Global.saveProfile(); Global.saveAllUsers(); super.notifyListeners(); // 通知依赖的Widget更新 &#125;&#125;class ThemeModel extends ProfileChangeNotifier &#123; // 获取当前主题，如果未设置主题，则默认使用蓝色主题 ColorSwatch get theme =&gt; Global.themes.firstWhere((e) =&gt; e.value == profile.theme, orElse: () =&gt; Colors.blue); // 主题改变后，通知其依赖项，新主题会立即生效 set theme(ColorSwatch color) &#123; if (color != theme) &#123; profile.theme = color[500].value; notifyListeners(); &#125; &#125; bool get darkMode =&gt; Global.profile.darkMode; set darkMode(bool value) &#123; Global.profile.darkMode = value; notifyListeners(); &#125;&#125;``` 这些model继承自`ProfileChangeNotifier`，可以提供数据或者管理数据的修改和保存。在普通的组件里可以直接使用获取或保存数据，配合`provider`组件使用可以在model数据改变的时候出发组件的更新动作～例如我的`MyApp`类定义，用到了`MultiProvider`和`Consumer2`：```dartclass MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MultiProvider( providers: &lt;SingleChildCloneableWidget&gt;[ ChangeNotifierProvider.value(value: ThemeModel()), ChangeNotifierProvider.value(value: UserModel()), ChangeNotifierProvider.value(value: LocaleModel()), ], child: Consumer2&lt;ThemeModel, LocaleModel&gt;( builder: (BuildContext context, themeModel, localeModel, Widget child) &#123; return MaterialApp( theme: ThemeData( brightness: Global.profile.darkMode ? Brightness.dark : Brightness.light, primarySwatch: themeModel.theme, ), onGenerateTitle: (context) &#123; return DaLocalizations.of(context).title; &#125;, home: HomeRoute(), //应用主页 locale: localeModel.getLocale(), //我们只支持美国英语和中文简体 supportedLocales: [ const Locale('zh', 'CN'), // 中文简体 const Locale('en', 'US'), // 美国英语 //其它Locales ], localizationsDelegates: [ // 本地化的代理类 GlobalMaterialLocalizations.delegate, GlobalWidgetsLocalizations.delegate, // EasyRefresh的多语言支持 GlobalEasyRefreshLocalizations.delegate, // 注册我们的Delegate DaLocalizationsDelegate() ], localeResolutionCallback: (Locale _locale, Iterable&lt;Locale&gt; supportedLocales) &#123; if (localeModel.getLocale() != null) &#123; //如果已经选定语言，则不跟随系统 return localeModel.getLocale(); &#125; else &#123; Locale locale; // APP语言跟随系统语言，如果系统语言不是中文简体或美国英语， // 则默认使用美国英语 if (supportedLocales.contains(_locale)) &#123; locale = _locale; &#125; else &#123; locale = Locale('en', 'US'); &#125; return locale; &#125; &#125;, ); &#125;, ), ); &#125;&#125; 国际化支持国际化就是多语言啦，用到了intl包。 在项目根目录下创建文件夹i10n-arb，在lib/i10n里创建localization_intl.dart： 123456789101112131415161718192021222324252627282930313233343536373839404142import 'package:flutter/material.dart';import 'package:intl/intl.dart';import 'messages_all.dart';class DaLocalizations &#123; String get userNameOrPasswordWrong =&gt; null; static Future&lt;DaLocalizations&gt; load(Locale locale) &#123; final String name = locale.countryCode.isEmpty ? locale.languageCode : locale.toString(); final String localeName = Intl.canonicalizedLocale(name); //2 return initializeMessages(localeName).then((b) &#123; Intl.defaultLocale = localeName; return new DaLocalizations(); &#125;); &#125; static DaLocalizations of(BuildContext context) &#123; return Localizations.of&lt;DaLocalizations&gt;(context, DaLocalizations); &#125; String get auto =&gt; Intl.message('auto', name: 'auto', desc: 'set theme mode auto');&#125;//Locale代理类class DaLocalizationsDelegate extends LocalizationsDelegate&lt;DaLocalizations&gt; &#123; const DaLocalizationsDelegate(); //是否支持某个Local @override bool isSupported(Locale locale) =&gt; ['en', 'zh'].contains(locale.languageCode); // Flutter会调用此类加载相应的Locale资源类 @override Future&lt;DaLocalizations&gt; load(Locale locale) &#123; //3 return DaLocalizations.load(locale); &#125; // 当Localizations Widget重新build时，是否调用load重新加载Locale资源. @override bool shouldReload(DaLocalizationsDelegate old) =&gt; false;&#125; 运行命令生成arb文件： 1flutter pub pub run intl_translation:extract_to_arb --output-dir=i10n-arb lib/i10n/localization_intl.dart 之后会在i10n-arb文件夹下生成intl_messages.arb文件，这个本质上是一个json文件，我们还要为不同的语言版本创建对应的翻译，比如本app支持中文和英文，那么需要创建两个文件：intl_zh.arb和intl_en.arb。 把intl_messages.arb文件的内容分别复制到对应语言的翻译文件中，修改成对应语言的版本即可。 12345678&#123; \"@@last_modified\": \"2019-12-17T17:04:43.001945\", \"title\": \"title\", \"@title\": &#123; \"type\": \"text\", \"placeholders\": &#123;&#125; &#125;,&#125; 上面这些做完之后运行命令生成对应的类： 12# 从arb文件生成dart代码flutter pub pub run intl_translation:generate_from_arb --output-dir=lib/i10n --no-use-deferred-loading lib/i10n/localization_intl.dart i10n-arb/intl_*.arb 未完待续原来有这么多内容，限制于篇幅，我将在接下来的文章中继续记录～ 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://blog.deali.cn/categories/Flutter/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","permalink":"http://blog.deali.cn/tags/flutter/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"构建","slug":"构建","permalink":"http://blog.deali.cn/tags/%E6%9E%84%E5%BB%BA/"},{"name":"应用","slug":"应用","permalink":"http://blog.deali.cn/tags/%E5%BA%94%E7%94%A8/"},{"name":"性能","slug":"性能","permalink":"http://blog.deali.cn/tags/%E6%80%A7%E8%83%BD/"},{"name":"实践","slug":"实践","permalink":"http://blog.deali.cn/tags/%E5%AE%9E%E8%B7%B5/"},{"name":"诗词","slug":"诗词","permalink":"http://blog.deali.cn/tags/%E8%AF%97%E8%AF%8D/"},{"name":"优化","slug":"优化","permalink":"http://blog.deali.cn/tags/%E4%BC%98%E5%8C%96/"},{"name":"移动","slug":"移动","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8/"},{"name":"状态","slug":"状态","permalink":"http://blog.deali.cn/tags/%E7%8A%B6%E6%80%81/"},{"name":"数据","slug":"数据","permalink":"http://blog.deali.cn/tags/%E6%95%B0%E6%8D%AE/"},{"name":"管理","slug":"管理","permalink":"http://blog.deali.cn/tags/%E7%AE%A1%E7%90%86/"}]},{"title":"第一次用上Struts2框架做Web开发的体验……","slug":"d7e14afb45d07e9eba465e7a51ed0341","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.952Z","comments":true,"path":"posts/7c9a33cf66da23f4.html","link":"","permalink":"http://blog.deali.cn/posts/7c9a33cf66da23f4.html","excerpt":"","text":"SliiyStruts2又名 sb-struts2，因为struts真的太难用了（也许在很多年前是很好用的，但是现在看来，被其他框架秒成渣） 前言想不到我还是得和这struts框架打交道啊，从一开始学web的时候就十分抵制这类古老，使用反人类的框架，不过为了帮女朋友做个学校的作业，还是得搞一下，然而，半小时就写好的业务代码，因为我不熟悉这个框架和Java的这套体系，调试了半天才成功run起来……（心好累） 开始首先使用idea创建struts2项目，但是坑来了，idea创建的少了一个包，请自行去maven仓库下载，具体是少了这个包 1javassist-3.26.0-GA.jar 接着就可以开始写代码了…… 关于Struts2框架的学习参考： Struts2入门这一篇就够了 这篇写得很好，很详细，里面还有例子，跟着做就可以自己实现一个简单的struts框架了…… 配置先写一个最简单的IndexAction，这里主要是做数据库的初始化工作，代码如下： 1234567891011121314151617181920212223package cn.deali.action;import cn.deali.utils.Database;import com.opensymphony.xwork2.ActionSupport;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class IndexAction extends ActionSupport &#123; private final static Logger logger = LoggerFactory.getLogger(IndexAction.class); @Override public String execute() throws Exception &#123; System.out.println(\"Index Action\"); logger.info(\"Index Action\"); // 初始化数据库 if (Database.init()) &#123; Database.eraseData = false; return SUCCESS; &#125; else return ERROR; &#125;&#125; 写完了Action之后还要给一个配套的jsp页面，这叫做MVC设计模式，前后端分离（伪）…… 1234567891011121314151617181920&lt;%-- Created by IntelliJ IDEA. User: DealiAxy Date: 2019/11/17 Time: 10:23--%&gt;&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;用户管理系统&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;用户管理系统&lt;/h1&gt;&lt;a href=\"Login.action\"&gt;登录&lt;/a&gt;&lt;a href=\"SignIn.action\"&gt;注册&lt;/a&gt;&lt;a href=\"User.action\"&gt;修改密码&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 其他的代码由于篇幅关系我就没放上来，本文最后有GitHub地址，有需要可以参考 之后就可以配置struts2了，就像这样…… 123456789101112131415&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\" \"http://struts.apache.org/dtds/struts-2.5.dtd\"&gt;&lt;struts&gt; &lt;package name=\"cn.deali.action\" namespace=\"/\" extends=\"struts-default\"&gt; &lt;default-action-ref name=\"Index\"/&gt; &lt;action name=\"Index\" class=\"cn.deali.action.IndexAction\" method=\"execute\"&gt; &lt;result name=\"success\"&gt;main.jsp&lt;/result&gt; &lt;result name=\"error\"&gt;error.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt;&lt;/struts&gt; 其中的&lt;default-action-ref name=&quot;Index&quot;/&gt;是我后来学到的，默认action，一开始我以为和其他框架一样，定义一个“/”路由就可以了，结果自己坑了自己，调试了半天都不行。 参考资料： struts2设置默认首页 日志记录一开始用的是log4j，感觉有点坑啊，然后想起来之前用过slf4j，虽然两个不是同个概念的，不过slf4j+slf4j-simple，是真的好用，方便，（ps：需要性能更好的可以用logback，hhh），log4j配置真的麻烦，而且嵌入到tomcat服务器，反正我这只是做个作业，不用搞太麻烦。 而且slf4j的输出模板也很好用，至少不会像log4j那么麻烦要拼接字符串了。 关于日志记录的操作参考： Log4j.properties配置详解加示例 - 简约人生的博客 - CSDN博客 log4j 配置 SLF4J使用和与Log4J对比 使用SLF4J和Logback Java日志框架：slf4j作用及其实现原理 关于我自己的Log4J的配置我这也放上来吧，虽然最后没用上。 1234567891011121314151617# 配置根Logger：设定日志记录的最低级别，log4j.rootLogger=DEBUG, stdout, logfile,ERRORlog4j.category.org.springframework=ERRORlog4j.category.org.apache=INFOlog4j.logger.org.hibernate=ERROR# 输出到控制台log4j.appender.stdout=org.apache.log4j.ConsoleAppender# 指定日志信息的最低输出级别，默认为DEBUGlog4j.appender.stdout.Threshold=ERROR# 表示所有消息都会被立即输出，设为false则不输出，默认值是truelog4j.appender.stdout.ImmediateFlush=true# 可以灵活自定义布局模式log4j.appender.stdout.layout=org.apache.log4j.PatternLayout# 默认值是System.out。log4j.appender.stdout.Target=System.out# 设定以怎样的格式显示消息log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n 数据库数据库又是喜闻乐见的SQLite了，反正每次我都是用这个，hhh…… 关于Java使用SQLite，可以参考： 在Java中使用Sqlite数据库 附上我的SQLiteHelper实用类代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189package cn.deali.utils.sqlite;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.List;/** * sqlite帮助类，直接创建该类示例，并调用相应的接口即可对sqlite数据库进行操作 * &lt;p&gt; * 本类基于 sqlite jdbc v56 * * @author haoqipeng */public class SQLiteHelper &#123; private final static Logger logger = LoggerFactory.getLogger(SQLiteHelper.class); private Connection connection; private Statement statement; private ResultSet resultSet; private String dbFilePath; /** * 构造函数 * * @param dbFilePath sqlite db 文件路径 * @throws ClassNotFoundException * @throws SQLException */ public SQLiteHelper(String dbFilePath) throws ClassNotFoundException, SQLException &#123; this.dbFilePath = dbFilePath; connection = getConnection(dbFilePath); &#125; /** * 获取数据库连接 * * @param dbFilePath db文件路径 * @return 数据库连接 * @throws ClassNotFoundException * @throws SQLException */ public Connection getConnection(String dbFilePath) throws ClassNotFoundException, SQLException &#123; Connection conn = null; Class.forName(\"org.sqlite.JDBC\"); conn = DriverManager.getConnection(\"jdbc:sqlite:\" + dbFilePath); return conn; &#125; /** * 执行sql查询 * * @param sql sql select 语句 * @param rse 结果集处理类对象 * @return 查询结果 * @throws SQLException * @throws ClassNotFoundException */ public &lt;T&gt; T executeQuery(String sql, ResultSetExtractor&lt;T&gt; rse) throws SQLException, ClassNotFoundException &#123; try &#123; resultSet = getStatement().executeQuery(sql); T rs = rse.extractData(resultSet); return rs; &#125; finally &#123; destroyed(); &#125; &#125; /** * 执行select查询，返回结果列表 * * @param sql sql select 语句 * @param rm 结果集的行数据处理类对象 * @return * @throws SQLException * @throws ClassNotFoundException */ public &lt;T&gt; List&lt;T&gt; executeQuery(String sql, RowMapper&lt;T&gt; rm) throws SQLException, ClassNotFoundException &#123; List&lt;T&gt; rsList = new ArrayList&lt;T&gt;(); try &#123; resultSet = getStatement().executeQuery(sql); while (resultSet.next()) &#123; rsList.add(rm.mapRow(resultSet, resultSet.getRow())); &#125; &#125; finally &#123; destroyed(); &#125; return rsList; &#125; /** * 执行数据库更新sql语句 * * @param sql * @return 更新行数 * @throws SQLException * @throws ClassNotFoundException */ public int executeUpdate(String sql) throws SQLException, ClassNotFoundException &#123; try &#123; int c = getStatement().executeUpdate(sql); return c; &#125; finally &#123; destroyed(); &#125; &#125; /** * 执行多个sql更新语句 * * @param sqls * @throws SQLException * @throws ClassNotFoundException */ public void executeUpdate(String... sqls) throws SQLException, ClassNotFoundException &#123; try &#123; for (String sql : sqls) &#123; getStatement().executeUpdate(sql); &#125; &#125; finally &#123; destroyed(); &#125; &#125; /** * 执行数据库更新 sql List * * @param sqls sql列表 * @throws SQLException * @throws ClassNotFoundException */ public void executeUpdate(List&lt;String&gt; sqls) throws SQLException, ClassNotFoundException &#123; try &#123; for (String sql : sqls) &#123; getStatement().executeUpdate(sql); &#125; &#125; finally &#123; destroyed(); &#125; &#125; private Connection getConnection() throws ClassNotFoundException, SQLException &#123; if (null == connection) connection = getConnection(dbFilePath); return connection; &#125; private Statement getStatement() throws SQLException, ClassNotFoundException &#123; if (null == statement) statement = getConnection().createStatement(); return statement; &#125; /** * 数据库资源关闭和释放 */ public void destroyed() &#123; try &#123; if (null != connection) &#123; connection.close(); connection = null; &#125; if (null != statement) &#123; statement.close(); statement = null; &#125; if (null != resultSet) &#123; resultSet.close(); resultSet = null; &#125; &#125; catch (SQLException e) &#123; logger.error(\"Sqlite数据库关闭时异常\", e); &#125; &#125;&#125;public interface ResultSetExtractor&lt;T&gt; &#123; public abstract T extractData(ResultSet rs);&#125;public interface RowMapper&lt;T&gt; &#123; public abstract T mapRow(ResultSet rs, int index) throws SQLException;&#125; 还有我的数据库工厂类，哈哈： 1234567891011121314151617181920212223242526272829303132333435363738394041package cn.deali.utils;import cn.deali.utils.sqlite.SQLiteHelper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class Database &#123; private final static Logger logger = LoggerFactory.getLogger(Database.class); private static SQLiteHelper db; public static boolean eraseData = false; public static SQLiteHelper getInstance() &#123; if (db != null) return db; try &#123; db = new SQLiteHelper(\"test.db\"); return db; &#125; catch (Exception ex) &#123; logger.error(ex.getMessage()); return null; &#125; &#125; public static boolean init() &#123; logger.info(\"初始化数据库！\"); db = getInstance(); try &#123; if (eraseData) &#123; db.executeUpdate(\"drop table if exists user;\"); db.executeUpdate(\"create table user(username varchar(20), password varchar(20));\"); logger.info(\"创建数据表\"); &#125; return true; &#125; catch (Exception e) &#123; e.printStackTrace(); logger.error(e.getMessage()); return false; &#125; &#125;&#125; 坑首先是tomcat服务器在Windows上有控制台输出乱码的问题，很烦，解决的话可以参考： 解决Tomcat控制台输出信息乱码 Tomcat乱码问题 catalina.bat设置为UTF-8 控制台出现乱码 完整代码最后附上GitHub地址，有需要自取，没啥技术含量，就是做个小记录。 地址： https://github.com/Deali-Axy/SillyStruts2 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"Web技术","slug":"Web技术","permalink":"http://blog.deali.cn/tags/Web%E6%8A%80%E6%9C%AF/"},{"name":"体验","slug":"体验","permalink":"http://blog.deali.cn/tags/%E4%BD%93%E9%AA%8C/"},{"name":"框架","slug":"框架","permalink":"http://blog.deali.cn/tags/%E6%A1%86%E6%9E%B6/"}]},{"title":"Android开发：在Linux系统上使用ADB连接Android手机","slug":"330be5d2269332180c275bd367a097ea","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.660Z","comments":true,"path":"posts/6b89965c25750d2f.html","link":"","permalink":"http://blog.deali.cn/posts/6b89965c25750d2f.html","excerpt":"","text":"前言由于 Linux 系统的安全性设置等原因，非 root 用户使用外部设备或者某些硬件接口会受到限制。Google 官方提供的 SDK 并不能直接工作，如找不到设备或者显示一堆问号以及 Permission Denied。 方法记得以前有看过 Google 官方提供的解决方案，即将指定的 USB 设备读写权限赋予普通用户。 首先使用 lsusb 命令查看连接到计算机的 usb 设备，找到 Android 手机对应的厂商 ID 和产品 ID，如 Bus 001 Device 004: ID 0bda:0001，则 0bda 和 0001 分别对应厂商 ID 和产品 ID。 小技巧：在连接手机前先查看一次 lsusb 的结果，连上手机后找到 lsusb 里新增的那行记录即可。国内有些小厂的厂商 ID 可能设为 Google 或 HTC 的。其实厂商 ID 设置成什么都无所谓，只是一个标志而已。 第二步，编辑/etc/udev/rules.d/70-android.rules 文件。写入以下内容（Ubuntu 下测试通过）： 1SUBSYSTEM==\"usb\", ATTRS&#123;idVendor&#125;==\"0bda\", ATTRS&#123;idProduct&#125;==\"0001\",MODE=\"0666\" 其中0bda和0001分别替换成对应的厂商 ID 和产品 ID。 第三步，赋予读和执行权限：chmod a+rx /etc/udev/rules.d/70-android.rules 最后，拔出手机，重启 adb 并插回手机即可：adb kill-server 查看设备列表以验证成功 adb devices 其实 Linux 连接 Android 手机比 Windows 方便多了，起码不用满世界找驱动。","categories":[{"name":"Android开发","slug":"Android开发","permalink":"http://blog.deali.cn/categories/Android%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"系统","slug":"系统","permalink":"http://blog.deali.cn/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"连接","slug":"连接","permalink":"http://blog.deali.cn/tags/%E8%BF%9E%E6%8E%A5/"},{"name":"手机","slug":"手机","permalink":"http://blog.deali.cn/tags/%E6%89%8B%E6%9C%BA/"}]},{"title":"如何查看安卓模拟器的ADB端口号？","slug":"24868dd98afe17783f7e360f3bae4a9d","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.652Z","comments":true,"path":"posts/ab9a026a8511492c.html","link":"","permalink":"http://blog.deali.cn/posts/ab9a026a8511492c.html","excerpt":"","text":"找到模拟器的进程用tasklist查看进程pid 1tasklist 找到模拟器进程的PID，然后再使用netstat命令。 1netstat -ano | findstr 1000 这里的 1000 就是上面查到的进程PID。 根据获取到的端口号，就可以使用 ADB 连接了。 1adb connect 127.0.0.1:端口号 当然最好的方法还是去模拟器提供商的网站上查一下，这是最方便的。例如我是用的网易模拟器官网上说了端口是7555，我就直接拿来用了。 关于 ADB 的用法可以查看：谷歌官方文档 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Android","slug":"Android","permalink":"http://blog.deali.cn/categories/Android/"}],"tags":[{"name":"端口号","slug":"端口号","permalink":"http://blog.deali.cn/tags/%E7%AB%AF%E5%8F%A3%E5%8F%B7/"},{"name":"模拟器","slug":"模拟器","permalink":"http://blog.deali.cn/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8/"},{"name":"查看","slug":"查看","permalink":"http://blog.deali.cn/tags/%E6%9F%A5%E7%9C%8B/"}]},{"title":"Maven国内镜像配置","slug":"22ffcba29f142f3c83a11cc27be04fa1","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.652Z","comments":true,"path":"posts/4fb83feba2757088.html","link":"","permalink":"http://blog.deali.cn/posts/4fb83feba2757088.html","excerpt":"","text":"配置maven安装目录下的conf/settings.xml。在&lt;mirrors&gt;节点下，设置： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;mirror&gt; &lt;id&gt;aliyun-public&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun public&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-central&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun central&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/central&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-spring&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun spring&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-spring-plugin&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun spring-plugin&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/spring-plugin&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-apache-snapshots&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun apache-snapshots&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-google&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun google&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/google&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-gradle-plugin&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun gradle-plugin&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/gradle-plugin&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-jcenter&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun jcenter&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/jcenter&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-releases&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun releases&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/releases&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-snapshots&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun snapshots&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/snapshots&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-grails-core&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun grails-core&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/grails-core&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyun-mapr-public&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;aliyun mapr-public&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/mapr-public&lt;/url&gt; &lt;/mirror&gt;","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Build Tools","slug":"Build-Tools","permalink":"http://blog.deali.cn/tags/Build-Tools/"},{"name":"镜像","slug":"镜像","permalink":"http://blog.deali.cn/tags/%E9%95%9C%E5%83%8F/"}]},{"title":"Linux玩家必备：Ubuntu完全配置指南","slug":"7010eac3f12affa2b8223467bc7caa16","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.788Z","comments":true,"path":"posts/49f2d05c4961d718.html","link":"","permalink":"http://blog.deali.cn/posts/49f2d05c4961d718.html","excerpt":"","text":"前言笔者从14年接触Linux至今已有4年，一开始折腾各种发行版，从国产的StartOS、Deepin到Debian、Ubuntu、OpenSUSE、Fedora到Arch Linux，目前主力系统是Manjaro和Ubuntu16.04，本文适用于刚刚开始使用Linux，并且有一定命令行基础的新手玩家，根据我使用Linux的经验进行编写，所有软件和命令均在Ubuntu16.04系统上测试运行通过。 由于涉及内容过多、篇幅过大，本文将会持续更新，目前计划是每月更新一次，请大家保持关注，如果大家有关于Linux的相关使用方法技巧的话，也欢迎一起交流～ 修改软件源Ubuntu默认的软件源是国外的，安装软件会比较慢，我们把他修改为国内阿里云的软件源。打开【设置】。 选择【软件更新】 点击【下载自】选择【其他服务器】 点击【关闭】保存即可，他会提示让你刷新列表，刷新一遍就行啦。 必备软件安装我发现很多人对Linux的印象还停留在十几年前，然而现在Linux完全可以满足日常工作和生活的需求了，（除了游戏玩不了那么多），大部分要用到的软件，Linux上都有对应的解决方案或者是替代品。 常用（国产）Windows软件以下列表中的软件都是可以在Linux上完美运行的，感谢Deepin和项目作者的努力与无私奉献！这些软件都是依赖于Deepin-Wine，Deepin工程师调配出来的wine环境。 Deepin wine Ubuntu 项目主页：https://github.com/wszqkzqk/deepin-wine-ubuntu 这里是Deepin-wine 容器的存档（针对Ubuntu有极少量的优化），也就是下列软件的安装包。Deepin wine containers for Ubuntu项目主页：https://github.com/wszqkzqk/deepin-wine-containers-for-ubuntu QQ TIM QQ轻聊版 微信 Foxmail 百度网盘 360压缩 WinRAR 迅雷极速版 安装方法：可以选择使用git把这个项目克隆到本地，也可以选择直接下载完整压缩包，如果你的网络不是很稳定的话推荐下载完整压缩包。 1234git clone https://github.com/wszqkzqk/deepin-wine-ubuntu.git# 克隆完成之后，进入项目目录安装deepin-winecd deepin-wine-ubuntu./install.sh 然后，在这个项目或上面的软件列表里下载需要的安装包进行安装： Deepin wine containers for Ubuntu项目主页：https://github.com/wszqkzqk/deepin-wine-containers-for-ubuntu 有关deepin wine系列应用的还可以参考一下这篇博文：https://www.lulinux.com/archives/1319 听音乐良心的网易云音乐出了Linux版本，在Ubuntu16.04上可以完美运行。在官网上下载安装包安装就行了～官网地址：https://music.163.com/#/download 输入法搜狗输入法也挺良心的，有Linux版本，免费无广告，又能同步，比Windows版不知道良心多少倍。官网地址：https://pinyin.sogou.com/linux/?r=pinyin office软件以前Linux备受诟病的一点就是office编辑太差了，现在好了，良心的金山推出了Linux版本的WPS，和Windows版本的WPS功能一样，并且没有弹窗广告！官网地址：http://www.wps.cn/product/wpslinux 下载完成之后，打开安装包所在文件夹，右键【在此处打开终端】输入以下命令进行安装（具体文件名视下载的版本而定）： 1sudo dpkg -i wps-office_10.1.0.6757_amd64.deb 如果安装过程有出错，大概率是缺少相关依赖包，请输入以下命令安装相关依赖： 1sudo apt install -f 为了更好的使用体验，建议导入Windows字体，这样各类文档的编辑就毫无障碍了。可以参考我这篇博客：https://www.jianshu.com/p/5042a4855267 shell 命令行我最喜欢zsh，功能强大，可定制性很高，各种配置、各种插件，玩出无限的可能性。 安装方法：1sudo apt install zsh 比较常见的方法是使用oh-my-zsh来自动管理配置，可以查看官网：https://ohmyz.sh/不过这里我推荐用zsh官方的antigen来管理，详细使用方法见其Github主页：https://github.com/zsh-users/antigen 开发相关Linux简直就是专门为开发者打造的系统，各类开发工具一应俱全，全部工具都可以一键安装，非常方便。 vim编辑器用Linux的话，绝对不能错过大名鼎鼎的vim神器，无需过多解释，体验一下就知道了～ 1sudo apt install vim 相关学习资料 Vim学习指南 http://www.linuxidc.com/Linux/2013-08/89096.htm 快速学会 Vi编辑器 http://www.linuxidc.com/Linux/2013-08/88586.htm 强大的Vim 编辑器 http://www.linuxidc.com/Linux/2013-07/87544.htm 在CentOS 6.2上搭建Vim开发环境 http://www.linuxidc.com/Linux/2013-07/87363.htm 把Vim打造成优秀的C++ IDE http://www.linuxidc.com/Linux/2016-06/132262.htm Vim技巧分享:C语言设置 http://www.linuxidc.com/Linux/2012-12/77124.htm Ubuntu中设置Vim的行号 http://www.linuxidc.com/Linux/2012-12/75485.htm sublime-text3同样一款很有名的编辑器工具，安装方法： 123sudo add-apt-repository ppa:webupd8team/sublime-text-3 sudo apt-get update sudo apt-get install sublime-text vscode微软开发的开源编辑器，现在已经有统一江湖的趋势了，很强，必须一试！直接去官网下载安装包安装即可！官网地址：https://code.visualstudio.com/ jetbrains全家桶不得不说jetbrains太强了，他家的IDE真的太好用了，在Linux上使用的话，强烈推荐使用jetbrains toolbox来管理，这个工具在jetbrains官网可以下载，安装都是一键式操作，非常方便！ 系统配置开始本小节之前要打开系统设置这个界面。 全局菜单设置Ubuntu的unity桌面的特色就是全局菜单，不过现在的屏幕越来越大了，所有窗口的菜单都放在屏幕的左上角的话也挺影响使用的，我们可以把菜单放到窗口的标题栏上，既能充分利用空间，又不会影响使用。 如下图，选择【外观】-【行为】-【显示窗口菜单】改成【在窗口的标题栏】 主题美化Linux系统最大的特色就是可以根据自己的喜好进行自定义配置，想做成什么样的外观都可以，可定制性超强。下面介绍一下我自己的简单美化方案，基于Ubuntu16.04（以后会补充Ubuntu18.04以上系统的方案，也就是基于Gnome桌面的方案）。首先要安装unity tweak tool，待会要通过这个工具来修改主题和图标。 1sudo apt-get install unity-tweak-tool 安装Flatabulous主题Github地址：https://github.com/anmoljagetia/Flatabulous开始安装主题 123sudo add-apt-repository ppa:noobslab/themessudo apt-get updatesudo apt-get install flatabulous-theme 安装主题配套的ultra-flat-icons图标： 123sudo add-apt-repository ppa:noobslab/iconssudo apt-get updatesudo apt-get install ultra-flat-icons 安装完成后，打开 unity-tweak-tool ，点击主题，修改为 Flatabulous，如图： 修改图标： 主题效果： 安装Arc Theme主题这个也是Ubuntu的一款扁平化主题，Github官网地址：https://github.com/horst3180/arc-theme 安装主题： 123sudo add-apt-repository ppa:noobslab/themessudo apt-get updatesudo apt-get install arc-theme 安装配套图标： 123sudo add-apt-repository ppa:noobslab/iconssudo apt-get updatesudo apt-get install arc-icons 修改主题和图标的方法不再赘述。 好玩的命令行终端Linux的终端超级强大，几乎所有的工作都可以通过命令完成，终端在敲命令的同时还可以做很多有趣的事情，本小节中会列举一些好玩有趣的命令，建议大家一个个尝试～如果你们有发现更好玩的可以告诉我，一起赚。 boxes顾名思义，这个命令可以把你想说的话装在盒子里面，还可以选择多种盒子，具体可以看看它的代码主页。Github地址：https://github.com/ascii-boxes/boxes安装： 1sudo apt install boxes 试一下： 1234567891011121314151617╰─$ echo hello | boxes -d diamonds -a c /\\ /\\ /\\ /\\//\\\\/\\ /\\//\\\\/\\ /\\//\\\\/\\ /\\//\\\\\\///\\\\/\\//\\\\\\///\\\\/\\//\\\\\\///\\\\/\\//\\\\\\//\\/\\\\///\\\\\\//\\/\\\\///\\\\\\//\\/\\\\///\\\\\\\\//\\/ \\/\\\\// \\/ \\/ /\\ /\\//\\\\ hello //\\\\\\\\// \\\\// \\/ \\/ /\\ /\\//\\\\/\\ /\\//\\\\\\\\///\\\\/\\//\\\\\\///\\\\/\\//\\\\\\///\\\\/\\//\\\\\\// \\/\\\\///\\\\\\//\\/\\\\///\\\\\\//\\/\\\\///\\\\\\//\\/ \\/\\\\//\\/ \\/\\\\//\\/ \\/\\\\//\\/ \\/ \\/ \\/ you-get 命令行视频下载工具很多视频网站都能下载，请自测。Github地址：https://github.com/soimort/you-get tget种子下载工具Github地址：https://github.com/jeffjose/tget 小火车：sl很简单，就是开火车～安装 &amp; 使用： 12sudo apt install slsl 效果：你会看到一辆小火车在屏幕上开过去。 cmatrix代码雨12sudo apt install cmatrixcmatrix 效果： screenfetch12sudo apt install screenfetchscreenfetch 效果： pv你也许曾经看到过电影里的模拟字幕, 它们好像是被实时敲打出来的. 如果我么能在终端里实现这样的效果, 那不是很好? 123sudo apt install pv# 使用方法echo 打字机啦啦啦 | pv -qL 10 终端火焰12sudo apt-get install libaa-binaafire 效果： ddate精心调制的混搭日历1234sudo apt install ddate# 测试ddate# 输出：Today is Pungenday, the 33rd day of Chaos in the YOLD 3185 使用 Telnet 观看星球大战电影的 ASCII 演绎版本在命令行中运行： 1telnet towel.blinkenlights.nl 在终端中看天气123curl wttr.in# 也可以指定城市名称，比如curl wttr.in/guangzhou 终端艺术字figlet是一款在终端上显示艺术字的工具。 1sudo apt install figlet 运行效果 123456╰─$ echo hello | figlet _ _ _ | |__ ___| | | ___ | '_ \\ / _ \\ | |/ _ \\ | | | | __/ | | (_) ||_| |_|\\___|_|_|\\___/ 类似的工具还有toilet，也可以试试。 终端贪吃蛇游戏通过docker运行贪吃蛇游戏，运行命令如下： 1docker run -ti dyego/snake-game 注意：这个命令需要系统中先安装了docker才可以，关于docker的安装使用，可以查看这篇文章：https://www.jianshu.com/p/724315d13ad7 命令行玩俄罗斯方块Github主页：https://github.com/samtay/tetris下载命令： 12curl -L https://github.com/samtay/tetris/releases/download/0.1.3/tetris-`uname -s`-`uname -m` -o tetrischmod +x tetris 运行命令： 1tetris NetEase-MusicBox 命令行版本的网易云音乐Github主页：https://github.com/darknessomi/musicbox安装： 12pip3 install NetEase-MusicBoxsudo apt install mpg123 运行： 1musicbox 键盘按键： Key Effect j Down 下移 k Up 上移 h Back 后退 l Forword 前进 u Prev page 上一页 d Next page 下一页 f Search 快速搜索 [ Prev song 上一曲 ] Next song 下一曲 = Volume + 音量增加 - Volume - 音量减少 Space Play/Pause 播放/暂停 ? Shuffle 手气不错 m Menu 主菜单 p Present/History 当前/历史播放列表 i Music Info 当前音乐信息 ⇧+p Playing Mode 播放模式切换 a Add 添加曲目到打碟 ⇧+a Enter album 进入专辑 g To the first 跳至首项 ⇧+g To the end 跳至尾项 z DJ list 打碟列表 s Star 添加到收藏 c Collection 收藏列表 r Remove 删除当前条目 ⇧+j Move Down 向下移动当前项目 ⇧+k Move Up 向上移动当前项目 ⇧+c Cache 缓存歌曲到本地 , Like 喜爱 . Trash FM 删除 FM / Next FM 下一FM q Quit 退出 t Timing Exit 定时退出 w Quit&amp;Clear 退出并清除用户信息 更多操作请看Github主页的文档。 axel多线程下载工具axel是Linux下一个不错的HTTP/ftp高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。 安装： 1sudo apt install axel 更多用法请参考：http://man.linuxde.net/axel 写在后面赶在春节前完成了Ubuntu完全配置指南的第一版，后续内容会持续更新，请大家保持关注，同时也借此机会祝所有读者朋友新年快乐，阖家幸福！ 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"必备","slug":"必备","permalink":"http://blog.deali.cn/tags/%E5%BF%85%E5%A4%87/"},{"name":"玩家","slug":"玩家","permalink":"http://blog.deali.cn/tags/%E7%8E%A9%E5%AE%B6/"},{"name":"指南","slug":"指南","permalink":"http://blog.deali.cn/tags/%E6%8C%87%E5%8D%97/"}]},{"title":"Asp-Net-Core学习笔记：（二）视图、模型、持久化、文件、错误处理、日志","slug":"86e31bff25f817779dcb44ee1025eeea","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.832Z","comments":true,"path":"posts/291087cedfa8e994.html","link":"","permalink":"http://blog.deali.cn/posts/291087cedfa8e994.html","excerpt":"","text":"TagHelper入门优点：根据参数自动生成，不需要手写超链接，类似Django模板里面的url命令。 在ViewImport中添加TagHelper 1@addTagHelper *,Microsoft.AspNetCore.Mvc.TagHelpers 比如，链接TagHelper使用 12345&lt;a class=\"btn btn-outline-primary\" asp-controller=\"student\" asp-action=\"get\" asp-route-id=\"@student.Id\"&gt; 查看&lt;/a&gt; 缓存破坏的TagHelper 1&lt;img src=\"~/images/banner.jpg\" alt=\"Alternate Text\" asp-append-version=\"true\" /&gt; 环境 TagHelper在开发环境中使用本地css文件，在非开发环境下使用的是CDN的css文件。 注：integrity是用来做完整性检查的，保证CDN提供文件的完整和安全。 1234567&lt;environment include=\"Development\"&gt; &lt;link href=\"~/lib/twitter-bootstrap/css/bootstrap.css\" rel=\"stylesheet\" /&gt;&lt;/environment&gt;&lt;environment exclude=\"Development\"&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"&gt;&lt;/environment&gt; 为了防止CDN加载失败页面无法显示，可以加上fallback相关属性，第一个是失败时加载的文件，第二个是不检查这个文件的完整性 12asp-fallback-href=\"~/lib/twitter-bootstrap/css/bootstrap.css\"asp-suppress-fallback-integrity=\"true\" 表单 Tag Helper直接贴上一个布局的代码，把class样式都去掉了，保留最基本代码。 确实是很方便的，和Django、jinja2之类的模板比完全不输。 1234567891011121314@model Student&lt;form asp-controller=\"student\" asp-action=\"create\"&gt; &lt;label asp-for=\"Name\"&gt;&lt;/label&gt; &lt;input asp-for=\"Name\" /&gt; &lt;label asp-for=\"Email\"&gt;&lt;/label&gt; &lt;input asp-for=\"Email\" /&gt; &lt;label asp-for=\"ClassName\"&gt;&lt;/label&gt; &lt;select asp-for=\"ClassName\" asp-items=\"Html.GetEnumSelectList&lt;ClassNameEnum&gt;()\"&gt;&lt;/select&gt; &lt;button type=\"submit\"&gt;提交&lt;/button&gt;&lt;/form&gt; 模型绑定将Http请求中的数据绑定到控制器方法上对应参数的顺序： Form Values （Post表单数据） Route Values （路由中的值） Query String （Get的查询字符串） 模型验证1.设置模型首先在Model中加入验证属性，如： 12345678910111213141516public class Student&#123; public int Id &#123; get; set; &#125; [Display(Name = \"姓名\"), MaxLength(4, ErrorMessage = \"名字长度不能超过四个字\")] [Required(ErrorMessage = \"请输入名字！\")] public string Name &#123; get; set; &#125; [Display(Name = \"班级\")] public ClassNameEnum ClassName &#123; get; set; &#125; [Required(ErrorMessage = \"请输入邮箱！\")] [Display(Name = \"邮箱\")] [RegularExpression(@\"^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$\", ErrorMessage = \"邮箱格式不正确\")] public string Email &#123; get; set; &#125;&#125; 常用的模型验证方法 Required Range：指定允许的最小值和最大值 MinLength MaxLength Compare：比较两个属性，比如密码和确认密码 RegularExpression：正则匹配 2.在控制器中加入验证代码使用ModelState.IsValid来验证模型属性是否正确 1234567891011[HttpPost]public IActionResult Create(Student student)&#123; if (ModelState.IsValid) &#123; var newStudent = _studentRepository.Add(student); return RedirectToAction(\"details\", new &#123; id = newStudent.Id &#125;); &#125; return View();&#125; 3.使用TagHelper在网页上显示错误信息例子如下： 123456789&lt;div class=\"text-danger\" asp-validation-summary=\"All\"&gt;&lt;/div&gt;&lt;div class=\"form-group row\"&gt;&lt;label asp-for=\"Name\" class=\"col-sm-2 col-form-label\"&gt;&lt;/label&gt;&lt;div class=\"col-sm-10\"&gt;&lt;input asp-for=\"Name\" class=\"form-control\" /&gt;&lt;span class=\"text-danger\" asp-validation-for=\"Name\"&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt; EF Core入门首先实现DbContext12345678910public class AppDbContext:DbContext&#123; // 将应用程序的配置传递给DbContext public AppDbContext(DbContextOptions&lt;AppDbContext&gt; options) : base(options) &#123; &#125; // 对要使用到的每个实体都添加 DbSet&lt;TEntity&gt; 属性 // 通过DbSet属性来进行增删改查操作 // 对DbSet采用Linq查询的时候，EFCore自动将其转换为SQL语句 public DbSet&lt;Student&gt; Students &#123; get; set; &#125;&#125; 注册DbContext连接池1services.AddDbContextPool&lt;AppDbContext&gt;(options =&gt; options.UseSqlServer(_configuration.GetConnectionString(\"StudentDBConnection\"))); 其中，本地SqlServer数据库的配置，在appserttings.json中： 123\"ConnectionStrings\": &#123; \"StudentDBConnection\": \"server=(localdb)\\\\MSSQLLocalDB;database=StudentDB;Trusted_Connection=true\"&#125; 实现仓储12345678910111213141516171819202122232425262728293031323334public class SqlStudentRepository : IStudentRepository&#123; private readonly AppDbContext _context; public SqlStudentRepository(AppDbContext context) &#123; _context = context; &#125; public Student Add(Student student) &#123; _context.Students.Add(student); _context.SaveChanges(); return student; &#125; public Student Delete(int id) &#123; var student = _context.Students.Find(id); if (student != null) &#123; _context.Students.Remove(student); _context.SaveChanges(); &#125; return student; &#125; public IEnumerable&lt;Student&gt; GetAll() =&gt; _context.Students; public Student GetById(int id) =&gt; _context.Students.Find(id); public Student Update(Student updatedStudent) &#123; var student = _context.Students.Attach(updatedStudent); student.State = EntityState.Modified; _context.SaveChanges(); return updatedStudent; &#125;&#125; EF Core 常用命令在nuget控制台中，不区分大小写 Get-Help about_enti：显示帮助，about_enti全名很长可以只写前面的 Add-Migration：添加迁移记录 Update-Database：更新数据库 添加种子数据重写DbContext的OnModelCreating方法 12345protected override void OnModelCreating(ModelBuilder modelBuilder) &#123; modelBuilder.Entity&lt;Student&gt;().HasData( new Student &#123; Id = 1, Name = \"小米\" &#125;, );&#125; 为了避免DbContext代码太乱，也可以使用扩展方法的方式： 123456789public static class ModelBuilderExtensions&#123; public static void InsertSeedData(this ModelBuilder mBuilder) &#123; mBuilder.Entity&lt;Student&gt;().HasData( new Student &#123; Id = 1, Name = \"小米\" &#125;, ); &#125;&#125; 领域模型与数据库架构 使用迁移功能同步领域模型和数据库架构 使用 add-migration 添加迁移记录 使用 remove-migration 删除最近一条记录 使用 update-database 迁移记录名称 可以回滚至任意一次迁移 文件上传定义ViewModel要上传的字段采用 IFormFile 类型 1234567public class StudentCreateViewModel&#123; public int Id &#123; get; set; &#125; // 省略无关代码... [Display(Name = \"图片\")] public IFormFile Photo &#123; get; set; &#125;&#125; 编写视图修改cshtml视图文件，修改模型绑定： 1@model StudentCreateViewModel 加入上传文件的表单项 123456789&lt;div class=\"form-group row\"&gt; &lt;label asp-for=\"Photo\" class=\"col-sm-2 col-form-label\"&gt;&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;div class=\"custom-file\"&gt; &lt;input asp-for=\"Photo\" class=\"form-control custom-file-input\" /&gt; &lt;label class=\"custom-file-label\"&gt;请选择图片&lt;/label&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 为了选择文件后能显示出文件名还要编写js： 123456$(document).ready(function () &#123; $('.custom-file-input').on('change', function () &#123; var fileName = $(this).val().split('\\\\').pop(); $(this).next('.custom-file-label').html(fileName); &#125;);&#125;); 编写控制器通过构造函数注入 HostingEnvironment 12345public StudentController(IStudentRepository studentRepository, HostingEnvironment hostingEnvironment)&#123; _studentRepository = studentRepository; _hostingEnvironment = hostingEnvironment;&#125; 处理文件上传和保存的逻辑 1234567891011121314151617181920212223242526272829303132[HttpPost]public IActionResult Create(StudentCreateViewModel model)&#123; if (ModelState.IsValid) &#123; var uniqueFileName = \"\"; if (model.Photo != null) &#123; var uploadDir = Path.Combine( _hostingEnvironment.WebRootPath, \"uploads\", \"images\"); uniqueFileName = Guid.NewGuid().ToString() + \"_\" + model.Photo.FileName; model.Photo.CopyTo(new FileStream( Path.Combine(uploadDir, uniqueFileName), FileMode.Create)); &#125; var student = new Student &#123; Name = model.Name, Email = model.Email, ClassName = model.ClassName, PhotoPath = uniqueFileName, &#125;; var newStudent = _studentRepository.Add(student); return RedirectToAction(\"details\", new &#123; id = newStudent.Id &#125;); &#125; return View();&#125; 多文件上传和单文件差不多 ViewModel增加 List&lt;IFormFile&gt; 类型字段 12[Display(Name = \"图库\")]public List&lt;IFormFile&gt; Gallery &#123; get; set; &#125; 修改视图123456789&lt;div class=\"form-group row\"&gt; &lt;label asp-for=\"Gallery\" class=\"col-sm-2 col-form-label\"&gt;&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;div class=\"custom-file\"&gt; &lt;input asp-for=\"Gallery\" multiple id=\"gallery-input\" class=\"form-control custom-file-input\" /&gt; &lt;label id=\"gallery-label\" class=\"custom-file-label\"&gt;请选择图片 可以一次选择多张&lt;/label&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; js代码： 123456789$('#gallery-input').on('change', function () &#123; var label = $(this).next('#gallery-label'); var files = $(this)[0].files; if (files.length &gt; 1) &#123; label.html(`你已经选择了$&#123;files.length&#125;个文件`); &#125; else if (files.length == 1) &#123; label.html(files[0].name); &#125;&#125;); 修改控制器代码1234567891011// 处理多文件上传if (model.Gallery != null &amp;&amp; model.Gallery.Count &gt; 0)&#123; foreach(var photo in model.Gallery) &#123; uniqueFileName = Guid.NewGuid().ToString() + \"_\" + photo.FileName; photo.CopyTo(new FileStream(Path.Combine(uploadDir, uniqueFileName),FileMode.Create)); &#125;&#125; 错误处理添加错误处理页面在 Startup.cs 中设置中间件： 1app.UseStatusCodePagesWithReExecute(\"/error/&#123;0&#125;\"); 推荐用 UseStatusCodePagesWithReExecute 而不是 UseStatusCodePagesWithRedirects，前者在管道内执行执行错误跳转url，后者会重定向到该url，导致http错误状态码变成新页面的正常执行的200码了。 接着编写错误控制器： 12345678910111213141516171819202122public class ErrorController : Controller&#123; [Route(\"Error/&#123;statusCode&#125;\")] public IActionResult Index(int statusCode) &#123; var statusCodeResult = HttpContext.Features. Get&lt;IStatusCodeReExecuteFeature&gt;(); var viewModel = new ErrorViewModel &#123; Path = statusCodeResult.OriginalPath, QueryString = statusCodeResult. OriginalQueryString, &#125;; switch (statusCode) &#123; case 404: viewModel.Message = \"页面未找到\"; break; &#125; return View(\"Error\", viewModel); &#125;&#125; 对了，我还定义了ViewModel： 1234567public class ErrorViewModel&#123; public int Code &#123; get; set; &#125; public string Message &#123; get; set; &#125; public string Path &#123; get; set; &#125; public string QueryString &#123; get; set; &#125;&#125; 视图代码就不贴了，无非就是显示ViewModel里的这些错误信息~ 设置全局异常跳转添加中间件 1app.UseExceptionHandler(\"/exception\"); 编写处理用的控制器，这里需要添加AllowAnonymous注解，允许用户在未登录的时候访问到这个异常页面，保证无论如何可以显示出异常页面。 1234567891011121314[AllowAnonymous][Route(\"exception\")]public IActionResult ExceptionHandler()&#123; var exception = HttpContext.Features. Get&lt;IExceptionHandlerPathFeature&gt;(); var viewModel = new ExceptionViewModel &#123; Path = exception.Path, Message = exception.Error.Message, StackTrace = exception.Error.StackTrace, &#125;; return View(\"Exception\", viewModel);&#125; 另外，ViewModel定义如下： 123456public class ExceptionViewModel&#123; public string Path &#123; get; set; &#125; public string Message &#123; get; set; &#125; public string StackTrace &#123; get; set; &#125;&#125; 日志记录AspNetCore里面自带了一套日志系统，默认已经注册到了服务容器里了，只要在控制器的构造函数里注入就可以使用了，比如： 123456789public class ErrorController : Controller&#123; private ILogger&lt;ErrorController&gt; _logger; public ErrorController(ILogger&lt;ErrorController&gt; logger) &#123; this._logger = logger; &#125;&#125; 默认的日志只会记录到控制台或者调试输出，不过我们为了实现更多功能，比如记录到文件或者推送到日志服务器，我们需要使用第三方的日志组件。这里我用的是NLog。 首先要安装NLog.Web.AspNetCore这个包。 之后在Program.cs里引入nlog服务： 123456789101112public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt; WebHost.CreateDefaultBuilder(args) .ConfigureLogging((hostingContext, logging) =&gt; &#123; // 保留官方的代码中的默认日志程序 logging.AddConfiguration(hostingContext.Configuration.GetSection(\"Logging\")); logging.AddConsole(); logging.AddDebug(); logging.AddEventSourceLogger(); // 引入 nlog logging.AddNLog(); &#125;).UseStartup&lt;Startup&gt;(); 保留官方默认日志程序那里，要看AspNetCore的源代码，本文用的是2.2版本，在github看，地址如下： https://github.com/dotnet/aspnetcore/blob/v2.2.8/src/DefaultBuilder/src/WebHost.cs 然后，为了使用nlog，需要创建一个配置文件，在项目根目录创建 NLog.config： 关于配置文件的说明可以参考：https://github.com/NLog/NLog/wiki 123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" throwConfigExceptions=\"true\"&gt; &lt;targets&gt; &lt;target name=\"f1\" xsi:type=\"File\" fileName=\"Logs\\nlog-all-$&#123;shortdate&#125;.log\"/&gt; &lt;target name=\"n1\" xsi:type=\"Network\" address=\"tcp://localhost:4001\"/&gt; &lt;target name=\"c1\" xsi:type=\"Console\" encoding=\"utf-8\" error=\"true\" detectConsoleAvailable=\"true\" /&gt; &lt;target name=\"c2\" xsi:type=\"ColoredConsole\" encoding=\"utf-8\" useDefaultRowHighlightingRules=\"true\" errorStream=\"true\" enableAnsiOutput=\"true\" detectConsoleAvailable=\"true\" DetectOutputRedirected=\"true\"&gt; &lt;/target&gt; &lt;/targets&gt; &lt;rules&gt; &lt;logger name=\"*\" maxLevel=\"Debug\" writeTo=\"c2\" /&gt; &lt;logger name=\"*\" minLevel=\"Info\" writeTo=\"f1\" /&gt; &lt;/rules&gt;&lt;/nlog&gt; 之后在程序中就可以正常使用日志功能了。比如： 1234567var viewModel = new StatusCodeViewModel&#123; Code = statusCode, Path = statusCodeResult.OriginalPath, QueryString = statusCodeResult.OriginalQueryString,&#125;;_logger.LogWarning(viewModel.ToString()); 还有可以在appsettings.json里面配置日志等级和命名空间过滤，跟在NLog.conf里面配置效果是一样的。例如： 1234567\"Logging\": &#123; \"LogLevel\": &#123; \"Default\": \"Warning\", \"StudyManagement.Controllers.ErrorController\": \"Warning\" &#125;&#125;, 欢迎交流交流问题请在微信公众号后台留言，每一条信息我都会回复哈~ 微信公众号：画星星高手 打代码直播间：https://live.bilibili.com/11883038 知乎：https://www.zhihu.com/people/dealiaxy 专栏：https://zhuanlan.zhihu.com/deali 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"C#","slug":"C","permalink":"http://blog.deali.cn/categories/C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://blog.deali.cn/tags/%E7%AC%94%E8%AE%B0/"},{"name":"学习","slug":"学习","permalink":"http://blog.deali.cn/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"文件","slug":"文件","permalink":"http://blog.deali.cn/tags/%E6%96%87%E4%BB%B6/"},{"name":"日志","slug":"日志","permalink":"http://blog.deali.cn/tags/%E6%97%A5%E5%BF%97/"},{"name":"视图","slug":"视图","permalink":"http://blog.deali.cn/tags/%E8%A7%86%E5%9B%BE/"},{"name":"模型","slug":"模型","permalink":"http://blog.deali.cn/tags/%E6%A8%A1%E5%9E%8B/"}]},{"title":"Android-Studio-插件记录","slug":"1af90499db6b8e473bc443b559ac4076","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/00ae06af28321889.html","link":"","permalink":"http://blog.deali.cn/posts/00ae06af28321889.html","excerpt":"","text":"GsonFormathttps://blog.csdn.net/leejizhou/article/details/50557786 ButterKnifeZeleznyhttp://blog.csdn.net/leejizhou/article/details/50541356 SQLScoutSQLite调试神器。http://www.idescout.com/https://plugins.jetbrains.com/plugin/8322-sqlscout-sqlite-support-","categories":[{"name":"Android开发","slug":"Android开发","permalink":"http://blog.deali.cn/categories/Android%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"android","slug":"android","permalink":"http://blog.deali.cn/tags/android/"},{"name":"插件","slug":"插件","permalink":"http://blog.deali.cn/tags/%E6%8F%92%E4%BB%B6/"},{"name":"记录","slug":"记录","permalink":"http://blog.deali.cn/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"Debian配置默认不开启图形界面","slug":"1a7adca5e5a2a15d277d336a849392ee","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/4ae6e39c4e43f135.html","link":"","permalink":"http://blog.deali.cn/posts/4ae6e39c4e43f135.html","excerpt":"","text":"前言Linux的图形界面实在是太耗资源了，同时开几个虚拟机感觉已经hold不住了，赶紧把这些Linux服务器的图形界面都关掉。 CLI：command Line Interface，命令行界面。现在的Linux发行版默认登陆界面几乎都是默认为GUI界面，如果按照旧版本的修改inittab文件，在一些比较新的版本是没有这个文件的(Linux的启动服务机制发生改变) 修改Grub配置文件打开grup配置文件 1nano /etc/default/grub 修改 1GRUB_CMDLINE_LINUX=”” 为GRUB_CMDLINE_LINUX=”text” 更新grub 1update-grub 更新系统服务管理器配置 1systemctl set-default multi-user.target 重启：init 6 123456789101112131415161718192021222324252627282930313233# If you change this file, run ‘update-grub’ afterwards to update # /boot/grub/grub.cfg. # For full documentation of the options in this file, see: # info -f grub -n ‘Simple configuration’GRUB_DEFAULT=0 GRUB_TIMEOUT=5 GRUB_DISTRIBUTOR=lsb_release -i -s 2&gt; /dev/null || echo Debian GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"GRUB_CMDLINE_LINUX=\"text\"# Uncomment to enable BadRAM filtering, modify to suit your needs # This works with Linux (no patch required) and with any kernel that obtains # the memory map information from GRUB (GNU Mach, kernel of FreeBSD …) #GRUB_BADRAM=”0x01234567,0xfefefefe,0x89abcdef,0xefefefef”# Uncomment to disable graphical terminal (grub-pc only) #GRUB_TERMINAL=console# The resolution used on graphical terminal # note that you can use only modes which your graphic card supports via VBE # you can see them in real GRUB with the command `vbeinfo’ #GRUB_GFXMODE=640x480# Uncomment if you don’t want GRUB to pass “root=UUID=xxx” parameter to Linux #GRUB_DISABLE_LINUX_UUID=true# Uncomment to disable generation of recovery mode menu entries #GRUB_DISABLE_RECOVERY=”true”# Uncomment to get a beep at grub start #GRUB_INIT_TUNE=”480 440 1” 解除debian root用户登陆限制打开gdm配置文件： 1nano /etc/gdm3/deamon.conf 配置安全设置：[security] 下一行添加 AllowRoot = ture去除gdm登陆用户名检测：打开文件 /etc/pam.d/gdm-autologin，并其相关配置信息删除或注释掉：auth required pam_succeed_if.so user != root quiet_success 修改后的gdm-autologin文件： 1234567891011121314151617181920#%PAM-1.0 auth requisite pam_nologin.so #auth required pam_succeed_if.so user != root quiet_success auth required pam_permit.so @include common-account # SELinux needs to be the first session rule. This ensures that any # lingering context has been cleared. Without this it is possible # that a module could execute code in the wrong domain. session [success=ok ignore=ignore module_unknown=ignore default=bad] pam_selinux.so close session required pam_loginuid.so # SELinux needs to intervene at login time to ensure that the process # starts in the proper default security context. Only sessions which are # intended to run in the user’s context should be run after this. session [success=ok ignore=ignore module_unknown=ignore default=bad] pam_selinux.so open session optional pam_keyinit.so force revoke session required pam_limits.so session required pam_env.so readenv=1 session required pam_env.so readenv=1 envfile=/etc/default/locale @include common-session @include common-password About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"图形界面","slug":"图形界面","permalink":"http://blog.deali.cn/tags/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/"},{"name":"默认","slug":"默认","permalink":"http://blog.deali.cn/tags/%E9%BB%98%E8%AE%A4/"},{"name":"开启","slug":"开启","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%90%AF/"}]},{"title":"Linux--使用Snap安装第三方微信客户端Electronic-Wechat","slug":"190832a01209b547d19e8a907ef08593","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.640Z","comments":true,"path":"posts/4e92ac05f4c057f0.html","link":"","permalink":"http://blog.deali.cn/posts/4e92ac05f4c057f0.html","excerpt":"","text":"前言腾讯估计是不会给Linux系统开发任何软件了，不过问题不大。我们有很多好用的第三方软件替代（无奈之举，摊手） 关于SnapUbuntu官网上的介绍 Snaps are applications packaged with all their dependencies to run on all popular Linux distributions from a single build. They update automatically and roll back gracefully. Whether you’re building for desktop, cloud, or the Internet of Things, publishing as a snap will keep users up to date and make system configuration issues less likely, freeing you to code more and debug less.Snapcraft, the open source tool to publish snaps, picks up from your existing build artefacts or language of choice, be it Python, Go, C/C++, Node.js, or even .NET. With 20 minutes you can have your first app built and released in the Snap Store. 了解更多：https://snapcraft.io 安装Snap基本环境1sudo apt install snapd snappy 安装electronic-wechat1sudo snap install electronic-wechat 由于 Snap 版自带了所有依赖，所以软件体积比较大，安装需要点耐心。如果安装失败，建议每次安装一个软件，逐个重试。安装后，需要重启或者注销系统，才能在主菜单中看到微信的启动器（快捷方式）。 Application Config把微信添加到应用程序菜单里 Create file : /usr/share/applications/electronic-wechat.desktop File content: 123456789101112[Desktop Entry]Name=Electronic WechatName[zh_CN]=微信电脑版Name[zh_TW]=微信电脑版Exec=/opt/electronic-wechat/electronic-wechatIcon=/opt/electronic-wechat/resources/electronic-wechat.pngTerminal=falseX-MultipleArgs=falseType=ApplicationEncoding=UTF-8Categories=Application;Utility;Network;InstantMessaging;StartupNotify=false 这样设置是全局有效的，如果需要只对当前用户有效，则在以下目录新建desktop文件即可。~/.local/share/applications EndSnap 应用安装简单，便于移植，缺点就是体积较大，毕竟为了保证在任何 Linux 发行版都能使用，集成了全部的依赖软件。当然，现在的电脑硬盘都很大，Snap 这一点体积可以忽略不计，重点是我们 Linux 用户有了更多好用的软件。 About 了解更多有趣的操作请关注我的微信公众号：DealiAxy每一篇文章都在我的博客有收录：blog.deali.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/categories/Linux/"}],"tags":[{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"},{"name":"安装","slug":"安装","permalink":"http://blog.deali.cn/tags/%E5%AE%89%E8%A3%85/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.deali.cn/tags/Linux/"},{"name":"微信开发","slug":"微信开发","permalink":"http://blog.deali.cn/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"},{"name":"微信","slug":"微信","permalink":"http://blog.deali.cn/tags/%E5%BE%AE%E4%BF%A1/"},{"name":"客户端","slug":"客户端","permalink":"http://blog.deali.cn/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"}]},{"title":"Windows上怎么配置flutter开发环境？这篇文章手把手教你","slug":"08cdd2451a09f01d9b8e30aa8827e303","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.624Z","comments":true,"path":"posts/af467da34d199830.html","link":"","permalink":"http://blog.deali.cn/posts/af467da34d199830.html","excerpt":"","text":"前言在Windows上做开发，一个字：坑。但是有时候外出只能带着笔记本，Linux在一些笔记本上不太兼容，驱动支持不完美，而且电源管理不够好，所以无奈的情况下只能用Windows暂时顶一下，就像现在我要在Windows上搭建Flutter的开发环境一样，太坑了。 进入正题先安装Android SDK首先，你要有一种可以下载到Android SDK的方式，可以是梯子，或者是国内镜像，具体我就不展开了。 1. 安装 Android Studio2. 第一次运行就会提示安装SDK3. 或者是按步骤操作 File | Settings | Appearance Behavior | System Settings | Android SDK 4. 加入环境变量 Windows的环境变量很麻烦，不像Linux一个profile搞定，具体操作就是打开控制面板，如图 选择系统和安全 选择系统 高级系统设置 环境变量 双击这个Path 选择新建 然后把SDK的安装目录复制进去就行了。 5. 设置ANDROID_HOME环境变量设置Path变量的同时，要把SDK的安装目录也添加到ANDROID_HOME里面，具体方法是新建一个环境变量，命名为ANDROID_HOME，变量值是SDK的目录。 下载Flutter SDK Flutter官网：https://flutter.dev/ 官方安装教程：https://flutter.dev/docs/get-started/install 1. 首先要添加两个环境变量，用来设置国内的Flutter镜像： PUB_HOSTED_URL=https://pub.flutter-io.cnFLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn设置变量的方法前面有说过，但是这个和Path环境变量又有不同，这个需要添加新的变量，操作如下： 在环境变量对话框里点新建 名称和变量值分别填入 （手把手教学啊，够清楚了吧） 2. 接下来有三种方法来安装Flutter 使用Git把Flutter的代码克隆下来，关于Windows上使用Git请参考我之前写的博客或自行搜索 使用Chocolatey安装Flutter，关于Chocolatey的使用我会在后面的博客里面介绍 下载官方的安装包，链接：https://flutter.dev/docs/get-started/install/windows 3. 把Flutter代码下载下来之后，同样要把这个路径添加到Path环境变量里面，具体操作不再赘述，都在上面介绍过了，在path环境变量后面直接添加Flutter的路径就可以了。4. 运行flutter doctor打开Powershell，输入命令： 1flutter doctor 然后Flutter就会自动下载各种依赖什么的，接下来编译Flutter SDK，结果类似下面这样就成功啦： 安装插件无论是使用VSCode还是Android Studio都行，都一样要安装Flutter插件，Android Studio装完需要重启。 配置Gradle还有一个很坑的地方就是要配置Gradle路径环境变量。 新建一个GRADLE_HOME的环境变量 把Gradle目录填进去，具体在哪自己找，不同的电脑不一样的 把GRADLE_HOME加到Path变量里：在Path里添加一个值为%GRADLE_HOME%\\bin的变量。 为了避免又出什么幺儿子，再添加一个CLASS_PATH的环境变量，值为：%GRADLE_HOME%\\lib ok…总算是配置完了，自己折腾一遍也总算能理解为啥有新手同学说他配置flutter环境搞了一个星期~Windows对开发者真的不算友好，多了很多折腾的地方，特别对于初学者来说要走很多弯路，说来说去还是用Linux或者Mac好啊（逃 欢迎与我交流 打代码直播间：https://live.bilibili.com/11883038 微信公众号：DealiAxy 知乎：https://www.zhihu.com/people/dealiaxy 博客：https://blog.deali.cn 简书：https://www.jianshu.com/u/965b95853b9f","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://blog.deali.cn/categories/Flutter/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://blog.deali.cn/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","permalink":"http://blog.deali.cn/tags/flutter/"},{"name":"手把手","slug":"手把手","permalink":"http://blog.deali.cn/tags/%E6%89%8B%E6%8A%8A%E6%89%8B/"},{"name":"篇文章","slug":"篇文章","permalink":"http://blog.deali.cn/tags/%E7%AF%87%E6%96%87%E7%AB%A0/"},{"name":"配置","slug":"配置","permalink":"http://blog.deali.cn/tags/%E9%85%8D%E7%BD%AE/"},{"name":"开发","slug":"开发","permalink":"http://blog.deali.cn/tags/%E5%BC%80%E5%8F%91/"},{"name":"环境","slug":"环境","permalink":"http://blog.deali.cn/tags/%E7%8E%AF%E5%A2%83/"}]},{"title":"Java使用JDBC操作SQLite","slug":"00e306fd9b02d7c696eb586f909b4a1f","date":"2020-03-02T02:27:52.000Z","updated":"2020-03-02T03:23:43.612Z","comments":true,"path":"posts/573135e6645e55c0.html","link":"","permalink":"http://blog.deali.cn/posts/573135e6645e55c0.html","excerpt":"","text":"SQLite介紹SQLite是一個輕量級的資料庫系統，不需要安裝就可以使用，也可以十分容易的就內嵌於系統內，FireFox就內嵌SQLite，可以在FireFox上直接使用JavaScript來呼叫操作資料庫。 SQLite是由C語言撰寫而已，可以跨Linux及Windows等平台，在Java存取及操作上則可使用JDBC來連線SQLite。 在JDBC連線SQLite上，大概分成二種方式，一種是由Pure-Java來連結資料，另一種則是直接利用Java呼叫C語言撰寫的函式庫，不過在實測上直接呼叫C的函式庫的方式應該是比較快的，不過在無法找到合適C函式庫的平台則可使用Pure-Java版。 SQLiteJDBC目前查到這個版本是比較有在更新，而且在使用上跟一般的JDBC幾乎是一樣的，上手程式十分簡單。 SQLiteJDBC可以由這裡下載，以下範例是由3.5.7版本製作，提供建立Table、移除Table、查詢、新增、刪除及修改等範例。 實例代碼123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109import java.sql.*; import org.sqlite.SQLiteConfig;import org.sqlite.SQLiteDataSource;public class MyTest &#123; public Connection getConnection() throws SQLException &#123; SQLiteConfig config = new SQLiteConfig(); // config.setReadOnly(true); config.setSharedCache(true); config.enableRecursiveTriggers(true); SQLiteDataSource ds = new SQLiteDataSource(config); ds.setUrl(\"jdbc:sqlite:sample.db\"); return ds.getConnection(); //ds.setServerName(\"sample.db\"); &#125; //create Table public void createTable(Connection con )throws SQLException&#123; String sql = \"DROP TABLE IF EXISTS test ;create table test (id integer, name string); \"; Statement stat = null; stat = con.createStatement(); stat.executeUpdate(sql); &#125; //drop table public void dropTable(Connection con)throws SQLException&#123; String sql = \"drop table test \"; Statement stat = null; stat = con.createStatement(); stat.executeUpdate(sql); &#125; //新增 public void insert(Connection con,int id,String name)throws SQLException&#123; String sql = \"insert into test (id,name) values(?,?)\"; PreparedStatement pst = null; pst = con.prepareStatement(sql); int idx = 1 ; pst.setInt(idx++, id); pst.setString(idx++, name); pst.executeUpdate(); &#125; //修改 public void update(Connection con,int id,String name)throws SQLException&#123; String sql = \"update test set name = ? where id = ?\"; PreparedStatement pst = null; pst = con.prepareStatement(sql); int idx = 1 ; pst.setString(idx++, name); pst.setInt(idx++, id); pst.executeUpdate(); &#125; //刪除 public void delete(Connection con,int id)throws SQLException&#123; String sql = \"delete from test where id = ?\"; PreparedStatement pst = null; pst = con.prepareStatement(sql); int idx = 1 ; pst.setInt(idx++, id); pst.executeUpdate(); &#125; public void selectAll(Connection con)throws SQLException&#123; String sql = \"select * from test\"; Statement stat = null; ResultSet rs = null; stat = con.createStatement(); rs = stat.executeQuery(sql); while(rs.next()) &#123; System.out.println(rs.getInt(\"id\")+\"\\t\"+rs.getString(\"name\")); &#125; &#125; public static void main(String args[]) throws SQLException&#123; MyTest test = new MyTest(); Connection con = test.getConnection(); //建立table test.createTable(con); //新增資料 test.insert(con, 1, \"第一個\"); test.insert(con, 2, \"第二個\"); //查詢顯示資料 System.out.println(\"新增二筆資料後狀況:\"); test.selectAll(con); //修改資料 System.out.println(\"修改第一筆資料後狀況:\"); test.update(con, 1, \"這個值被改變了!\"); //查詢顯示資料 test.selectAll(con); //刪除資料 System.out.println(\"刪除第一筆資料後狀況:\"); test.delete(con, 1); //查詢顯示資料 test.selectAll(con); //刪除table test.dropTable(con); con.close(); &#125;&#125; 說明SQLite並沒有使用者登入的的機制，所以只需要告知要存取的資料庫檔案位置就可以使用了。jdbc:sqlite:sample.db其中sample.db就是檔案名稱，也可指定其路徑位置c:\\sample.db。 以下是執行結果： 原本沒有sample.db這個檔案也被自動建立了，在專案目錄底下。 參考資料https://blog.yslifes.com/archives/971","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.deali.cn/tags/Java/"},{"name":"数据库","slug":"数据库","permalink":"http://blog.deali.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"操作","slug":"操作","permalink":"http://blog.deali.cn/tags/%E6%93%8D%E4%BD%9C/"},{"name":"使用","slug":"使用","permalink":"http://blog.deali.cn/tags/%E4%BD%BF%E7%94%A8/"}]}]}